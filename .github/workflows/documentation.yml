name: Documentation Generation and Deployment

on:
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
      - 'mkdocs.yml'
      - 'scripts/generate_docs.py'
      - 'docs/docgen-config.yaml'
  
  # Trigger on pull requests
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      regenerate_all:
        description: 'Regenerate all documentation'
        required: false
        default: 'false'
      deploy_site:
        description: 'Deploy documentation site'
        required: false
        default: 'false'
  
  # Scheduled runs
  schedule:
    # Weekly documentation check on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
    # Daily link validation at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:

  # Job 1: Generate and validate documentation
  generate-docs:
    runs-on: ubuntu-latest
    
    outputs:
      docs-changed: ${{ steps.check-changes.outputs.docs-changed }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git-based features
      
    - name: Ensure correct working directory
      run: cd $GITHUB_WORKSPACE

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        export PATH="$HOME/.local/bin:$PATH"
    - name: Install dependencies with Poetry
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        poetry install --no-interaction --no-root
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-docs-${{ hashFiles('**/requirements.txt', '**/dev-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-docs-
          
    # - name: Install Python dependencies with Poetry
    #   run: |
    #     export PATH="$HOME/.local/bin:$PATH"
    #     poetry install --no-interaction --no-root
        
    - name: Install additional documentation tools
      run: |
        # Install Vale for style checking
        curl -sfL https://install.goreleaser.com/github.com/ValeLint/vale.sh | sh -s -- -b /usr/local/bin
        
        # Install markdownlint
        npm install -g markdownlint-cli
        
    - name: Check for documentation changes
      id: check-changes
      run: |
        if git diff --name-only HEAD~1 | grep -E '\.(md|py)$|mkdocs\.yml|docgen-config\.yaml'; then
          echo "docs-changed=true" >> $GITHUB_OUTPUT
        else
          echo "docs-changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate API documentation
      run: |
        python scripts/generate_docs.py --api-docs
        
    - name: Update README with metrics
      run: |
        python scripts/generate_docs.py --update-readme
        
    - name: Validate documentation links
      run: |
        python scripts/generate_docs.py --validate-links
        
    - name: Run documentation quality checks
      run: |
        # Markdown linting
        markdownlint docs/ README.md || true
        
        # Style checking with Vale (if config exists)
        if [ -f "docs/.vale.ini" ]; then
          vale docs/
        fi
        
    - name: Generate full documentation
      if: github.event.inputs.regenerate_all == 'true' || github.event_name == 'schedule'
      run: |
        python scripts/generate_docs.py
        
    - name: Check spelling
      uses: crate-ci/typos@master
      with:
        files: docs/ README.md
        config: docs/.typos.toml
      continue-on-error: true
      
    - name: Generate documentation site
      run: |
        python scripts/generate_docs.py --generate-site
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-site
        path: site/
        retention-days: 30
        
    - name: Upload API documentation
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: docs/api/
        retention-days: 7
        
    - name: Generate documentation metrics
      run: |
        python scripts/generate_docs.py --config docs/docgen-config.yaml > docs-metrics.json
        
    - name: Upload metrics report
      uses: actions/upload-artifact@v4
      with:
        name: documentation-metrics
        path: |
          docs-metrics.json
          docs/metrics-report.json
        retention-days: 30

  # Job 2: Deploy documentation site
  deploy-docs:
    runs-on: ubuntu-latest
    needs: generate-docs
    if: github.ref == 'refs/heads/main' && (needs.generate-docs.outputs.docs-changed == 'true' || github.event.inputs.deploy_site == 'true')
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download documentation site
      uses: actions/download-artifact@v3
      with:
        name: documentation-site
        path: site/
        
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: site/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # Job 3: Update documentation in repository
  update-docs:
    runs-on: ubuntu-latest
    needs: generate-docs
    if: github.ref == 'refs/heads/main' && needs.generate-docs.outputs.docs-changed == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests
        
    - name: Download API documentation
      uses: actions/download-artifact@v3
      with:
        name: api-documentation
        path: docs/api/
        
    - name: Download metrics
      uses: actions/download-artifact@v3
      with:
        name: documentation-metrics
        
    - name: Check for changes
      id: verify-changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit documentation updates
      if: steps.verify-changes.outputs.changes == 'true'
      run: |
        git add docs/
        git add README.md
        git commit -m "docs: automated documentation update [skip ci]" || exit 0
        git push

  # Job 4: Quality assurance and reporting
  qa-report:
    runs-on: ubuntu-latest
    needs: generate-docs
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download metrics
      uses: actions/download-artifact@v3
      with:
        name: documentation-metrics
      continue-on-error: true
      
    - name: Generate QA report
      run: |
        cat > qa-report.md << 'EOF'
        # Documentation Quality Assurance Report
        
        **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Workflow**: ${{ github.workflow }}
        **Run**: ${{ github.run_number }}
        
        ## Summary
        
        - **Repository**: ${{ github.repository }}
        - **Branch**: ${{ github.ref_name }}
        - **Commit**: ${{ github.sha }}
        - **Trigger**: ${{ github.event_name }}
        
        ## Documentation Metrics
        
        EOF
        
        if [ -f "docs-metrics.json" ]; then
          echo "### Generated Metrics" >> qa-report.md
          python3 << 'PYTHON'
        import json
        
        try:
            with open('docs-metrics.json', 'r') as f:
                metrics = json.load(f)
            
            print("| Metric | Value |")
            print("|--------|-------|")
            
            for key, value in metrics.items():
                if isinstance(value, dict):
                    for subkey, subvalue in value.items():
                        print(f"| {key}.{subkey} | {subvalue} |")
                else:
                    print(f"| {key} | {value} |")
        except:
            print("Could not parse metrics file")
        PYTHON
        fi >> qa-report.md
        
        echo "" >> qa-report.md
        echo "## Next Steps" >> qa-report.md
        echo "" >> qa-report.md
        echo "- Review any failed quality checks above" >> qa-report.md
        echo "- Check the uploaded documentation artifacts" >> qa-report.md
        echo "- Visit the deployed documentation site" >> qa-report.md
        
    - name: Upload QA report
      uses: actions/upload-artifact@v4
      with:
        name: qa-report
        path: qa-report.md
        retention-days: 7
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const qaReport = fs.readFileSync('qa-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📚 Documentation Quality Report\n\n${qaReport}\n\n*This report was automatically generated by the documentation workflow.*`
            });
          } catch (error) {
            console.log('Could not post QA report:', error);
          }

  # Job 5: Notification (optional)
  notify:
    runs-on: ubuntu-latest
    needs: [generate-docs, deploy-docs, update-docs]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify on success
      if: needs.generate-docs.result == 'success' && needs.deploy-docs.result == 'success'
      run: |
        echo "✅ Documentation successfully generated and deployed!"
        
    - name: Notify on failure
      if: needs.generate-docs.result == 'failure' || needs.deploy-docs.result == 'failure'
      run: |
        echo "❌ Documentation generation or deployment failed!"
        exit 1
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
