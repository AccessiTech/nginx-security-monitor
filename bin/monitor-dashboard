#!/usr/bin/env python3
"""
NGINX Security Monitor - Real-time Dashboard

Real-time monitoring dashboard with interactive threat visualization,
system metrics display, and alert status overview.
"""

import argparse
import os
import sys
import json
import time
import threading
from pathlib import Path
from datetime import datetime, timedelta
import subprocess
import signal
from collections import defaultdict, deque
import re

try:
    import psutil
    import blessed
    HAS_DEPENDENCIES = True
except ImportError:
    HAS_DEPENDENCIES = False

def setup_paths():
    """Setup and validate required paths."""
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    config_dir = project_root / "config"
    
    return {
        'script_dir': script_dir,
        'project_root': project_root,
        'config_dir': config_dir,
        'logs_dir': project_root / "logs",
        'patterns_file': config_dir / "patterns.json"
    }

class DashboardMonitor:
    def __init__(self, paths, refresh_rate=1):
        self.paths = paths
        self.refresh_rate = refresh_rate
        self.running = False
        self.term = blessed.Terminal() if HAS_DEPENDENCIES else None
        
        # Data storage
        self.log_entries = deque(maxlen=1000)
        self.threat_counts = defaultdict(int)
        self.recent_threats = deque(maxlen=50)
        self.system_metrics = {
            'cpu': deque(maxlen=60),
            'memory': deque(maxlen=60),
            'disk': deque(maxlen=60),
            'network': deque(maxlen=60)
        }
        
        # Load patterns
        self.patterns = self.load_patterns()
        
        # Start background monitoring
        self.log_monitor_thread = None
        self.metrics_monitor_thread = None
    
    def load_patterns(self):
        """Load threat detection patterns."""
        patterns_file = self.paths['patterns_file']
        if patterns_file.exists():
            try:
                with open(patterns_file, 'r') as f:
                    data = json.load(f)
                    return data.get('patterns', {})
            except:
                pass
        
        # Default patterns if file not found
        return {
            'sql_injection': r'(?i)(union|select|insert|update|delete|drop|create|alter)',
            'xss': r'(?i)(<script|javascript:|onload=|onerror=)',
            'directory_traversal': r'(\.\.\/|\.\.\\)',
            'admin_access': r'(?i)/(admin|administrator|wp-admin)',
            'brute_force': r'(?i)(login|password|auth).*40[13]',
            'scanner': r'(?i)(nikto|nmap|sqlmap|gobuster|dirbuster)'
        }
    
    def analyze_log_entry(self, log_line):
        """Analyze a log entry for threats."""
        threats_found = []
        
        for pattern_name, pattern in self.patterns.items():
            try:
                if re.search(pattern, log_line):
                    threats_found.append(pattern_name)
                    self.threat_counts[pattern_name] += 1
            except re.error:
                continue
        
        if threats_found:
            # Extract IP address
            ip_match = re.match(r'^(\d+\.\d+\.\d+\.\d+)', log_line)
            ip = ip_match.group(1) if ip_match else 'unknown'
            
            threat_entry = {
                'timestamp': datetime.now(),
                'ip': ip,
                'threats': threats_found,
                'log_entry': log_line[:100] + '...' if len(log_line) > 100 else log_line
            }
            self.recent_threats.append(threat_entry)
        
        return threats_found
    
    def monitor_logs(self):
        """Monitor log files for new entries."""
        logs_dir = self.paths['logs_dir']
        if not logs_dir.exists():
            return
        
        # Find NGINX log files
        log_files = list(logs_dir.glob('**/*.log')) + list(logs_dir.glob('**/access.log*'))
        
        if not log_files:
            # Try common NGINX log locations
            common_locations = [
                Path('/var/log/nginx/access.log'),
                Path('/var/log/nginx/error.log'),
                Path('/usr/local/var/log/nginx/access.log')
            ]
            log_files = [f for f in common_locations if f.exists()]
        
        file_positions = {}
        
        while self.running:
            for log_file in log_files:
                if not log_file.exists():
                    continue
                
                try:
                    # Get current file size
                    current_size = log_file.stat().st_size
                    last_position = file_positions.get(str(log_file), 0)
                    
                    if current_size > last_position:
                        # Read new content
                        with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                            f.seek(last_position)
                            new_content = f.read()
                            file_positions[str(log_file)] = f.tell()
                        
                        # Process new lines
                        for line in new_content.strip().split('\n'):
                            if line.strip():
                                self.log_entries.append({
                                    'timestamp': datetime.now(),
                                    'file': log_file.name,
                                    'content': line
                                })
                                self.analyze_log_entry(line)
                    
                except (OSError, IOError):
                    continue
            
            time.sleep(self.refresh_rate)
    
    def monitor_system_metrics(self):
        """Monitor system metrics."""
        while self.running:
            try:
                # CPU usage
                cpu_percent = psutil.cpu_percent(interval=1)
                self.system_metrics['cpu'].append(cpu_percent)
                
                # Memory usage
                memory = psutil.virtual_memory()
                self.system_metrics['memory'].append(memory.percent)
                
                # Disk usage
                disk = psutil.disk_usage('/')
                disk_percent = (disk.used / disk.total) * 100
                self.system_metrics['disk'].append(disk_percent)
                
                # Network I/O (simplified)
                net_io = psutil.net_io_counters()
                if net_io:
                    network_activity = (net_io.bytes_sent + net_io.bytes_recv) / 1024 / 1024  # MB
                    self.system_metrics['network'].append(network_activity)
                else:
                    self.system_metrics['network'].append(0)
                
            except:
                # Fallback values if psutil fails
                self.system_metrics['cpu'].append(0)
                self.system_metrics['memory'].append(0)
                self.system_metrics['disk'].append(0)
                self.system_metrics['network'].append(0)
            
            time.sleep(self.refresh_rate)
    
    def get_sparkline(self, data, width=20):
        """Generate a simple ASCII sparkline."""
        if not data or len(data) < 2:
            return ' ' * width
        
        # Take last 'width' data points
        recent_data = list(data)[-width:]
        if len(recent_data) < width:
            recent_data = [0] * (width - len(recent_data)) + recent_data
        
        min_val = min(recent_data)
        max_val = max(recent_data)
        
        if max_val == min_val:
            return '─' * width
        
        # Create sparkline
        chars = ' ▁▂▃▄▅▆▇█'
        sparkline = ''
        
        for value in recent_data:
            normalized = (value - min_val) / (max_val - min_val)
            char_index = int(normalized * (len(chars) - 1))
            sparkline += chars[char_index]
        
        return sparkline
    
    def render_dashboard(self):
        """Render the main dashboard."""
        if not self.term:
            return self.render_simple_dashboard()
        
        with self.term.fullscreen(), self.term.cbreak(), self.term.hidden_cursor():
            while self.running:
                # Clear screen
                print(self.term.clear())
                
                # Header
                header = f"🔒 NGINX Security Monitor Dashboard - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                print(self.term.bold + self.term.center(header) + self.term.normal)
                print(self.term.center("─" * min(80, self.term.width)))
                print()
                
                # System Metrics
                print(self.term.bold + "📊 System Metrics:" + self.term.normal)
                
                if self.system_metrics['cpu']:
                    cpu_current = self.system_metrics['cpu'][-1]
                    cpu_sparkline = self.get_sparkline(self.system_metrics['cpu'])
                    cpu_color = self.term.red if cpu_current > 80 else self.term.yellow if cpu_current > 60 else self.term.green
                    print(f"  CPU:    {cpu_color}{cpu_current:5.1f}%{self.term.normal} {cpu_sparkline}")
                
                if self.system_metrics['memory']:
                    mem_current = self.system_metrics['memory'][-1]
                    mem_sparkline = self.get_sparkline(self.system_metrics['memory'])
                    mem_color = self.term.red if mem_current > 90 else self.term.yellow if mem_current > 75 else self.term.green
                    print(f"  Memory: {mem_color}{mem_current:5.1f}%{self.term.normal} {mem_sparkline}")
                
                if self.system_metrics['disk']:
                    disk_current = self.system_metrics['disk'][-1]
                    disk_sparkline = self.get_sparkline(self.system_metrics['disk'])
                    disk_color = self.term.red if disk_current > 90 else self.term.yellow if disk_current > 80 else self.term.green
                    print(f"  Disk:   {disk_color}{disk_current:5.1f}%{self.term.normal} {disk_sparkline}")
                
                print()
                
                # Threat Summary
                print(self.term.bold + "🚨 Threat Summary:" + self.term.normal)
                
                if self.threat_counts:
                    for threat_type, count in sorted(self.threat_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
                        color = self.term.red if count > 10 else self.term.yellow if count > 5 else self.term.green
                        print(f"  {threat_type:20} {color}{count:4d}{self.term.normal} threats")
                else:
                    print(f"  {self.term.green}No threats detected{self.term.normal}")
                
                print()
                
                # Recent Threats
                print(self.term.bold + "⚠️  Recent Threats:" + self.term.normal)
                
                if self.recent_threats:
                    for threat in list(self.recent_threats)[-5:]:
                        timestamp = threat['timestamp'].strftime('%H:%M:%S')
                        threats_str = ', '.join(threat['threats'])
                        print(f"  {timestamp} {self.term.cyan}{threat['ip']:15}{self.term.normal} {self.term.red}{threats_str}{self.term.normal}")
                        print(f"           {threat['log_entry'][:60]}...")
                else:
                    print(f"  {self.term.green}No recent threats{self.term.normal}")
                
                print()
                
                # Recent Log Entries
                print(self.term.bold + "📝 Recent Log Entries:" + self.term.normal)
                
                if self.log_entries:
                    for entry in list(self.log_entries)[-3:]:
                        timestamp = entry['timestamp'].strftime('%H:%M:%S')
                        content = entry['content'][:60] + '...' if len(entry['content']) > 60 else entry['content']
                        print(f"  {timestamp} {content}")
                else:
                    print("  No recent log entries")
                
                print()
                
                # Footer
                print(self.term.move_down(3))
                footer = "Press 'q' to quit, 'r' to refresh, 'c' to clear counters"
                print(self.term.center(footer))
                
                # Handle input
                key = self.term.inkey(timeout=self.refresh_rate)
                if key.lower() == 'q':
                    break
                elif key.lower() == 'r':
                    continue
                elif key.lower() == 'c':
                    self.threat_counts.clear()
                    self.recent_threats.clear()
    
    def render_simple_dashboard(self):
        """Render a simple text-based dashboard for systems without blessed."""
        try:
            while self.running:
                # Clear screen (works on most terminals)
                os.system('clear' if os.name == 'posix' else 'cls')
                
                print("="*60)
                print(f"🔒 NGINX Security Monitor Dashboard")
                print(f"📅 {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print("="*60)
                
                # System info
                try:
                    cpu = psutil.cpu_percent()
                    memory = psutil.virtual_memory().percent
                    print(f"\n📊 System: CPU {cpu:.1f}% | Memory {memory:.1f}%")
                except:
                    print(f"\n📊 System: Monitoring unavailable")
                
                # Threat summary
                print(f"\n🚨 Threats Detected:")
                if self.threat_counts:
                    for threat_type, count in sorted(self.threat_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
                        print(f"  {threat_type}: {count}")
                else:
                    print("  No threats detected")
                
                # Recent threats
                print(f"\n⚠️  Recent Threats:")
                if self.recent_threats:
                    for threat in list(self.recent_threats)[-3:]:
                        timestamp = threat['timestamp'].strftime('%H:%M:%S')
                        threats_str = ', '.join(threat['threats'])
                        print(f"  {timestamp} {threat['ip']} - {threats_str}")
                else:
                    print("  No recent threats")
                
                # Log entries
                print(f"\n📝 Recent Logs:")
                if self.log_entries:
                    for entry in list(self.log_entries)[-3:]:
                        timestamp = entry['timestamp'].strftime('%H:%M:%S')
                        content = entry['content'][:50] + '...' if len(entry['content']) > 50 else entry['content']
                        print(f"  {timestamp} {content}")
                else:
                    print("  No recent log entries")
                
                print(f"\n" + "="*60)
                print("Press Ctrl+C to quit")
                
                time.sleep(self.refresh_rate)
                
        except KeyboardInterrupt:
            pass
    
    def start(self):
        """Start the dashboard monitoring."""
        self.running = True
        
        # Start background monitoring threads
        self.log_monitor_thread = threading.Thread(target=self.monitor_logs, daemon=True)
        self.metrics_monitor_thread = threading.Thread(target=self.monitor_system_metrics, daemon=True)
        
        self.log_monitor_thread.start()
        if HAS_DEPENDENCIES:
            self.metrics_monitor_thread.start()
        
        # Start the dashboard
        try:
            self.render_dashboard()
        except KeyboardInterrupt:
            pass
        finally:
            self.stop()
    
    def stop(self):
        """Stop the dashboard monitoring."""
        self.running = False

def check_dependencies():
    """Check if required dependencies are available."""
    missing = []
    
    try:
        import psutil
    except ImportError:
        missing.append('psutil')
    
    try:
        import blessed
    except ImportError:
        missing.append('blessed')
    
    if missing:
        print("⚠️  Missing optional dependencies for enhanced dashboard:")
        for dep in missing:
            print(f"  - {dep}")
        print("\nInstall with: pip install " + " ".join(missing))
        print("The dashboard will run in basic mode without these dependencies.\n")
    
    return len(missing) == 0

def dashboard_command(args):
    """Run the dashboard."""
    paths = setup_paths()
    
    print("🖥️  Starting NGINX Security Monitor Dashboard...")
    
    # Check dependencies
    has_deps = check_dependencies()
    
    if not has_deps and not args.basic:
        print("Use --basic to run in basic mode, or install dependencies for full features.")
        return False
    
    # Create and start dashboard
    dashboard = DashboardMonitor(paths, args.refresh)
    
    def signal_handler(signum, frame):
        dashboard.stop()
        print("\n👋 Dashboard stopped")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        dashboard.start()
    except Exception as e:
        print(f"❌ Dashboard error: {e}")
        return False
    
    return True

def export_dashboard_data(args):
    """Export current dashboard data."""
    paths = setup_paths()
    
    print("📤 Exporting dashboard data...")
    
    # This would collect current metrics and save to file
    export_data = {
        'timestamp': datetime.now().isoformat(),
        'system_info': {},
        'threat_summary': {},
        'recent_activity': {}
    }
    
    # Add system info if available
    if HAS_DEPENDENCIES:
        try:
            export_data['system_info'] = {
                'cpu_percent': psutil.cpu_percent(),
                'memory_percent': psutil.virtual_memory().percent,
                'disk_percent': (psutil.disk_usage('/').used / psutil.disk_usage('/').total) * 100,
                'boot_time': psutil.boot_time()
            }
        except:
            pass
    
    # Save to file
    output_file = paths['project_root'] / f"dashboard_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(output_file, 'w') as f:
        json.dump(export_data, f, indent=2, default=str)
    
    print(f"✅ Data exported to: {output_file}")
    return True

def main():
    parser = argparse.ArgumentParser(
        description="Real-time monitoring dashboard for NGINX Security Monitor",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s                        # Start interactive dashboard
  %(prog)s --basic                # Start in basic mode
  %(prog)s --refresh 2            # Refresh every 2 seconds
  %(prog)s --export               # Export current metrics
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Main dashboard command
    dashboard_parser = subparsers.add_parser('start', help='Start the dashboard (default)')
    dashboard_parser.add_argument('--refresh', type=int, default=1,
                                 help='Refresh interval in seconds (default: 1)')
    dashboard_parser.add_argument('--basic', action='store_true',
                                 help='Run in basic mode without enhanced features')
    
    # Export command
    export_parser = subparsers.add_parser('export', help='Export dashboard data')
    
    # For backward compatibility, also accept flags directly
    parser.add_argument('--refresh', type=int, default=1,
                       help='Refresh interval in seconds (default: 1)')
    parser.add_argument('--basic', action='store_true',
                       help='Run in basic mode without enhanced features')
    parser.add_argument('--export', action='store_true',
                       help='Export current dashboard metrics')
    
    args = parser.parse_args()
    
    try:
        # Handle subcommands
        if args.command == 'export' or args.export:
            return export_dashboard_data(args)
        elif args.command == 'start' or not args.command:
            return dashboard_command(args)
        else:
            # No specific command, show help
            parser.print_help()
            return True
            
    except KeyboardInterrupt:
        print("\n❌ Operation cancelled by user")
        return False
    except Exception as e:
        print(f"❌ Error: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
