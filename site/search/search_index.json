{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Nginx Security Monitor Documentation","text":"<p>Explore the comprehensive documentation for Nginx Security Monitor. This documentation is organized to help you get started quickly and find the information you need.</p>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>New to Nginx Security Monitor? Start here:</p> <ul> <li>Quick Start Tutorial - Get up and running in 5 minutes</li> <li>Installation Guide - Complete installation instructions</li> <li>Getting Started for Developers - Development environment setup</li> <li>Use Cases - Common use cases and scenarios</li> </ul>"},{"location":"#essential-documentation","title":"\ud83d\udccb Essential Documentation","text":""},{"location":"#configuration-and-setup","title":"Configuration and Setup","text":"<ul> <li>Configuration Guide - Complete configuration reference</li> <li>Deployment Guide - Environment-specific deployment instructions</li> <li>Encryption Guide - Secure configuration practices</li> </ul>"},{"location":"#security-documentation","title":"Security Documentation","text":"<ul> <li>Security Best Practices - Production security guidelines</li> <li>Security Features - Built-in security capabilities</li> <li>Security Integrations - External security tool integration</li> </ul>"},{"location":"#operations-and-monitoring","title":"Operations and Monitoring","text":"<ul> <li>Operations Guide - Day-to-day operations</li> <li>Alert Systems - Notification and alerting</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#technical-references","title":"\ud83d\udd27 Technical References","text":""},{"location":"#development-and-customization","title":"Development and Customization","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Architecture - System architecture overview</li> <li>Plugin Development - Creating custom plugins</li> <li>Testing - Testing guidelines and procedures</li> </ul>"},{"location":"#detection-and-response","title":"Detection and Response","text":"<ul> <li>Pattern Detection - Threat detection patterns</li> <li>Mitigation Strategies - Automated response strategies</li> <li>Service Protection - Service hardening</li> </ul>"},{"location":"#advanced-topics","title":"\ud83d\udcda Advanced Topics","text":""},{"location":"#integration-and-automation","title":"Integration and Automation","text":"<ul> <li>Integration Cookbook - Integration examples and recipes</li> <li>Style Guide - Documentation and code style standards</li> </ul>"},{"location":"#contributing-and-community","title":"Contributing and Community","text":"<ul> <li>Contributing Guidelines - How to contribute to the project</li> <li>Code of Conduct - Community guidelines</li> <li>Testing Keys - Test environment setup</li> </ul>"},{"location":"#high-level-overview","title":"High-Level Overview","text":"<p>NGINX Security Monitor is a Python-based tool designed to monitor NGINX logs for potential security threats. It provides real-time detection, mitigation, and alerting capabilities, making it ideal for production environments. Key features include:</p> <ul> <li>Threat Detection: Identifies attack patterns such as SQL injection, XSS, DDoS, and brute force (see Pattern Detection).</li> <li>Mitigation Strategies: Applies countermeasures to neutralize threats (see Mitigation Strategies).</li> <li>Alerting System: Sends notifications via email and SMS (see Alert Systems).</li> <li>System Integration: Works seamlessly with tools like fail2ban, OSSEC/Wazuh, Suricata, and ModSecurity (see Security Integrations).</li> <li>Advanced Security: Includes encrypted pattern storage and a plugin system for custom rules (see Security Features).</li> <li>Production-Ready: Can run as a Linux systemd service with security hardening (see Service Protection).</li> </ul> <p>For a complete list of topics, check the README or navigate through the sidebar.</p>"},{"location":"ALERT_SYSTEMS/","title":"\ud83d\udea8 Alert Systems Guide - NGINX Security Monitor","text":""},{"location":"ALERT_SYSTEMS/#overview","title":"\ud83c\udfaf Overview","text":"<p>The NGINX Security Monitor includes a comprehensive alert system that can notify you of security threats through multiple channels. This guide covers setting up, configuring, and customizing the alert system to meet your specific needs.</p>"},{"location":"ALERT_SYSTEMS/#supported-alert-channels","title":"\ud83d\udce7 Supported Alert Channels","text":"Channel Description Use Case Email SMTP-based email alerts General notifications, detailed reports SMS Text message alerts Critical threats, immediate attention Webhook HTTP POST to custom endpoints Integration with external systems Slack Slack workspace notifications Team collaboration Discord Discord channel notifications Community monitoring Custom Plugin-based custom channels Specialized integrations"},{"location":"ALERT_SYSTEMS/#email-alert-setup","title":"\ud83d\udd27 Email Alert Setup","text":""},{"location":"ALERT_SYSTEMS/#basic-email-configuration","title":"Basic Email Configuration","text":"<p>Add email configuration to your <code>settings.yaml</code>:</p> <pre><code>alerts:\n  email:\n    enabled: true\n    smtp_server: \"smtp.gmail.com\"\n    smtp_port: 587\n    use_tls: true\n    username: \"your-email@gmail.com\"\n    password: \"your-app-password\"  # Use app password for Gmail\n    from_address: \"security-monitor@yourdomain.com\"\n    to_addresses:\n      - \"admin@yourdomain.com\"\n      - \"security-team@yourdomain.com\"\n\n    # Alert filtering\n    min_severity: \"medium\"  # Only send medium, high, critical alerts\n    max_alerts_per_hour: 10  # Rate limiting\n\n    # Email template settings\n    subject_template: \"[SECURITY] {threat_type} detected from {source_ip}\"\n    include_logs: true  # Include relevant log entries in email\n    include_mitigation: true  # Include mitigation actions taken\n</code></pre>"},{"location":"ALERT_SYSTEMS/#gmail-configuration","title":"Gmail Configuration","text":"<p>For Gmail accounts, you'll need to:</p> <ol> <li>Enable 2-Factor Authentication</li> <li>Generate App Password:</li> <li>Go to Google Account settings</li> <li>Security \u2192 2-Step Verification</li> <li>App passwords \u2192 Generate password</li> <li>Use this password in the configuration</li> </ol> <pre><code>alerts:\n  email:\n    enabled: true\n    smtp_server: \"smtp.gmail.com\"\n    smtp_port: 587\n    use_tls: true\n    username: \"your-email@gmail.com\"\n    password: \"your-16-char-app-password\"\n    from_address: \"your-email@gmail.com\"\n    to_addresses: [\"admin@yourdomain.com\"]\n</code></pre>"},{"location":"ALERT_SYSTEMS/#microsoft-outlookoffice-365","title":"Microsoft Outlook/Office 365","text":"<pre><code>alerts:\n  email:\n    enabled: true\n    smtp_server: \"smtp-mail.outlook.com\"\n    smtp_port: 587\n    use_tls: true\n    username: \"your-email@outlook.com\"\n    password: \"your-password\"\n    from_address: \"your-email@outlook.com\"\n    to_addresses: [\"admin@yourdomain.com\"]\n</code></pre>"},{"location":"ALERT_SYSTEMS/#custom-smtp-server","title":"Custom SMTP Server","text":"<pre><code>alerts:\n  email:\n    enabled: true\n    smtp_server: \"mail.yourdomain.com\"\n    smtp_port: 25\n    use_tls: false\n    use_ssl: false\n    username: \"security@yourdomain.com\"\n    password: \"secure-password\"\n    from_address: \"security-monitor@yourdomain.com\"\n    to_addresses: [\"admin@yourdomain.com\"]\n</code></pre>"},{"location":"ALERT_SYSTEMS/#sms-alert-setup","title":"\ud83d\udcf1 SMS Alert Setup","text":""},{"location":"ALERT_SYSTEMS/#twilio-integration","title":"Twilio Integration","text":"<pre><code>alerts:\n  sms:\n    enabled: true\n    provider: \"twilio\"\n    config:\n      account_sid: \"your-twilio-account-sid\"\n      auth_token: \"your-twilio-auth-token\"\n      from_number: \"+1234567890\"  # Your Twilio phone number\n      to_numbers:\n        - \"+1987654321\"  # Admin phone number\n        - \"+1555123456\"  # Security team number\n\n    # SMS-specific settings\n    min_severity: \"high\"  # Only high and critical alerts via SMS\n    max_sms_per_hour: 5   # Strict rate limiting for SMS\n    message_template: \"SECURITY ALERT: {threat_type} from {source_ip}. Check email for details.\"\n</code></pre>"},{"location":"ALERT_SYSTEMS/#aws-sns-integration","title":"AWS SNS Integration","text":"<pre><code>alerts:\n  sms:\n    enabled: true\n    provider: \"aws_sns\"\n    config:\n      aws_access_key_id: \"your-access-key\"\n      aws_secret_access_key: \"your-secret-key\"\n      aws_region: \"us-east-1\"\n      topic_arn: \"arn:aws:sns:us-east-1:123456789012:security-alerts\"\n\n    min_severity: \"high\"\n    max_sms_per_hour: 3\n</code></pre>"},{"location":"ALERT_SYSTEMS/#setup-instructions-for-twilio","title":"Setup Instructions for Twilio","text":"<ol> <li>Create Twilio Account:</li> <li>Sign up at twilio.com</li> <li>Verify your phone number</li> <li> <p>Purchase a phone number</p> </li> <li> <p>Get Credentials:</p> </li> <li>Account SID from Twilio Console</li> <li>Auth Token from Twilio Console</li> <li> <p>Phone number you purchased</p> </li> <li> <p>Install Dependencies:    <pre><code>pip install twilio\n</code></pre></p> </li> <li> <p>Test Configuration:    <pre><code>python -c \"\nfrom src.alerts.sms_alert import SmsAlert\nsms = SmsAlert({'provider': 'twilio', 'config': {...}})\nsms.send_test_message()\n\"\n</code></pre></p> </li> </ol>"},{"location":"ALERT_SYSTEMS/#webhook-integration","title":"\ud83e\ude9d Webhook Integration","text":""},{"location":"ALERT_SYSTEMS/#basic-webhook-setup","title":"Basic Webhook Setup","text":"<pre><code>alerts:\n  webhook:\n    enabled: true\n    endpoints:\n      - name: \"security-system\"\n        url: \"https://your-security-system.com/api/alerts\"\n        method: \"POST\"\n        headers:\n          Authorization: \"Bearer your-api-token\"\n          Content-Type: \"application/json\"\n        timeout: 30\n        retry_count: 3\n\n      - name: \"backup-endpoint\"\n        url: \"https://backup-system.com/alerts\"\n        method: \"POST\"\n        headers:\n          X-API-Key: \"your-api-key\"\n\n    # Webhook payload template\n    payload_template: |\n      {\n        \"alert_id\": \"{alert_id}\",\n        \"timestamp\": \"{timestamp}\",\n        \"threat_type\": \"{threat_type}\",\n        \"severity\": \"{severity}\",\n        \"source_ip\": \"{source_ip}\",\n        \"description\": \"{description}\",\n        \"mitigation_taken\": \"{mitigation_taken}\",\n        \"log_entries\": {log_entries}\n      }\n</code></pre>"},{"location":"ALERT_SYSTEMS/#slack-integration","title":"Slack Integration","text":"<pre><code>alerts:\n  slack:\n    enabled: true\n    webhook_url: \"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\"\n    channel: \"#security-alerts\"\n    username: \"Security Monitor\"\n    icon_emoji: \":shield:\"\n\n    # Message formatting\n    message_template: |\n      :warning: *Security Alert*\n      *Threat Type:* {threat_type}\n      *Severity:* {severity}\n      *Source IP:* {source_ip}\n      *Time:* {timestamp}\n      *Description:* {description}\n\n      *Mitigation:* {mitigation_taken}\n\n    min_severity: \"medium\"\n</code></pre>"},{"location":"ALERT_SYSTEMS/#discord-integration","title":"Discord Integration","text":"<pre><code>alerts:\n  discord:\n    enabled: true\n    webhook_url: \"https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK\"\n    username: \"Security Monitor\"\n    avatar_url: \"https://your-domain.com/security-icon.png\"\n\n    # Discord embed formatting\n    embed_template:\n      title: \"Security Alert: {threat_type}\"\n      description: \"{description}\"\n      color: 15158332  # Red color for alerts\n      fields:\n        - name: \"Source IP\"\n          value: \"{source_ip}\"\n          inline: true\n        - name: \"Severity\"\n          value: \"{severity}\"\n          inline: true\n        - name: \"Mitigation\"\n          value: \"{mitigation_taken}\"\n          inline: false\n</code></pre>"},{"location":"ALERT_SYSTEMS/#alert-customization","title":"\ud83c\udfa8 Alert Customization","text":""},{"location":"ALERT_SYSTEMS/#alert-templates","title":"Alert Templates","text":"<p>Create custom alert templates in <code>config/alert_templates.yaml</code>:</p> <pre><code>templates:\n  brute_force:\n    email:\n      subject: \"BRUTE FORCE ATTACK: {failed_attempts} attempts from {source_ip}\"\n      body: |\n        A brute force attack has been detected:\n\n        Source IP: {source_ip}\n        Failed Attempts: {failed_attempts}\n        Target URLs: {target_urls}\n        Time Range: {start_time} - {end_time}\n\n        Mitigation Actions Taken:\n        {mitigation_actions}\n\n        Recent Log Entries:\n        {log_entries}\n\n    slack:\n      message: |\n        :rotating_light: *BRUTE FORCE ATTACK DETECTED*\n\n        *Source:* {source_ip}\n        *Attempts:* {failed_attempts}\n        *Status:* {mitigation_status}\n\n        &lt;@channel&gt; Security team please investigate.\n\n  sql_injection:\n    email:\n      subject: \"SQL INJECTION ATTEMPT from {source_ip}\"\n      body: |\n        Potential SQL injection attack detected:\n\n        Source IP: {source_ip}\n        Target URL: {target_url}\n        Injection Pattern: {injection_pattern}\n        User Agent: {user_agent}\n\n        Request Details:\n        {request_details}\n\n        Immediate Action: {mitigation_taken}\n\n    sms:\n      message: \"SQL INJECTION from {source_ip} targeting {target_url}. Blocked: {blocked_status}\"\n</code></pre>"},{"location":"ALERT_SYSTEMS/#alert-severity-levels","title":"Alert Severity Levels","text":"<p>Configure different behaviors for each severity level:</p> <pre><code>alert_behavior:\n  critical:\n    channels: [\"email\", \"sms\", \"slack\"]\n    immediate: true\n    escalation_delay: 300  # 5 minutes\n    max_frequency: \"1/hour\"\n\n  high:\n    channels: [\"email\", \"slack\"]\n    immediate: true\n    max_frequency: \"3/hour\"\n\n  medium:\n    channels: [\"email\"]\n    immediate: false\n    batch_interval: 900  # 15 minutes\n    max_frequency: \"5/hour\"\n\n  low:\n    channels: [\"email\"]\n    immediate: false\n    batch_interval: 3600  # 1 hour\n    max_frequency: \"2/hour\"\n</code></pre>"},{"location":"ALERT_SYSTEMS/#alert-deduplication","title":"\ud83d\udd04 Alert Deduplication","text":"<p>Prevent alert spam with smart deduplication:</p> <pre><code>deduplication:\n  enabled: true\n\n  # Group similar alerts\n  grouping_rules:\n    - name: \"same_ip_brute_force\"\n      condition: \"threat_type == 'brute_force' and source_ip == previous.source_ip\"\n      window: 3600  # 1 hour\n      action: \"merge\"\n\n    - name: \"sql_injection_pattern\"\n      condition: \"threat_type == 'sql_injection' and pattern == previous.pattern\"\n      window: 1800  # 30 minutes\n      action: \"suppress\"\n\n  # Merge similar alerts into summary\n  merge_template: |\n    Multiple {threat_type} attempts detected:\n\n    Total Events: {event_count}\n    Time Range: {first_seen} - {last_seen}\n    Source IPs: {unique_ips}\n\n    Summary of Actions:\n    {summary_actions}\n</code></pre>"},{"location":"ALERT_SYSTEMS/#alert-testing","title":"\ud83d\udcca Alert Testing","text":""},{"location":"ALERT_SYSTEMS/#test-alert-delivery","title":"Test Alert Delivery","text":"<p>Use the built-in test commands:</p> <pre><code># Test email alerts\npython -m src.alerts.email_alert test --config config/settings.yaml\n\n# Test SMS alerts\npython -m src.alerts.sms_alert test --config config/settings.yaml\n\n# Test all alert channels\npython -m src.alert_manager test_all --config config/settings.yaml\n</code></pre>"},{"location":"ALERT_SYSTEMS/#test-configuration-script","title":"Test Configuration Script","text":"<p>Create a test script (<code>test_alerts.py</code>):</p> <pre><code>#!/usr/bin/env python3\n\"\"\"Test alert system configuration.\"\"\"\n\nfrom src.alert_manager import AlertManager\nimport yaml\n\ndef test_alerts():\n    \"\"\"Test all configured alert channels.\"\"\"\n\n    # Load configuration\n    with open('config/settings.yaml', 'r') as f:\n        config = yaml.safe_load(f)\n\n    # Initialize alert manager\n    alert_mgr = AlertManager(config['alerts'])\n\n    # Test alert\n    test_alert = {\n        'title': 'Test Alert - System Check',\n        'message': 'This is a test alert to verify alert system configuration.',\n        'severity': 'low',\n        'threat_type': 'test',\n        'source_ip': '127.0.0.1',\n        'timestamp': datetime.now().isoformat()\n    }\n\n    # Send test alert\n    try:\n        result = alert_mgr.send_alert(test_alert)\n        print(f\"Test alert sent: {result}\")\n    except Exception as e:\n        print(f\"Alert test failed: {e}\")\n\nif __name__ == \"__main__\":\n    test_alerts()\n</code></pre>"},{"location":"ALERT_SYSTEMS/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"ALERT_SYSTEMS/#common-email-issues","title":"Common Email Issues","text":""},{"location":"ALERT_SYSTEMS/#authentication-errors","title":"Authentication Errors","text":"<pre><code># Check SMTP server connectivity\ntelnet smtp.gmail.com 587\n\n# Test authentication\npython -c \"\nimport smtplib\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login('your-email@gmail.com', 'your-app-password')\nprint('Authentication successful')\nserver.quit()\n\"\n</code></pre>"},{"location":"ALERT_SYSTEMS/#gmail-app-password-issues","title":"Gmail App Password Issues","text":"<ol> <li>Ensure 2FA is enabled</li> <li>Generate new app password</li> <li>Use app password, not regular password</li> <li>Check for typos in configuration</li> </ol>"},{"location":"ALERT_SYSTEMS/#corporate-firewall-issues","title":"Corporate Firewall Issues","text":"<pre><code>alerts:\n  email:\n    smtp_server: \"internal-smtp.company.com\"\n    smtp_port: 25\n    use_tls: false\n    # May need to configure proxy settings\n</code></pre>"},{"location":"ALERT_SYSTEMS/#sms-troubleshooting","title":"SMS Troubleshooting","text":""},{"location":"ALERT_SYSTEMS/#twilio-issues","title":"Twilio Issues","text":"<pre><code># Test Twilio configuration\nfrom twilio.rest import Client\n\nclient = Client(\"account_sid\", \"auth_token\")\nmessage = client.messages.create(\n    body=\"Test message from Security Monitor\",\n    from_=\"+1234567890\",\n    to=\"+1987654321\"\n)\nprint(f\"Message sent: {message.sid}\")\n</code></pre>"},{"location":"ALERT_SYSTEMS/#rate-limiting","title":"Rate Limiting","text":"<p>Monitor your SMS usage to avoid rate limits:</p> <pre><code>alerts:\n  sms:\n    rate_limiting:\n      max_per_minute: 1\n      max_per_hour: 10\n      max_per_day: 50\n\n    fallback_to_email: true  # Use email if SMS limit reached\n</code></pre>"},{"location":"ALERT_SYSTEMS/#webhook-debugging","title":"Webhook Debugging","text":""},{"location":"ALERT_SYSTEMS/#test-webhook-endpoints","title":"Test Webhook Endpoints","text":"<pre><code># Test webhook connectivity\ncurl -X POST https://your-webhook-url.com/alerts \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer your-token\" \\\n  -d '{\"test\": \"message\"}'\n</code></pre>"},{"location":"ALERT_SYSTEMS/#webhook-timeout-issues","title":"Webhook Timeout Issues","text":"<pre><code>alerts:\n  webhook:\n    timeout: 30\n    retry_count: 3\n    retry_delay: 5\n\n    # Async delivery for better performance\n    async_delivery: true\n</code></pre>"},{"location":"ALERT_SYSTEMS/#alert-analytics","title":"\ud83d\udcc8 Alert Analytics","text":""},{"location":"ALERT_SYSTEMS/#monitor-alert-performance","title":"Monitor Alert Performance","text":"<p>Track alert delivery metrics:</p> <pre><code>analytics:\n  enabled: true\n  metrics:\n    - alert_delivery_success_rate\n    - alert_delivery_time\n    - alert_frequency_by_type\n    - channel_performance\n\n  reporting:\n    daily_summary: true\n    weekly_report: true\n    email_reports_to: [\"admin@yourdomain.com\"]\n</code></pre>"},{"location":"ALERT_SYSTEMS/#alert-dashboard","title":"Alert Dashboard","text":"<p>View alert statistics in the web interface:</p> <pre><code># Start web interface\npython -m src.web_interface --port 8080\n\n# Access dashboard at http://localhost:8080/alerts\n</code></pre>"},{"location":"ALERT_SYSTEMS/#security-considerations","title":"\ud83d\udd10 Security Considerations","text":""},{"location":"ALERT_SYSTEMS/#secure-credential-storage","title":"Secure Credential Storage","text":"<p>Store sensitive credentials securely:</p> <pre><code>alerts:\n  email:\n    password: \"${EMAIL_PASSWORD}\"  # Use environment variable\n\n  sms:\n    config:\n      auth_token: \"${TWILIO_AUTH_TOKEN}\"  # Use environment variable\n</code></pre> <p>Set environment variables:</p> <pre><code>export EMAIL_PASSWORD=\"your-secure-password\"\nexport TWILIO_AUTH_TOKEN=\"your-twilio-token\"\n</code></pre>"},{"location":"ALERT_SYSTEMS/#encrypted-configuration","title":"Encrypted Configuration","text":"<p>Encrypt sensitive alert configuration:</p> <pre><code># Encrypt alert configuration\npython encrypt_config.py config/alert_config.yaml\n\n# Use encrypted configuration\npython -m src.monitor_service --encrypted-config config/alert_config.yaml.enc\n</code></pre>"},{"location":"ALERT_SYSTEMS/#integration-examples","title":"\ud83d\udd17 Integration Examples","text":""},{"location":"ALERT_SYSTEMS/#siem-integration","title":"SIEM Integration","text":"<p>Send alerts to SIEM systems:</p> <pre><code>alerts:\n  webhook:\n    endpoints:\n      - name: \"splunk\"\n        url: \"https://splunk.company.com:8088/services/collector\"\n        headers:\n          Authorization: \"Splunk your-hec-token\"\n        payload_template: |\n          {\n            \"time\": \"{timestamp}\",\n            \"source\": \"nginx-security-monitor\",\n            \"sourcetype\": \"security_alert\",\n            \"event\": {\n              \"threat_type\": \"{threat_type}\",\n              \"severity\": \"{severity}\",\n              \"source_ip\": \"{source_ip}\",\n              \"description\": \"{description}\"\n            }\n          }\n</code></pre>"},{"location":"ALERT_SYSTEMS/#ticket-system-integration","title":"Ticket System Integration","text":"<p>Create tickets for security incidents:</p> <pre><code>alerts:\n  webhook:\n    endpoints:\n      - name: \"jira\"\n        url: \"https://company.atlassian.net/rest/api/2/issue\"\n        headers:\n          Authorization: \"Basic base64-encoded-credentials\"\n          Content-Type: \"application/json\"\n        payload_template: |\n          {\n            \"fields\": {\n              \"project\": {\"key\": \"SEC\"},\n              \"summary\": \"Security Alert: {threat_type} from {source_ip}\",\n              \"description\": \"{description}\",\n              \"issuetype\": {\"name\": \"Bug\"},\n              \"priority\": {\"name\": \"High\"}\n            }\n          }\n</code></pre>"},{"location":"ALERT_SYSTEMS/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Configuration Guide - Alert configuration options</li> <li>API Reference - AlertManager API documentation</li> <li>Plugin Development - Creating custom alert channels</li> <li>Integration Cookbook - Integration examples</li> </ul> <p>This alert systems guide is part of the NGINX Security Monitor documentation. For updates and contributions, see CONTRIBUTING.md.</p>"},{"location":"API_REFERENCE/","title":"\ud83d\udcd6 API Reference - NGINX Security Monitor","text":""},{"location":"API_REFERENCE/#overview","title":"\ud83c\udfaf Overview","text":"<p>This document provides comprehensive API documentation for all modules and classes in the NGINX Security Monitor system. Each component is documented with its purpose, methods, parameters, and usage examples.</p>"},{"location":"API_REFERENCE/#module-index","title":"\ud83d\udcc1 Module Index","text":"Module Purpose Key Classes <code>monitor_service</code> Main service coordination <code>MonitorService</code> <code>log_parser</code> Log file parsing and processing <code>LogParser</code> <code>pattern_detector</code> Threat pattern detection <code>PatternDetector</code> <code>alert_manager</code> Alert system management <code>AlertManager</code> <code>mitigation</code> Threat mitigation strategies <code>MitigationEngine</code> <code>security_coordinator</code> Security orchestration <code>SecurityCoordinator</code> <code>plugin_system</code> Plugin architecture <code>PluginManager</code> <code>crypto_utils</code> Encryption utilities <code>CryptoUtils</code> <code>network_security</code> Network-level security <code>NetworkSecurity</code> <code>service_protection</code> Service self-protection <code>ServiceProtection</code>"},{"location":"API_REFERENCE/#core-modules","title":"\ud83d\udd27 Core Modules","text":""},{"location":"API_REFERENCE/#monitorservice-monitor_servicepy","title":"MonitorService (<code>monitor_service.py</code>)","text":"<p>The main service class that coordinates all security monitoring activities.</p>"},{"location":"API_REFERENCE/#class-monitorservice","title":"Class: MonitorService","text":"<pre><code>class MonitorService:\n    \"\"\"Main monitoring service coordinator.\"\"\"\n\n    def __init__(self, config_path: str = None):\n        \"\"\"Initialize the monitoring service.\n\n        Args:\n            config_path (str): Path to configuration file\n        \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#methods","title":"Methods:","text":""},{"location":"API_REFERENCE/#start","title":"<code>start()</code>","text":"<p>Starts the monitoring service with all configured components.</p> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the monitoring service.\"\"\"\n</code></pre> <p>Example: <pre><code>from src.monitor_service import MonitorService\n\nmonitor = MonitorService('/path/to/config.yaml')\nmonitor.start()\n</code></pre></p>"},{"location":"API_REFERENCE/#stop","title":"<code>stop()</code>","text":"<p>Gracefully stops the monitoring service.</p> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop the monitoring service gracefully.\"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#reload_config","title":"<code>reload_config()</code>","text":"<p>Reloads configuration without stopping the service.</p> <pre><code>def reload_config(self) -&gt; bool:\n    \"\"\"Reload configuration.\n\n    Returns:\n        bool: True if reload successful, False otherwise\n    \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#logparser-log_parserpy","title":"LogParser (<code>log_parser.py</code>)","text":"<p>Handles parsing and processing of various log file formats.</p>"},{"location":"API_REFERENCE/#class-logparser","title":"Class: LogParser","text":"<pre><code>class LogParser:\n    \"\"\"Log file parser with support for multiple formats.\"\"\"\n\n    def __init__(self, log_format: str = 'nginx'):\n        \"\"\"Initialize log parser.\n\n        Args:\n            log_format (str): Log format type ('nginx', 'apache', 'custom')\n        \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#methods_1","title":"Methods:","text":""},{"location":"API_REFERENCE/#parse_lineline-str","title":"<code>parse_line(line: str)</code>","text":"<p>Parses a single log line into structured data.</p> <pre><code>def parse_line(self, line: str) -&gt; Dict[str, Any]:\n    \"\"\"Parse a single log line.\n\n    Args:\n        line (str): Raw log line\n\n    Returns:\n        Dict[str, Any]: Parsed log entry with fields:\n            - timestamp: datetime object\n            - ip: client IP address\n            - method: HTTP method\n            - url: requested URL\n            - status: HTTP status code\n            - user_agent: user agent string\n            - additional fields based on log format\n    \"\"\"\n</code></pre> <p>Example: <pre><code>from src.log_parser import LogParser\n\nparser = LogParser('nginx')\nlog_entry = parser.parse_line('192.168.1.1 - - [01/Jan/2024:12:00:00 +0000] \"GET / HTTP/1.1\" 200 1234')\nprint(log_entry['ip'])  # '192.168.1.1'\nprint(log_entry['status'])  # 200\n</code></pre></p>"},{"location":"API_REFERENCE/#parse_filefile_path-str","title":"<code>parse_file(file_path: str)</code>","text":"<p>Parses an entire log file.</p> <pre><code>def parse_file(self, file_path: str) -&gt; Generator[Dict[str, Any], None, None]:\n    \"\"\"Parse entire log file.\n\n    Args:\n        file_path (str): Path to log file\n\n    Yields:\n        Dict[str, Any]: Parsed log entries\n    \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#patterndetector-pattern_detectorpy","title":"PatternDetector (<code>pattern_detector.py</code>)","text":"<p>Detects security threats using configurable patterns.</p>"},{"location":"API_REFERENCE/#class-patterndetector","title":"Class: PatternDetector","text":"<pre><code>class PatternDetector:\n    \"\"\"Threat pattern detection engine.\"\"\"\n\n    def __init__(self, patterns_config: str = None):\n        \"\"\"Initialize pattern detector.\n\n        Args:\n            patterns_config (str): Path to patterns configuration file\n        \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#methods_2","title":"Methods:","text":""},{"location":"API_REFERENCE/#detect_threatslog_entry-dict","title":"<code>detect_threats(log_entry: Dict)</code>","text":"<p>Analyzes a log entry for security threats.</p> <pre><code>def detect_threats(self, log_entry: Dict[str, Any]) -&gt; List[Dict[str, Any]]:\n    \"\"\"Detect threats in log entry.\n\n    Args:\n        log_entry (Dict[str, Any]): Parsed log entry\n\n    Returns:\n        List[Dict[str, Any]]: List of detected threats with:\n            - threat_type: type of threat detected\n            - severity: threat severity level\n            - description: human-readable description\n            - confidence: detection confidence (0-1)\n            - matched_pattern: pattern that triggered detection\n    \"\"\"\n</code></pre> <p>Example: <pre><code>from src.pattern_detector import PatternDetector\n\ndetector = PatternDetector('/path/to/patterns.json')\nthreats = detector.detect_threats({\n    'ip': '192.168.1.100',\n    'url': '/admin/login',\n    'method': 'POST',\n    'status': 401\n})\n\nfor threat in threats:\n    print(f\"Threat: {threat['threat_type']} (Severity: {threat['severity']})\")\n</code></pre></p>"},{"location":"API_REFERENCE/#add_patternpattern-dict","title":"<code>add_pattern(pattern: Dict)</code>","text":"<p>Adds a new detection pattern.</p> <pre><code>def add_pattern(self, pattern: Dict[str, Any]) -&gt; bool:\n    \"\"\"Add new detection pattern.\n\n    Args:\n        pattern (Dict[str, Any]): Pattern definition with:\n            - name: pattern name\n            - description: pattern description\n            - conditions: detection conditions\n            - severity: threat severity\n            - enabled: whether pattern is active\n\n    Returns:\n        bool: True if pattern added successfully\n    \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#alert-system","title":"\ud83d\udea8 Alert System","text":""},{"location":"API_REFERENCE/#alertmanager-alert_managerpy","title":"AlertManager (<code>alert_manager.py</code>)","text":"<p>Manages alert generation and delivery across multiple channels.</p>"},{"location":"API_REFERENCE/#class-alertmanager","title":"Class: AlertManager","text":"<pre><code>class AlertManager:\n    \"\"\"Alert management and delivery system.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        \"\"\"Initialize alert manager.\n\n        Args:\n            config (Dict[str, Any]): Alert configuration\n        \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#methods_3","title":"Methods:","text":""},{"location":"API_REFERENCE/#send_alertalert-dict","title":"<code>send_alert(alert: Dict)</code>","text":"<p>Sends an alert through configured channels.</p> <pre><code>def send_alert(self, alert: Dict[str, Any]) -&gt; bool:\n    \"\"\"Send alert through configured channels.\n\n    Args:\n        alert (Dict[str, Any]): Alert data with:\n            - title: alert title\n            - message: alert message\n            - severity: alert severity level\n            - timestamp: alert timestamp\n            - source_ip: source IP if applicable\n            - threat_type: type of threat\n            - metadata: additional alert metadata\n\n    Returns:\n        bool: True if alert sent successfully\n    \"\"\"\n</code></pre> <p>Example: <pre><code>from src.alert_manager import AlertManager\n\nalert_mgr = AlertManager({\n    'email': {'enabled': True, 'smtp_server': 'localhost'},\n    'sms': {'enabled': False}\n})\n\nalert_mgr.send_alert({\n    'title': 'Brute Force Attack Detected',\n    'message': 'Multiple failed login attempts from 192.168.1.100',\n    'severity': 'high',\n    'source_ip': '192.168.1.100',\n    'threat_type': 'brute_force'\n})\n</code></pre></p>"},{"location":"API_REFERENCE/#register_channelchannel-alertchannel","title":"<code>register_channel(channel: AlertChannel)</code>","text":"<p>Registers a new alert channel.</p> <pre><code>def register_channel(self, channel: 'AlertChannel') -&gt; None:\n    \"\"\"Register new alert channel.\n\n    Args:\n        channel (AlertChannel): Alert channel implementation\n    \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#security-components","title":"\ud83d\udee1\ufe0f Security Components","text":""},{"location":"API_REFERENCE/#mitigationengine-mitigationpy","title":"MitigationEngine (<code>mitigation.py</code>)","text":"<p>Implements automated threat mitigation strategies.</p>"},{"location":"API_REFERENCE/#class-mitigationengine","title":"Class: MitigationEngine","text":"<pre><code>class MitigationEngine:\n    \"\"\"Automated threat mitigation system.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        \"\"\"Initialize mitigation engine.\n\n        Args:\n            config (Dict[str, Any]): Mitigation configuration\n        \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#methods_4","title":"Methods:","text":""},{"location":"API_REFERENCE/#mitigate_threatthreat-dict","title":"<code>mitigate_threat(threat: Dict)</code>","text":"<p>Executes mitigation strategy for detected threat.</p> <pre><code>def mitigate_threat(self, threat: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Execute mitigation for threat.\n\n    Args:\n        threat (Dict[str, Any]): Threat information\n\n    Returns:\n        Dict[str, Any]: Mitigation result with:\n            - action_taken: description of mitigation action\n            - success: whether mitigation was successful\n            - details: additional mitigation details\n    \"\"\"\n</code></pre> <p>Example: <pre><code>from src.mitigation import MitigationEngine\n\nmitigation = MitigationEngine({\n    'auto_block': True,\n    'block_duration': 3600,\n    'fail2ban_integration': True\n})\n\nresult = mitigation.mitigate_threat({\n    'threat_type': 'brute_force',\n    'source_ip': '192.168.1.100',\n    'severity': 'high'\n})\n\nprint(f\"Action taken: {result['action_taken']}\")\n</code></pre></p>"},{"location":"API_REFERENCE/#plugin-system","title":"\ud83d\udd0c Plugin System","text":""},{"location":"API_REFERENCE/#pluginmanager-plugin_systempy","title":"PluginManager (<code>plugin_system.py</code>)","text":"<p>Manages dynamic loading and execution of security plugins.</p>"},{"location":"API_REFERENCE/#class-pluginmanager","title":"Class: PluginManager","text":"<pre><code>class PluginManager:\n    \"\"\"Plugin management system.\"\"\"\n\n    def __init__(self, plugin_dir: str = None):\n        \"\"\"Initialize plugin manager.\n\n        Args:\n            plugin_dir (str): Directory containing plugins\n        \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#methods_5","title":"Methods:","text":""},{"location":"API_REFERENCE/#load_pluginplugin_name-str","title":"<code>load_plugin(plugin_name: str)</code>","text":"<p>Loads a security plugin.</p> <pre><code>def load_plugin(self, plugin_name: str) -&gt; bool:\n    \"\"\"Load security plugin.\n\n    Args:\n        plugin_name (str): Name of plugin to load\n\n    Returns:\n        bool: True if plugin loaded successfully\n    \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#execute_detection_pluginslog_entry-dict","title":"<code>execute_detection_plugins(log_entry: Dict)</code>","text":"<p>Executes all loaded detection plugins on a log entry.</p> <pre><code>def execute_detection_plugins(self, log_entry: Dict[str, Any]) -&gt; List[Dict[str, Any]]:\n    \"\"\"Execute detection plugins.\n\n    Args:\n        log_entry (Dict[str, Any]): Log entry to analyze\n\n    Returns:\n        List[Dict[str, Any]]: List of plugin detection results\n    \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#utility-modules","title":"\ud83d\udd10 Utility Modules","text":""},{"location":"API_REFERENCE/#cryptoutils-crypto_utilspy","title":"CryptoUtils (<code>crypto_utils.py</code>)","text":"<p>Provides encryption and decryption utilities for sensitive configuration data.</p>"},{"location":"API_REFERENCE/#class-cryptoutils","title":"Class: CryptoUtils","text":"<pre><code>class CryptoUtils:\n    \"\"\"Cryptographic utilities for secure configuration.\"\"\"\n\n    @staticmethod\n    def encrypt_data(data: str, key: bytes) -&gt; bytes:\n        \"\"\"Encrypt sensitive data.\n\n        Args:\n            data (str): Data to encrypt\n            key (bytes): Encryption key\n\n        Returns:\n            bytes: Encrypted data\n        \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#methods_6","title":"Methods:","text":""},{"location":"API_REFERENCE/#generate_key","title":"<code>generate_key()</code>","text":"<p>Generates a new encryption key.</p> <pre><code>@staticmethod\ndef generate_key() -&gt; bytes:\n    \"\"\"Generate new encryption key.\n\n    Returns:\n        bytes: Generated encryption key\n    \"\"\"\n</code></pre> <p>Example: <pre><code>from src.crypto_utils import CryptoUtils\n\n# Generate encryption key\nkey = CryptoUtils.generate_key()\n\n# Encrypt sensitive data\nsensitive_data = \"api_key_12345\"\nencrypted = CryptoUtils.encrypt_data(sensitive_data, key)\n\n# Decrypt data\ndecrypted = CryptoUtils.decrypt_data(encrypted, key)\n</code></pre></p>"},{"location":"API_REFERENCE/#network-security","title":"\ud83c\udf10 Network Security","text":""},{"location":"API_REFERENCE/#networksecurity-network_securitypy","title":"NetworkSecurity (<code>network_security.py</code>)","text":"<p>Handles network-level security monitoring and controls.</p>"},{"location":"API_REFERENCE/#class-networksecurity","title":"Class: NetworkSecurity","text":"<pre><code>class NetworkSecurity:\n    \"\"\"Network security monitoring and control.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        \"\"\"Initialize network security.\n\n        Args:\n            config (Dict[str, Any]): Network security configuration\n        \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#methods_7","title":"Methods:","text":""},{"location":"API_REFERENCE/#block_ipip_address-str-duration-int","title":"<code>block_ip(ip_address: str, duration: int)</code>","text":"<p>Blocks an IP address for specified duration.</p> <pre><code>def block_ip(self, ip_address: str, duration: int = 3600) -&gt; bool:\n    \"\"\"Block IP address.\n\n    Args:\n        ip_address (str): IP address to block\n        duration (int): Block duration in seconds\n\n    Returns:\n        bool: True if IP blocked successfully\n    \"\"\"\n</code></pre>"},{"location":"API_REFERENCE/#data-types-and-structures","title":"\ud83d\udcca Data Types and Structures","text":""},{"location":"API_REFERENCE/#common-data-structures","title":"Common Data Structures","text":""},{"location":"API_REFERENCE/#logentry","title":"LogEntry","text":"<pre><code>LogEntry = Dict[str, Any]\n# Fields:\n# - timestamp: datetime\n# - ip: str\n# - method: str\n# - url: str\n# - status: int\n# - user_agent: str\n# - referrer: str (optional)\n# - response_size: int (optional)\n</code></pre>"},{"location":"API_REFERENCE/#threatdetection","title":"ThreatDetection","text":"<pre><code>ThreatDetection = Dict[str, Any]\n# Fields:\n# - threat_type: str\n# - severity: str ('low', 'medium', 'high', 'critical')\n# - confidence: float (0.0-1.0)\n# - description: str\n# - matched_pattern: str\n# - metadata: Dict[str, Any]\n</code></pre>"},{"location":"API_REFERENCE/#alertdata","title":"AlertData","text":"<pre><code>AlertData = Dict[str, Any]\n# Fields:\n# - title: str\n# - message: str\n# - severity: str\n# - timestamp: datetime\n# - source_ip: str (optional)\n# - threat_type: str (optional)\n# - metadata: Dict[str, Any]\n</code></pre>"},{"location":"API_REFERENCE/#configuration-interfaces","title":"\ud83d\udd27 Configuration Interfaces","text":""},{"location":"API_REFERENCE/#configuration-classes","title":"Configuration Classes","text":""},{"location":"API_REFERENCE/#monitorconfig","title":"MonitorConfig","text":"<pre><code>@dataclass\nclass MonitorConfig:\n    \"\"\"Main monitoring configuration.\"\"\"\n    log_files: List[str]\n    patterns_file: str\n    alert_config: AlertConfig\n    mitigation_config: MitigationConfig\n    enable_encryption: bool = False\n    plugin_directory: str = None\n</code></pre>"},{"location":"API_REFERENCE/#alertconfig","title":"AlertConfig","text":"<pre><code>@dataclass\nclass AlertConfig:\n    \"\"\"Alert system configuration.\"\"\"\n    email_enabled: bool = False\n    email_config: EmailConfig = None\n    sms_enabled: bool = False\n    sms_config: SmsConfig = None\n    webhook_enabled: bool = False\n    webhook_config: WebhookConfig = None\n</code></pre>"},{"location":"API_REFERENCE/#usage-examples","title":"\ud83d\ude80 Usage Examples","text":""},{"location":"API_REFERENCE/#basic-monitoring-setup","title":"Basic Monitoring Setup","text":"<pre><code>from src.monitor_service import MonitorService\nfrom src.log_parser import LogParser\nfrom src.pattern_detector import PatternDetector\nfrom src.alert_manager import AlertManager\n\n# Initialize components\nmonitor = MonitorService('/etc/nginx-security/config.yaml')\n\n# Start monitoring\nmonitor.start()\n\n# The service will now:\n# 1. Parse incoming log entries\n# 2. Detect threats using configured patterns\n# 3. Send alerts for detected threats\n# 4. Execute mitigation strategies\n</code></pre>"},{"location":"API_REFERENCE/#custom-plugin-development","title":"Custom Plugin Development","text":"<pre><code>from src.plugin_system import PluginManager, DetectionPlugin\n\nclass CustomThreatDetector(DetectionPlugin):\n    \"\"\"Custom threat detection plugin.\"\"\"\n\n    def detect(self, log_entry: Dict[str, Any]) -&gt; List[Dict[str, Any]]:\n        \"\"\"Custom detection logic.\"\"\"\n        threats = []\n\n        # Your custom detection logic here\n        if self._is_suspicious(log_entry):\n            threats.append({\n                'threat_type': 'custom_threat',\n                'severity': 'medium',\n                'confidence': 0.8,\n                'description': 'Custom threat detected'\n            })\n\n        return threats\n\n# Load and use custom plugin\nplugin_mgr = PluginManager()\nplugin_mgr.register_plugin(CustomThreatDetector())\n</code></pre>"},{"location":"API_REFERENCE/#error-handling","title":"\ud83d\udcdd Error Handling","text":""},{"location":"API_REFERENCE/#common-exceptions","title":"Common Exceptions","text":""},{"location":"API_REFERENCE/#configurationerror","title":"ConfigurationError","text":"<p>Raised when configuration is invalid or missing.</p> <pre><code>class ConfigurationError(Exception):\n    \"\"\"Configuration-related error.\"\"\"\n    pass\n</code></pre>"},{"location":"API_REFERENCE/#patternerror","title":"PatternError","text":"<p>Raised when pattern detection encounters an error.</p> <pre><code>class PatternError(Exception):\n    \"\"\"Pattern detection error.\"\"\"\n    pass\n</code></pre>"},{"location":"API_REFERENCE/#alerterror","title":"AlertError","text":"<p>Raised when alert delivery fails.</p> <pre><code>class AlertError(Exception):\n    \"\"\"Alert delivery error.\"\"\"\n    pass\n</code></pre>"},{"location":"API_REFERENCE/#error-handling-example","title":"Error Handling Example","text":"<pre><code>from src.monitor_service import MonitorService, ConfigurationError\n\ntry:\n    monitor = MonitorService('/path/to/config.yaml')\n    monitor.start()\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"API_REFERENCE/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>Plugin Development - Creating custom plugins</li> <li>Pattern Detection - Understanding and customizing patterns</li> <li>Alert Systems - Setting up alert channels</li> <li>Integration Cookbook - Integration examples</li> </ul>"},{"location":"API_REFERENCE/#version-compatibility","title":"\ud83d\udcca Version Compatibility","text":"Component Minimum Version Recommended Version Python 3.8 3.11+ PyYAML 5.4.0 6.0+ cryptography 3.4.0 41.0+ requests 2.25.0 2.31+ <p>This API reference is maintained as part of the NGINX Security Monitor project. For updates and contributions, see CONTRIBUTING.md.</p>"},{"location":"ARCHITECTURE/","title":"\ud83c\udfd7\ufe0f Architecture Guide - NGINX Security Monitor","text":""},{"location":"ARCHITECTURE/#overview","title":"\ud83c\udfaf Overview","text":"<p>The NGINX Security Monitor is a comprehensive, modular security monitoring system designed with enterprise-grade architecture principles. This document provides detailed insight into the system's architecture, design decisions, data flow, and extension points.</p>"},{"location":"ARCHITECTURE/#high-level-architecture","title":"\ud83d\udcca High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     NGINX Security Monitor                     \u2502\n\u2502                        Main Service                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502         Security Coordinator                  \u2502\n    \u2502    (Central Orchestration &amp; Control)          \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502            Core Processing Layer              \u2502\n    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n    \u2502  \u2502   Log   \u2502 \u2502 Threat  \u2502 \u2502     Alert       \u2502  \u2502\n    \u2502  \u2502Processor\u2502 \u2502Processor\u2502 \u2502    Manager      \u2502  \u2502\n    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502           Security Services Layer             \u2502\n    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n    \u2502  \u2502Pattern  \u2502 \u2502Security \u2502 \u2502   Service       \u2502  \u2502\n    \u2502  \u2502Detector \u2502 \u2502Integr.  \u2502 \u2502  Protection     \u2502  \u2502\n    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502        Infrastructure &amp; Security Layer        \u2502\n    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n    \u2502  \u2502 Plugin  \u2502 \u2502 Crypto  \u2502 \u2502    Network      \u2502  \u2502\n    \u2502  \u2502 System  \u2502 \u2502 Utils   \u2502 \u2502   Security      \u2502  \u2502\n    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#component-architecture","title":"\ud83c\udfe2 Component Architecture","text":""},{"location":"ARCHITECTURE/#1-core-service-layer","title":"1. Core Service Layer","text":""},{"location":"ARCHITECTURE/#monitorservice-monitor_servicepy","title":"MonitorService (<code>monitor_service.py</code>)","text":"<ul> <li>Purpose: Main service entry point and lifecycle management</li> <li>Responsibilities:</li> <li>Service initialization and configuration loading</li> <li>Component orchestration and dependency injection</li> <li>Signal handling for graceful shutdown</li> <li>Backward compatibility for legacy integrations</li> </ul>"},{"location":"ARCHITECTURE/#securitycoordinator-security_coordinatorpy","title":"SecurityCoordinator (<code>security_coordinator.py</code>)","text":"<ul> <li>Purpose: Central orchestration hub for all security operations</li> <li>Responsibilities:</li> <li>Monitoring lifecycle management</li> <li>Coordination between core processors</li> <li>Statistics collection and reporting</li> <li>Error handling and recovery</li> </ul>"},{"location":"ARCHITECTURE/#2-core-processing-layer","title":"2. Core Processing Layer","text":""},{"location":"ARCHITECTURE/#logprocessor-log_processorpy","title":"LogProcessor (<code>log_processor.py</code>)","text":"<ul> <li>Purpose: Log file reading and incremental processing</li> <li>Key Features:</li> <li>Incremental log reading (tracks file position)</li> <li>Log rotation detection and handling</li> <li>Structured log parsing</li> <li>Memory-efficient streaming processing</li> </ul>"},{"location":"ARCHITECTURE/#threatprocessor-threat_processorpy","title":"ThreatProcessor (<code>threat_processor.py</code>)","text":"<ul> <li>Purpose: Threat detection coordination and enrichment</li> <li>Key Features:</li> <li>Pattern detection orchestration</li> <li>Threat enrichment with geolocation and metadata</li> <li>Severity assessment algorithms</li> <li>Mitigation strategy application</li> </ul>"},{"location":"ARCHITECTURE/#alertmanager-alert_managerpy","title":"AlertManager (<code>alert_manager.py</code>)","text":"<ul> <li>Purpose: Centralized alert generation and delivery</li> <li>Key Features:</li> <li>Multi-channel alerting (email, SMS, webhooks)</li> <li>Alert templating and formatting</li> <li>Emergency alert prioritization</li> <li>Alert throttling and deduplication</li> </ul>"},{"location":"ARCHITECTURE/#3-security-services-layer","title":"3. Security Services Layer","text":""},{"location":"ARCHITECTURE/#patterndetector-pattern_detectorpy","title":"PatternDetector (<code>pattern_detector.py</code>)","text":"<ul> <li>Purpose: Threat pattern recognition and analysis</li> <li>Detection Capabilities:</li> <li>SQL injection detection</li> <li>Cross-site scripting (XSS) identification</li> <li>Brute force attack recognition</li> <li>DDoS pattern analysis</li> <li>Directory traversal detection</li> <li>Suspicious user agent identification</li> </ul>"},{"location":"ARCHITECTURE/#securityintegrationmanager-security_integrationspy","title":"SecurityIntegrationManager (<code>security_integrations.py</code>)","text":"<ul> <li>Purpose: External security tool integration hub</li> <li>Supported Integrations:</li> <li>fail2ban: IP blocking and jail management</li> <li>OSSEC/Wazuh: HIDS and SIEM integration</li> <li>Suricata: Network IDS/IPS integration</li> <li>ModSecurity: WAF integration</li> <li>Custom SIEM: Webhook and API integrations</li> </ul>"},{"location":"ARCHITECTURE/#serviceprotection-service_protectionpy","title":"ServiceProtection (<code>service_protection.py</code>)","text":"<ul> <li>Purpose: Self-protection mechanisms for the monitoring service</li> <li>Protection Features:</li> <li>File integrity monitoring</li> <li>Process integrity verification</li> <li>Resource abuse detection</li> <li>Network security controls</li> <li>System hardening enforcement</li> </ul>"},{"location":"ARCHITECTURE/#4-infrastructure-security-layer","title":"4. Infrastructure &amp; Security Layer","text":""},{"location":"ARCHITECTURE/#pluginsystem-plugin_systempy","title":"PluginSystem (<code>plugin_system.py</code>)","text":"<ul> <li>Purpose: Dynamic plugin loading and management</li> <li>Plugin Types:</li> <li>Detection plugins for custom threat patterns</li> <li>Mitigation plugins for custom response strategies</li> <li>Alert plugins for custom notification channels</li> <li>Parser plugins for custom log formats</li> </ul>"},{"location":"ARCHITECTURE/#cryptoutils-crypto_utilspy","title":"CryptoUtils (<code>crypto_utils.py</code>)","text":"<ul> <li>Purpose: Encryption and security utilities</li> <li>Features:</li> <li>AES-256 encryption with PBKDF2 key derivation</li> <li>Secure configuration management</li> <li>Pattern obfuscation</li> <li>Key rotation support</li> </ul>"},{"location":"ARCHITECTURE/#networksecurity-network_securitypy","title":"NetworkSecurity (<code>network_security.py</code>)","text":"<ul> <li>Purpose: Network-level security controls</li> <li>Features:</li> <li>IP access control and blocking</li> <li>Firewall integration</li> <li>Port security monitoring</li> <li>DNS security validation</li> </ul>"},{"location":"ARCHITECTURE/#data-flow-architecture","title":"\ud83d\udd04 Data Flow Architecture","text":""},{"location":"ARCHITECTURE/#primary-monitoring-flow","title":"Primary Monitoring Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   NGINX     \u2502    \u2502     Log     \u2502    \u2502   Threat    \u2502\n\u2502   Logs      \u2502\u2500\u2500\u2500\u25b6\u2502  Processor  \u2502\u2500\u2500\u2500\u25b6\u2502  Processor  \u2502\n\u2502   Files     \u2502    \u2502             \u2502    \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502   Alert     \u2502    \u2502   Pattern   \u2502           \u2502\n\u2502  Manager    \u2502\u25c4\u2500\u2500\u2500\u2502  Detector   \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502             \u2502    \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  External   \u2502    \u2502   Email/    \u2502    \u2502 Mitigation  \u2502\n\u2502 Integrations\u2502    \u2502   SMS       \u2502    \u2502 Actions     \u2502\n\u2502             \u2502    \u2502   Alerts    \u2502    \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#security-integration-flow","title":"Security Integration Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  fail2ban   \u2502    \u2502    OSSEC    \u2502    \u2502  Suricata   \u2502\n\u2502    Logs     \u2502    \u2502    Logs     \u2502    \u2502    Logs     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                   \u2502                   \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502    Security         \u2502\n               \u2502  Integration        \u2502\n               \u2502    Manager          \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502   Unified Threat    \u2502\n               \u2502    Intelligence     \u2502\n               \u2502     &amp; Response      \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#security-architecture-principles","title":"\ud83d\udd12 Security Architecture Principles","text":""},{"location":"ARCHITECTURE/#1-defense-in-depth","title":"1. Defense in Depth","text":"<ul> <li>Multiple Detection Layers: Application, network, and host-level monitoring</li> <li>Redundant Controls: Multiple tools providing overlapping coverage</li> <li>Fail-Safe Defaults: Secure-by-default configuration options</li> </ul>"},{"location":"ARCHITECTURE/#2-zero-trust-model","title":"2. Zero-Trust Model","text":"<ul> <li>Encrypted Configuration: Sensitive data encrypted at rest</li> <li>Plugin Sandboxing: Isolated plugin execution environment</li> <li>Service Self-Protection: Continuous monitoring of service integrity</li> </ul>"},{"location":"ARCHITECTURE/#3-principle-of-least-privilege","title":"3. Principle of Least Privilege","text":"<ul> <li>Dedicated Service User: Runs with minimal required permissions</li> <li>Systemd Hardening: NoNewPrivileges, restricted filesystem access</li> <li>Network Restrictions: Limited network access requirements</li> </ul>"},{"location":"ARCHITECTURE/#4-secure-by-design","title":"4. Secure by Design","text":"<ul> <li>Input Validation: All inputs validated and sanitized</li> <li>Safe Defaults: Secure default configurations</li> <li>Error Handling: Fail securely without exposing sensitive information</li> </ul>"},{"location":"ARCHITECTURE/#scalability-design-patterns","title":"\ud83d\udcc8 Scalability Design Patterns","text":""},{"location":"ARCHITECTURE/#1-modular-architecture","title":"1. Modular Architecture","text":"<ul> <li>Component Isolation: Each module has clear responsibilities</li> <li>Loose Coupling: Components communicate through well-defined interfaces</li> <li>Plugin Extension: Easy addition of new capabilities without core changes</li> </ul>"},{"location":"ARCHITECTURE/#2-incremental-processing","title":"2. Incremental Processing","text":"<ul> <li>Streaming Log Processing: Avoids loading entire log files into memory</li> <li>State Management: Tracks processing position for efficient restart</li> <li>Batch Processing: Processes log entries in configurable batches</li> </ul>"},{"location":"ARCHITECTURE/#3-resource-management","title":"3. Resource Management","text":"<ul> <li>Configurable Intervals: Adjustable monitoring frequency</li> <li>Memory Efficiency: Minimal memory footprint design</li> <li>Resource Monitoring: Built-in resource usage tracking</li> </ul>"},{"location":"ARCHITECTURE/#4-horizontal-scaling-considerations","title":"4. Horizontal Scaling Considerations","text":"<ul> <li>Stateless Design: Core processing logic is stateless</li> <li>Shared Configuration: Configuration can be centralized</li> <li>Distributed Deployment: Architecture supports multiple instances</li> </ul>"},{"location":"ARCHITECTURE/#extension-points-and-customization","title":"\ud83d\udd27 Extension Points and Customization","text":""},{"location":"ARCHITECTURE/#1-plugin-architecture","title":"1. Plugin Architecture","text":"<pre><code># Example Detection Plugin Interface\nclass DetectionPlugin:\n    def detect(self, log_entry: dict) -&gt; list:\n        \"\"\"Return list of detected threats\"\"\"\n        pass\n\n    def get_patterns(self) -&gt; dict:\n        \"\"\"Return plugin-specific patterns\"\"\"\n        pass\n</code></pre>"},{"location":"ARCHITECTURE/#2-custom-pattern-integration","title":"2. Custom Pattern Integration","text":"<pre><code>{\n  \"custom_patterns\": {\n    \"my_app_attack\": {\n      \"description\": \"Application-specific attack pattern\",\n      \"regex\": \"custom_pattern_here\",\n      \"severity\": \"high\",\n      \"mitigation\": \"custom_mitigation_plugin\"\n    }\n  }\n}\n</code></pre>"},{"location":"ARCHITECTURE/#3-integration-extension-points","title":"3. Integration Extension Points","text":"<pre><code># Example Integration Plugin\nclass CustomSIEMIntegration:\n    def send_alert(self, threat_data: dict) -&gt; bool:\n        \"\"\"Send alert to custom SIEM\"\"\"\n        pass\n\n    def get_threat_intel(self) -&gt; list:\n        \"\"\"Retrieve threat intelligence\"\"\"\n        pass\n</code></pre>"},{"location":"ARCHITECTURE/#4-alert-channel-extensions","title":"4. Alert Channel Extensions","text":"<pre><code># Example Custom Alert Channel\nclass SlackAlertPlugin:\n    def send_alert(self, alert_data: dict) -&gt; bool:\n        \"\"\"Send alert to Slack channel\"\"\"\n        pass\n</code></pre>"},{"location":"ARCHITECTURE/#design-decisions-and-rationale","title":"\ud83c\udfd7\ufe0f Design Decisions and Rationale","text":""},{"location":"ARCHITECTURE/#1-modular-monolith-approach","title":"1. Modular Monolith Approach","text":"<ul> <li>Rationale: Balance between microservices complexity and monolithic simplicity</li> <li>Benefits: Easy deployment, efficient inter-component communication</li> <li>Trade-offs: Single point of failure, but simpler operational model</li> </ul>"},{"location":"ARCHITECTURE/#2-configuration-driven-architecture","title":"2. Configuration-Driven Architecture","text":"<ul> <li>Rationale: Maximum flexibility without code changes</li> <li>Benefits: Easy customization, environment-specific configurations</li> <li>Implementation: YAML-based configuration with validation</li> </ul>"},{"location":"ARCHITECTURE/#3-plugin-system-design","title":"3. Plugin System Design","text":"<ul> <li>Rationale: Extensibility without modifying core code</li> <li>Benefits: Custom detection/mitigation without exposure in open source</li> <li>Security: Sandboxed execution environment</li> </ul>"},{"location":"ARCHITECTURE/#4-multi-integration-strategy","title":"4. Multi-Integration Strategy","text":"<ul> <li>Rationale: Leverage existing security infrastructure</li> <li>Benefits: Enhanced coverage, reduced duplication</li> <li>Challenges: Coordination complexity, managed through central hub</li> </ul>"},{"location":"ARCHITECTURE/#performance-characteristics","title":"\ud83d\udd0d Performance Characteristics","text":""},{"location":"ARCHITECTURE/#resource-usage-patterns","title":"Resource Usage Patterns","text":"<ul> <li>CPU: Primarily pattern matching operations (regex-intensive)</li> <li>Memory: Minimal - streaming processing with small buffers</li> <li>Disk I/O: Read-heavy for log files, minimal writes for state</li> <li>Network: Periodic outbound for alerts and integrations</li> </ul>"},{"location":"ARCHITECTURE/#scalability-metrics","title":"Scalability Metrics","text":"<ul> <li>Log Processing: ~10,000 entries/minute on modest hardware</li> <li>Pattern Detection: Concurrent processing of multiple patterns</li> <li>Alert Delivery: Asynchronous processing prevents blocking</li> </ul>"},{"location":"ARCHITECTURE/#performance-optimization-features","title":"Performance Optimization Features","text":"<ul> <li>Configurable Check Intervals: Balance between responsiveness and resource usage</li> <li>Pattern Prioritization: Process high-priority patterns first</li> <li>Threshold-Based Processing: Reduce false positives</li> </ul>"},{"location":"ARCHITECTURE/#deployment-architecture-patterns","title":"\ud83d\ude80 Deployment Architecture Patterns","text":""},{"location":"ARCHITECTURE/#1-single-node-deployment","title":"1. Single Node Deployment","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Production Server         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502   NGINX Security Monitor   \u2502    \u2502\n\u2502  \u2502         Service             \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502         NGINX               \u2502    \u2502\n\u2502  \u2502       Web Server            \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#2-distributed-monitoring","title":"2. Distributed Monitoring","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Web       \u2502    \u2502   Web       \u2502    \u2502   Web       \u2502\n\u2502  Server 1   \u2502    \u2502  Server 2   \u2502    \u2502  Server N   \u2502\n\u2502             \u2502    \u2502             \u2502    \u2502             \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502Monitor  \u2502 \u2502    \u2502 \u2502Monitor  \u2502 \u2502    \u2502 \u2502Monitor  \u2502 \u2502\n\u2502 \u2502Instance \u2502 \u2502    \u2502 \u2502Instance \u2502 \u2502    \u2502 \u2502Instance \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                   \u2502                   \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502   Central Alert     \u2502\n               \u2502     Manager         \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#3-container-architecture","title":"3. Container Architecture","text":"<pre><code># Docker Compose Example\nversion: '3.8'\nservices:\n  nginx-security-monitor:\n    image: nginx-security-monitor:latest\n    volumes:\n      - /var/log/nginx:/var/log/nginx:ro\n      - ./config:/etc/nginx-security-monitor\n    environment:\n      - MONITOR_CONFIG=/etc/nginx-security-monitor/settings.yaml\n</code></pre>"},{"location":"ARCHITECTURE/#integration-architecture","title":"\ud83d\udd17 Integration Architecture","text":""},{"location":"ARCHITECTURE/#security-tool-ecosystem","title":"Security Tool Ecosystem","text":"<pre><code>                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502   NGINX     \u2502\n                \u2502  Security   \u2502\n                \u2502  Monitor    \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502                 \u2502                 \u2502\n    \u25bc                 \u25bc                 \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502fail2ban \u2502    \u2502 OSSEC/Wazuh \u2502    \u2502Suricata \u2502\n\u2502         \u2502    \u2502             \u2502    \u2502         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502                 \u2502                 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502  Unified      \u2502\n              \u2502  Security     \u2502\n              \u2502  Dashboard    \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#configuration-architecture","title":"\ud83d\udccb Configuration Architecture","text":""},{"location":"ARCHITECTURE/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<pre><code>/etc/nginx-security-monitor/\n\u251c\u2500\u2500 settings.yaml           # Main configuration\n\u251c\u2500\u2500 patterns.json          # Detection patterns\n\u251c\u2500\u2500 service-settings.yaml  # Service-specific settings\n\u2514\u2500\u2500 security/\n    \u251c\u2500\u2500 encrypted-patterns.enc\n    \u251c\u2500\u2500 custom-plugins/\n    \u2514\u2500\u2500 ssl-certificates/\n</code></pre>"},{"location":"ARCHITECTURE/#configuration-loading-priority","title":"Configuration Loading Priority","text":"<ol> <li>Environment variables</li> <li>Command-line arguments</li> <li>Service-specific settings</li> <li>Main settings file</li> <li>Default values</li> </ol>"},{"location":"ARCHITECTURE/#extension-and-customization-guide","title":"\ud83d\udd27 Extension and Customization Guide","text":""},{"location":"ARCHITECTURE/#adding-custom-detection-patterns","title":"Adding Custom Detection Patterns","text":"<pre><code>{\n  \"custom_patterns\": {\n    \"my_application_attack\": {\n      \"description\": \"Custom application attack\",\n      \"regex\": \"attack_pattern_regex\",\n      \"severity\": \"high\",\n      \"threshold\": 1,\n      \"mitigation\": \"custom_mitigation\"\n    }\n  }\n}\n</code></pre>"},{"location":"ARCHITECTURE/#creating-custom-mitigation-plugins","title":"Creating Custom Mitigation Plugins","text":"<pre><code># /opt/nginx-security-monitor/custom_plugins/my_mitigation.py\ndef mitigate_threat(threat_data):\n    \"\"\"Custom mitigation logic\"\"\"\n    # Implement custom response\n    return {\"action\": \"custom_block\", \"success\": True}\n</code></pre>"},{"location":"ARCHITECTURE/#adding-custom-alert-channels","title":"Adding Custom Alert Channels","text":"<pre><code># Custom alert plugin\nclass CustomAlertChannel:\n    def send_alert(self, alert_data):\n        # Custom alert delivery logic\n        pass\n</code></pre>"},{"location":"ARCHITECTURE/#future-architecture-considerations","title":"\ud83d\udd04 Future Architecture Considerations","text":""},{"location":"ARCHITECTURE/#planned-enhancements","title":"Planned Enhancements","text":"<ul> <li>Microservices Migration Path: Gradual decomposition strategy</li> <li>Container Orchestration: Kubernetes deployment patterns</li> <li>Event-Driven Architecture: Async event processing</li> <li>Machine Learning Integration: AI-powered threat detection</li> </ul>"},{"location":"ARCHITECTURE/#scalability-roadmap","title":"Scalability Roadmap","text":"<ul> <li>Horizontal Scaling: Multi-instance coordination</li> <li>Load Balancing: Distribution strategies</li> <li>High Availability: Failover and redundancy</li> <li>Performance Optimization: Caching and indexing</li> </ul>"},{"location":"ARCHITECTURE/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Installation Guide - Deployment and setup</li> <li>Configuration Guide - Configuration options</li> <li>Plugin Development - Creating custom plugins</li> <li>Security Features - Advanced security capabilities</li> <li>Operations Guide - Day-to-day operations</li> <li>API Reference - Detailed API documentation</li> </ul> <p>This architecture guide provides a comprehensive view of the NGINX Security Monitor system design. For technical implementation details, refer to the individual module documentation and API reference.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Project maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the project maintainers. All complaints will be reviewed and investigated promptly and fairly.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p>"},{"location":"CONFIGURATION/","title":"\u2699\ufe0f Configuration Guide","text":"<p>Complete configuration reference for NGINX Security Monitor.</p>"},{"location":"CONFIGURATION/#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>This configuration documentation is split into two parts: - This file (CONFIGURATION.md): Contains all available configuration options and their descriptions - Configuration System Guide: Details about the secure configuration system, programmatic usage, and advanced features</p> <p>Important: We recommend reading the Configuration System Guide first to understand the secure configuration system's features and best practices.</p>"},{"location":"CONFIGURATION/#configuration-file-structure","title":"\ud83d\udcc1 Configuration File Structure","text":"<pre><code>config/\n\u251c\u2500\u2500 settings.yaml          # Main configuration file\n\u251c\u2500\u2500 patterns.json          # Detection patterns\n\u251c\u2500\u2500 schema.yaml            # Configuration schema\n\u2514\u2500\u2500 service-settings.yaml  # Service-specific settings\n</code></pre>"},{"location":"CONFIGURATION/#main-configuration-settingsyaml","title":"\ud83d\udd27 Main Configuration (settings.yaml)","text":""},{"location":"CONFIGURATION/#basic-structure","title":"Basic Structure","text":"<pre><code># NGINX Security Monitor Configuration\n# This file controls all aspects of the monitoring service\n\n# ============================================================================\n# Core Settings\n# ============================================================================\nmonitoring:\n  enabled: true\n  check_interval: 10  # seconds between log checks\n  batch_size: 1000    # number of log entries to process at once\n\n# ============================================================================  \n# Log File Settings\n# ============================================================================\nlogs:\n  access_log: \"/var/log/nginx/access.log\"\n  error_log: \"/var/log/nginx/error.log\"\n  format: \"combined\"  # nginx log format\n  encoding: \"utf-8\"\n\n# ============================================================================\n# Pattern Detection Settings  \n# ============================================================================\ndetection:\n  enabled_patterns:\n    - sql_injection\n    - xss_attacks\n    - ddos_detection\n    - brute_force\n    - directory_traversal\n    - suspicious_user_agents\n\n  thresholds:\n    failed_requests_per_minute: 50\n    requests_per_ip_per_minute: 100\n    error_rate_threshold: 0.1\n    suspicious_user_agent_threshold: 5\n\n  whitelist:\n    ips:\n      - \"127.0.0.1\"\n      - \"::1\"\n      - \"192.168.1.0/24\"\n    user_agents:\n      - \"Googlebot\"\n      - \"Bingbot\"\n\n# ============================================================================\n# Alert Settings\n# ============================================================================\nalerts:\n  enabled: true\n  channels:\n    - email\n    - sms\n\n  email:\n    enabled: true\n    smtp_server: \"smtp.gmail.com\"\n    smtp_port: 587\n    use_tls: true\n    username: \"your_email@gmail.com\"\n    password: \"&lt;REPLACE_WITH_ENV_VARIABLE&gt;\"  # Use app passwords for Gmail\n    from_address: \"your_email@gmail.com\"\n    to_addresses:\n      - \"security@yourdomain.com\"\n      - \"admin@yourdomain.com\"\n\n    templates:\n      subject: \"[SECURITY ALERT] {severity} - {attack_type} detected\"\n      body_format: \"html\"  # html or text\n\n  sms:\n    enabled: false\n    provider: \"twilio\"  # twilio, aws_sns, custom\n    # Add provider-specific settings here\n\n# ============================================================================\n# Mitigation Settings\n# ============================================================================\nmitigation:\n  enabled: true\n  auto_mitigation: false  # Set to true for automatic responses\n\n  strategies:\n    ip_blocking:\n      enabled: true\n      duration: 3600  # seconds to block IP\n      max_attempts: 10\n\n    rate_limiting:\n      enabled: true\n      requests_per_minute: 60\n      burst_allowance: 10\n\n# ============================================================================\n# Logging Settings\n# ============================================================================\nlogging:\n  level: \"INFO\"  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n  file: \"/var/log/nginx-security-monitor.log\"\n  max_size: \"10MB\"\n  backup_count: 5\n  format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\n# ============================================================================\n# Storage Settings\n# ============================================================================\nstorage:\n  database:\n    type: \"sqlite\"  # sqlite, postgresql, mysql\n    path: \"/var/lib/nginx-security-monitor/monitor.db\"\n\n  cache:\n    type: \"memory\"  # memory, redis\n    max_size: 1000\n    ttl: 3600\n\n# ============================================================================\n# Security Settings\n# ============================================================================\nsecurity:\n  encryption:\n    enabled: false\n    key_file: \"&lt;REPLACE_WITH_ENV_VARIABLE&gt;\"\n\n  plugin_security:\n    enabled: true\n    allowed_plugins_dir: \"/etc/nginx-security-monitor/plugins\"\n    signature_verification: false\n</code></pre>"},{"location":"CONFIGURATION/#pattern-configuration-patternsjson","title":"\ud83c\udfaf Pattern Configuration (patterns.json)","text":""},{"location":"CONFIGURATION/#basic-pattern-structure","title":"Basic Pattern Structure","text":"<pre><code>{\n  \"patterns\": {\n    \"sql_injection\": {\n      \"enabled\": true,\n      \"severity\": \"high\",\n      \"description\": \"Detects SQL injection attempts\",\n      \"patterns\": [\n        \"(?i)(union.*select|select.*from|insert.*into|delete.*from)\",\n        \"(?i)(or\\\\s+1=1|and\\\\s+1=1|'\\\\s*or\\\\s*')\",\n        \"(?i)(exec\\\\s*\\\\(|sp_|xp_)\"\n      ],\n      \"threshold\": 1,\n      \"window\": 60\n    },\n\n    \"xss_attacks\": {\n      \"enabled\": true,\n      \"severity\": \"medium\",\n      \"description\": \"Cross-site scripting detection\",\n      \"patterns\": [\n        \"(?i)&lt;script[^&gt;]*&gt;.*?&lt;/script&gt;\",\n        \"(?i)javascript:\",\n        \"(?i)on(load|click|mouseover|error)\\\\s*=\"\n      ],\n      \"threshold\": 1,\n      \"window\": 60\n    },\n\n    \"ddos_detection\": {\n      \"enabled\": true,\n      \"severity\": \"high\",\n      \"description\": \"DDoS and high-volume attacks\",\n      \"type\": \"frequency\",\n      \"threshold\": 100,\n      \"window\": 60,\n      \"per_ip\": true\n    },\n\n    \"brute_force\": {\n      \"enabled\": true,\n      \"severity\": \"medium\",\n      \"description\": \"Brute force login attempts\",\n      \"patterns\": [\n        \"POST.*/(login|signin|auth)\",\n        \"401.*Unauthorized\",\n        \"403.*Forbidden\"\n      ],\n      \"threshold\": 5,\n      \"window\": 300,\n      \"per_ip\": true\n    }\n  }\n}\n</code></pre>"},{"location":"CONFIGURATION/#custom-pattern-examples","title":"Custom Pattern Examples","text":"<pre><code>{\n  \"custom_patterns\": {\n    \"wordpress_attacks\": {\n      \"enabled\": true,\n      \"severity\": \"medium\",\n      \"description\": \"WordPress-specific attacks\",\n      \"patterns\": [\n        \"/wp-admin/\",\n        \"/wp-login.php\",\n        \"/xmlrpc.php\"\n      ],\n      \"threshold\": 10,\n      \"window\": 300\n    },\n\n    \"api_abuse\": {\n      \"enabled\": true,\n      \"severity\": \"low\",\n      \"description\": \"API endpoint abuse\",\n      \"patterns\": [\n        \"/api/v[0-9]+/\",\n        \"GET.*api.*key=\",\n        \"POST.*api/auth\"\n      ],\n      \"threshold\": 50,\n      \"window\": 60\n    }\n  }\n}\n</code></pre>"},{"location":"CONFIGURATION/#environment-specific-configurations","title":"\ud83c\udf0d Environment-Specific Configurations","text":""},{"location":"CONFIGURATION/#development-environment","title":"Development Environment","text":"<pre><code># config/dev-settings.yaml\nmonitoring:\n  check_interval: 5\n  batch_size: 100\n\nlogs:\n  access_log: \"./tests/sample_logs/access.log\"\n  error_log: \"./tests/sample_logs/error.log\"\n\ndetection:\n  thresholds:\n    failed_requests_per_minute: 10  # Lower threshold for testing\n\nalerts:\n  email:\n    enabled: false  # Disable emails in dev\n\nlogging:\n  level: \"DEBUG\"\n  file: \"./logs/dev-monitor.log\"\n</code></pre>"},{"location":"CONFIGURATION/#production-environment","title":"Production Environment","text":"<pre><code># config/prod-settings.yaml\nmonitoring:\n  check_interval: 10\n  batch_size: 1000\n\nlogs:\n  access_log: \"/var/log/nginx/access.log\"\n  error_log: \"/var/log/nginx/error.log\"\n\ndetection:\n  thresholds:\n    failed_requests_per_minute: 100\n    requests_per_ip_per_minute: 200\n\nmitigation:\n  auto_mitigation: true  # Enable automatic responses\n\nsecurity:\n  encryption:\n    enabled: true  # Enable encryption in production\n\nlogging:\n  level: \"INFO\"\n  file: \"/var/log/nginx-security-monitor.log\"\n</code></pre>"},{"location":"CONFIGURATION/#high-volume-environment","title":"High-Volume Environment","text":"<pre><code># config/high-volume-settings.yaml\nmonitoring:\n  check_interval: 5\n  batch_size: 5000  # Process more entries at once\n  worker_threads: 4  # Multiple processing threads\n\ndetection:\n  thresholds:\n    failed_requests_per_minute: 500\n    requests_per_ip_per_minute: 1000\n\nstorage:\n  database:\n    type: \"postgresql\"  # Use PostgreSQL for better performance\n\n  cache:\n    type: \"redis\"  # Use Redis for caching\n    max_size: 10000\n</code></pre>"},{"location":"CONFIGURATION/#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":""},{"location":"CONFIGURATION/#configuration-file-security","title":"Configuration File Security","text":"<pre><code># Set proper permissions\nsudo chmod 600 /etc/nginx-security-monitor/settings.yaml\nsudo chown nginx-monitor:nginx-monitor /etc/nginx-security-monitor/settings.yaml\n\n# Encrypt sensitive data\npython encrypt_config.py --encrypt-file settings.yaml\n</code></pre>"},{"location":"CONFIGURATION/#credential-management","title":"Credential Management","text":"<pre><code># Use environment variables for sensitive data\nalerts:\n  email:\n    username: \"${EMAIL_USERNAME}\"\n    password: \"${EMAIL_PASSWORD}\"\n\n# Or use external secret management\nalerts:\n  email:\n    password_file: \"/etc/nginx-security-monitor/secrets/email_password\"\n</code></pre>"},{"location":"CONFIGURATION/#network-security","title":"Network Security","text":"<pre><code># Restrict network access\nsecurity:\n  network:\n    bind_address: \"127.0.0.1\"  # Only localhost\n    allowed_networks:\n      - \"192.168.1.0/24\"\n      - \"10.0.0.0/8\"\n</code></pre>"},{"location":"CONFIGURATION/#configuration-validation","title":"\ud83e\uddea Configuration Validation","text":""},{"location":"CONFIGURATION/#validate-configuration","title":"Validate Configuration","text":"<pre><code># Check configuration syntax\npython -c \"\nimport yaml\nwith open('config/settings.yaml') as f:\n    config = yaml.safe_load(f)\nprint('\u2705 Configuration is valid YAML')\n\"\n\n# Test configuration with the application\npython -m src.monitor_service --check-config\n\n# Validate patterns\npython -m src.pattern_detector --validate-patterns\n</code></pre>"},{"location":"CONFIGURATION/#configuration-testing","title":"Configuration Testing","text":"<pre><code># Test alert configuration\npython -m src.alert_manager --test-alerts\n\n# Test log file access\npython -m src.log_parser --test-access\n\n# Test mitigation strategies\npython -m src.mitigation --test-strategies\n</code></pre>"},{"location":"CONFIGURATION/#configuration-updates","title":"\ud83d\udd04 Configuration Updates","text":""},{"location":"CONFIGURATION/#hot-configuration-reload","title":"Hot Configuration Reload","text":"<pre><code># Send SIGHUP to reload configuration\nsudo systemctl reload nginx-security-monitor\n\n# Or use management script\nsudo ./nginx-security-monitor.sh reload\n</code></pre>"},{"location":"CONFIGURATION/#configuration-backup","title":"Configuration Backup","text":"<pre><code># Backup current configuration\nsudo cp /etc/nginx-security-monitor/settings.yaml \\\n       /etc/nginx-security-monitor/settings.yaml.backup.$(date +%Y%m%d)\n\n# Automated backup script\n#!/bin/bash\nCONFIG_DIR=\"/etc/nginx-security-monitor\"\nBACKUP_DIR=\"/var/backups/nginx-security-monitor\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\ntar -czf $BACKUP_DIR/config_backup_$DATE.tar.gz -C $CONFIG_DIR .\n</code></pre>"},{"location":"CONFIGURATION/#configuration-reference-quick-guide","title":"\ud83d\udccb Configuration Reference Quick Guide","text":""},{"location":"CONFIGURATION/#essential-settings-for-first-run","title":"Essential Settings for First Run","text":"<pre><code># Minimum configuration to get started\nlogs:\n  access_log: \"/path/to/nginx/access.log\"\n\nalerts:\n  email:\n    enabled: true\n    smtp_server: \"your-smtp-server\"\n    username: \"your-email\"\n    password: \"your-password\"\n    to_addresses: [\"alert@yourdomain.com\"]\n\nlogging:\n  level: \"INFO\"\n  file: \"/var/log/nginx-security-monitor.log\"\n</code></pre>"},{"location":"CONFIGURATION/#performance-tuning","title":"Performance Tuning","text":"<pre><code># For high-performance environments\nmonitoring:\n  check_interval: 5     # Check more frequently\n  batch_size: 2000      # Process more entries at once\n  worker_threads: 4     # Use multiple threads\n\nstorage:\n  cache:\n    max_size: 5000      # Larger cache\n\ndetection:\n  enabled_patterns:     # Only enable needed patterns\n    - ddos_detection\n    - brute_force\n</code></pre>"},{"location":"CONFIGURATION/#troubleshooting-configuration","title":"\ud83c\udd98 Troubleshooting Configuration","text":""},{"location":"CONFIGURATION/#common-issues","title":"Common Issues","text":"<p>Issue: Configuration file not found <pre><code># Check file location and permissions\nls -la /etc/nginx-security-monitor/settings.yaml\nsudo chmod 644 /etc/nginx-security-monitor/settings.yaml\n</code></pre></p> <p>Issue: Invalid YAML syntax <pre><code># Validate YAML\npython -c \"import yaml; yaml.safe_load(open('settings.yaml'))\"\n</code></pre></p> <p>Issue: Email alerts not working <pre><code># Test email configuration\npython -m src.alert_manager --test-email\n</code></pre></p> <p>Issue: Log files not accessible <pre><code># Check permissions\nsudo ls -la /var/log/nginx/\nsudo usermod -a -G nginx nginx-monitor\n</code></pre></p>"},{"location":"CONFIGURATION/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>INSTALLATION.md - Installation guide</li> <li>ALERT_SYSTEMS.md - Alert configuration details</li> <li>PATTERN_DETECTION.md - Pattern customization</li> <li>TROUBLESHOOTING.md - Problem resolution</li> </ul>"},{"location":"CONFIGURATION_SYSTEM/","title":"\ud83d\udd10 NGINX Security Monitor Configuration System","text":"<p>This document provides instructions for using the secure configuration system for the NGINX Security Monitor.</p> <p>Configuration Options: For a complete list of available configuration options and their descriptions, see CONFIGURATION.md.</p>"},{"location":"CONFIGURATION_SYSTEM/#overview","title":"Overview","text":"<p>The NGINX Security Monitor uses a centralized configuration system with the following features:</p> <ul> <li>Schema-based validation: All configuration options are defined in a schema with types, defaults, and constraints</li> <li>Layered configuration: Values can come from defaults, configuration files, or environment variables (in order of precedence)</li> <li>Security hardening: File permission checks, integrity verification, input sanitization, and lockdown mode</li> <li>Secure storage: Sensitive values are stored securely in memory</li> <li>Environment variable overrides: All options can be overridden with environment variables</li> </ul>"},{"location":"CONFIGURATION_SYSTEM/#quick-start","title":"Quick Start","text":""},{"location":"CONFIGURATION_SYSTEM/#basic-usage","title":"Basic Usage","text":"<pre><code>from src.config_manager import ConfigManager\n\n# Get the ConfigManager instance (singleton)\nconfig = ConfigManager.get_instance()\n\n# Get configuration values with fallbacks\nlog_file = config.get('service.log_file_path', '/var/log/nginx/access.log')\ncheck_interval = config.get('service.check_interval', 60)\n\n# Use the values\nprint(f\"Monitoring {log_file} every {check_interval} seconds\")\n</code></pre>"},{"location":"CONFIGURATION_SYSTEM/#configuration-files","title":"Configuration Files","text":"<p>The default configuration file is <code>/etc/nginx-security-monitor/settings.yaml</code>. You can specify a different path when initializing the ConfigManager:</p> <pre><code>config = ConfigManager(config_path='/path/to/config.yaml')\n</code></pre>"},{"location":"CONFIGURATION_SYSTEM/#environment-variables","title":"Environment Variables","text":"<p>All configuration options can be overridden with environment variables. The environment variable names are defined in the schema. For example:</p> <pre><code># Set the check interval to 30 seconds\nexport NGINX_MONITOR_CHECK_INTERVAL=30\n\n# Set the log file path\nexport NGINX_MONITOR_LOG_FILE_PATH=/var/log/custom/nginx.log\n</code></pre>"},{"location":"CONFIGURATION_SYSTEM/#migrating-hardcoded-values","title":"Migrating Hardcoded Values","text":"<p>A migration utility is provided to help identify and replace hardcoded values with ConfigManager references:</p> <pre><code># Scan the src directory for hardcoded values\npython config_migration.py\n\n# Apply the suggested changes\npython config_migration.py --apply\n</code></pre>"},{"location":"CONFIGURATION_SYSTEM/#security-features","title":"Security Features","text":""},{"location":"CONFIGURATION_SYSTEM/#lockdown-mode","title":"Lockdown Mode","text":"<p>In lockdown mode, the ConfigManager uses ultra-conservative security settings and restricts access to sensitive values:</p> <pre><code># Initialize in lockdown mode\nconfig = ConfigManager(lockdown_mode=True)\n\n# Check if in lockdown mode\nif config.is_in_lockdown_mode():\n    # Take appropriate action\n</code></pre>"},{"location":"CONFIGURATION_SYSTEM/#sensitive-values","title":"Sensitive Values","text":"<p>Sensitive values (like passwords and API keys) are stored securely in memory:</p> <pre><code># This value is stored securely\napi_key = config.get('security_integrations.suricata.api_key')\n</code></pre>"},{"location":"CONFIGURATION_SYSTEM/#file-security","title":"File Security","text":"<p>The ConfigManager verifies file permissions and integrity:</p> <pre><code># Reload configuration (includes security checks)\nconfig.reload_config()\n</code></pre>"},{"location":"CONFIGURATION_SYSTEM/#configuration-schema","title":"Configuration Schema","text":"<p>The full configuration schema is defined in <code>src/config_schema.py</code>. This schema defines:</p> <ul> <li>All available configuration options</li> <li>Default values</li> <li>Type constraints</li> <li>Value ranges</li> <li>Environment variable names</li> <li>Security criticality</li> </ul>"},{"location":"CONFIGURATION_SYSTEM/#example-usage","title":"Example Usage","text":"<p>See <code>examples/config_usage_example.py</code> for a complete example of using the ConfigManager in a module.</p>"},{"location":"CONFIGURATION_SYSTEM/#best-practices","title":"Best Practices","text":"<ol> <li>Always use the ConfigManager: Never hardcode values that should be configurable</li> <li>Provide fallbacks: Always provide sensible fallbacks when getting configuration values</li> <li>Check lockdown mode: Be prepared to handle lockdown mode for security-critical operations</li> <li>Don't log sensitive values: Never log sensitive values, even in debug mode</li> <li>Validate inputs: Even though the ConfigManager validates values, still validate inputs in your code</li> </ol>"},{"location":"CONFIGURATION_SYSTEM/#testing","title":"Testing","text":"<p>Tests for the ConfigManager are in <code>tests/test_config_manager.py</code>. Run the tests with:</p> <pre><code>python -m unittest tests/test_config_manager.py\n</code></pre>"},{"location":"CONTRIBUTING/","title":"Contributing to Nginx Security Monitor","text":"<p>First off, thank you for considering contributing to Nginx Security Monitor! It's people like you that make this tool better for everyone.</p>"},{"location":"CONTRIBUTING/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":"<p>Before creating bug reports, please check the existing issues to avoid duplicates. When you create a bug report, include as many details as possible:</p> <ul> <li>Use a clear and descriptive title</li> <li>Describe the exact steps to reproduce the problem</li> <li>Provide specific examples to demonstrate the steps</li> <li>Describe the behavior you observed and what you expected to see</li> <li>Include any relevant log outputs or screenshots</li> <li>Note your environment details (OS, Nginx version, etc.)</li> </ul>"},{"location":"CONTRIBUTING/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>Enhancement suggestions are tracked as GitHub issues. When creating an enhancement suggestion:</p> <ul> <li>Use a clear and descriptive title</li> <li>Provide a detailed description of the proposed functionality</li> <li>Explain why this enhancement would be useful</li> <li>List any alternative solutions you've considered</li> </ul>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Write tests for your changes</li> <li>Ensure your changes pass all tests</li> <li>Update documentation to reflect your changes</li> <li>Commit your changes (<code>git commit -m 'Add some amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"CONTRIBUTING/#development-setup","title":"Development Setup","text":"<ol> <li>Clone the repository</li> <li>Install dependencies: <code>pip install -r requirements.txt</code></li> <li>Install development dependencies: <code>pip install -r dev-requirements.txt</code></li> <li>Run tests: <code>make test</code></li> </ol>"},{"location":"CONTRIBUTING/#coding-guidelines","title":"Coding Guidelines","text":"<ul> <li>Follow PEP 8 style guide for Python code</li> <li>Write meaningful commit messages</li> <li>Include comments and documentation for new code</li> <li>Add tests for new features</li> <li>Keep pull requests focused - one feature/fix per PR</li> </ul>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<ul> <li>Update the README.md if needed</li> <li>Add/update API documentation for new features</li> <li>Include docstrings for new functions/methods</li> <li>Update example code if necessary</li> </ul>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<ul> <li>Write unit tests for new features</li> <li>Ensure all tests pass before submitting PR</li> <li>Follow existing test patterns</li> <li>Include both positive and negative test cases</li> </ul>"},{"location":"CONTRIBUTING/#questions","title":"Questions?","text":"<p>Feel free to create an issue with the \"question\" label if you need help.</p>"},{"location":"ENCRYPTION_GUIDE/","title":"\ud83d\udd10 Encryption Guide - NGINX Security Monitor","text":""},{"location":"ENCRYPTION_GUIDE/#overview","title":"\ud83c\udfaf Overview","text":"<p>The NGINX Security Monitor includes comprehensive encryption capabilities to protect sensitive configuration data, pattern definitions, and communication channels. This guide covers implementing encrypted configurations, key management best practices, and security audit considerations.</p>"},{"location":"ENCRYPTION_GUIDE/#encryption-architecture","title":"\ud83d\udd11 Encryption Architecture","text":""},{"location":"ENCRYPTION_GUIDE/#what-gets-encrypted","title":"What Gets Encrypted","text":"Component Purpose Encryption Method Configuration Files Protect sensitive settings AES-256-GCM Pattern Definitions Secure custom detection patterns AES-256-CBC API Keys &amp; Tokens Protect third-party credentials Fernet (symmetric) Database Connections Secure database credentials AES-256-GCM Communication Channels Encrypt alert notifications TLS 1.3 Log Storage Protect archived security logs ChaCha20-Poly1305"},{"location":"ENCRYPTION_GUIDE/#encryption-layers","title":"Encryption Layers","text":"<ol> <li>Configuration Encryption \u2192 Protect sensitive config at rest</li> <li>Runtime Encryption \u2192 Encrypt data in memory when possible</li> <li>Transport Encryption \u2192 Secure all network communications</li> <li>Storage Encryption \u2192 Encrypt logs and persistent data</li> </ol>"},{"location":"ENCRYPTION_GUIDE/#setting-up-encrypted-configuration","title":"\ud83d\udd27 Setting Up Encrypted Configuration","text":""},{"location":"ENCRYPTION_GUIDE/#initial-key-generation","title":"Initial Key Generation","text":"<p>Generate encryption keys for your installation:</p> <pre><code># Generate master encryption key\npython -m src.crypto_utils generate_key --output keys/master.key\n\n# Generate configuration-specific keys\npython -m src.crypto_utils generate_key --output keys/config.key\npython -m src.crypto_utils generate_key --output keys/patterns.key\npython -m src.crypto_utils generate_key --output keys/database.key\n\n# Set secure permissions\nchmod 600 keys/*.key\nchown root:security keys/*.key\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#encrypt-configuration-files","title":"Encrypt Configuration Files","text":"<p>Encrypt your existing configuration:</p> <pre><code># Encrypt main configuration\npython encrypt_config.py config/settings.yaml --key keys/config.key --output config/settings.yaml.enc\n\n# Encrypt pattern definitions\npython encrypt_config.py config/patterns.json --key keys/patterns.key --output config/patterns.json.enc\n\n# Encrypt service settings\npython encrypt_config.py config/service-settings.yaml --key keys/config.key --output config/service-settings.yaml.enc\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#configuration-file-structure","title":"Configuration File Structure","text":"<p>Encrypted configuration format:</p> <pre><code># config/encrypted_config.yaml\nencryption:\n  enabled: true\n  version: \"1.0\"\n  algorithm: \"AES-256-GCM\"\n  key_file: \"/etc/nginx-security/keys/config.key\"\n\n# Encrypted data blocks\ndatabase:\n  # This section will be encrypted\n  encrypted_data: |\n    gAAAAABhZ2V5...encrypted_content...XvYmRl\n\nalerts:\n  email:\n    # This section will be encrypted\n    encrypted_data: |\n      gAAAAABhZ3R5...encrypted_content...MmNvbm\n\napi_keys:\n  # All API keys encrypted\n  encrypted_data: |\n    gAAAAABhZ4V5...encrypted_content...Tm90ZX\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#key-management","title":"\ud83d\udd10 Key Management","text":""},{"location":"ENCRYPTION_GUIDE/#key-storage-options","title":"Key Storage Options","text":""},{"location":"ENCRYPTION_GUIDE/#1-file-based-key-storage","title":"1. File-Based Key Storage","text":"<pre><code>encryption:\n  key_storage:\n    type: \"file\"\n    key_directory: \"/etc/nginx-security/keys/\"\n    permissions: \"600\"\n    owner: \"root\"\n    group: \"security\"\n\n    # Key files\n    master_key: \"master.key\"\n    config_key: \"config.key\"\n    patterns_key: \"patterns.key\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#2-environment-variable-storage","title":"2. Environment Variable Storage","text":"<pre><code>encryption:\n  key_storage:\n    type: \"environment\"\n    key_mapping:\n      master_key: \"NSM_MASTER_KEY\"\n      config_key: \"NSM_CONFIG_KEY\"\n      patterns_key: \"NSM_PATTERNS_KEY\"\n</code></pre> <p>Set environment variables securely:</p> <pre><code># Export keys (use secure methods in production)\nexport NSM_MASTER_KEY=$(cat keys/master.key | base64 -w 0)\nexport NSM_CONFIG_KEY=$(cat keys/config.key | base64 -w 0)\nexport NSM_PATTERNS_KEY=$(cat keys/patterns.key | base64 -w 0)\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#3-hardware-security-module-hsm","title":"3. Hardware Security Module (HSM)","text":"<pre><code>encryption:\n  key_storage:\n    type: \"hsm\"\n    hsm_config:\n      provider: \"pkcs11\"\n      library_path: \"/usr/lib/libpkcs11.so\"\n      slot_id: 0\n      pin: \"${HSM_PIN}\"\n\n    key_labels:\n      master_key: \"nginx-security-master\"\n      config_key: \"nginx-security-config\"\n      patterns_key: \"nginx-security-patterns\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#4-cloud-key-management","title":"4. Cloud Key Management","text":""},{"location":"ENCRYPTION_GUIDE/#aws-kms-integration","title":"AWS KMS Integration","text":"<pre><code>encryption:\n  key_storage:\n    type: \"aws_kms\"\n    region: \"us-east-1\"\n    key_ids:\n      master_key: \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\"\n      config_key: \"arn:aws:kms:us-east-1:123456789012:key/87654321-4321-4321-4321-210987654321\"\n\n    # IAM role for KMS access\n    iam_role: \"nginx-security-kms-role\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#azure-key-vault-integration","title":"Azure Key Vault Integration","text":"<pre><code>encryption:\n  key_storage:\n    type: \"azure_keyvault\"\n    vault_url: \"https://nginx-security-vault.vault.azure.net/\"\n    client_id: \"${AZURE_CLIENT_ID}\"\n    client_secret: \"${AZURE_CLIENT_SECRET}\"\n    tenant_id: \"${AZURE_TENANT_ID}\"\n\n    key_names:\n      master_key: \"nginx-security-master\"\n      config_key: \"nginx-security-config\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#google-cloud-kms-integration","title":"Google Cloud KMS Integration","text":"<pre><code>encryption:\n  key_storage:\n    type: \"gcp_kms\"\n    project_id: \"nginx-security-project\"\n    location: \"global\"\n    key_ring: \"nginx-security-ring\"\n\n    key_names:\n      master_key: \"master-key\"\n      config_key: \"config-key\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#advanced-encryption-features","title":"\ud83d\udee1\ufe0f Advanced Encryption Features","text":""},{"location":"ENCRYPTION_GUIDE/#multi-layer-encryption","title":"Multi-Layer Encryption","text":"<p>Implement defense in depth with multiple encryption layers:</p> <pre><code>encryption:\n  multi_layer:\n    enabled: true\n\n    layers:\n      # Layer 1: Field-level encryption\n      field_level:\n        enabled: true\n        algorithm: \"AES-256-GCM\"\n        fields: [\"password\", \"api_key\", \"token\", \"secret\"]\n\n      # Layer 2: Section-level encryption  \n      section_level:\n        enabled: true\n        algorithm: \"ChaCha20-Poly1305\"\n        sections: [\"database\", \"alerts\", \"integrations\"]\n\n      # Layer 3: File-level encryption\n      file_level:\n        enabled: true\n        algorithm: \"AES-256-CBC\"\n        files: [\"*.yaml\", \"*.json\", \"*.conf\"]\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#key-rotation","title":"Key Rotation","text":"<p>Implement automatic key rotation:</p> <pre><code>encryption:\n  key_rotation:\n    enabled: true\n\n    schedule:\n      config_keys: \"monthly\"      # Rotate monthly\n      pattern_keys: \"quarterly\"   # Rotate quarterly\n      master_key: \"annually\"      # Rotate annually\n\n    rotation_window:\n      start_time: \"02:00\"         # 2 AM\n      duration: \"1h\"              # 1 hour window\n\n    backup_old_keys: true\n    backup_retention: \"1y\"        # Keep old keys for 1 year\n\n    notification:\n      before_rotation: \"7d\"       # Notify 7 days before\n      after_rotation: true        # Notify after completion\n      alert_channels: [\"email\", \"slack\"]\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#key-derivation","title":"Key Derivation","text":"<p>Use key derivation for specific purposes:</p> <pre><code>encryption:\n  key_derivation:\n    enabled: true\n    algorithm: \"PBKDF2\"\n    iterations: 100000\n    salt_length: 32\n\n    # Derive specific keys from master key\n    derived_keys:\n      log_encryption: \"log_encrypt_v1\"\n      api_signing: \"api_sign_v1\"\n      session_tokens: \"session_v1\"\n\n    # Custom derivation for different environments\n    environment_specific:\n      production: \"prod_salt_2024\"\n      staging: \"stage_salt_2024\"\n      development: \"dev_salt_2024\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#secure-pattern-storage","title":"\ud83d\udd12 Secure Pattern Storage","text":""},{"location":"ENCRYPTION_GUIDE/#encrypted-pattern-definitions","title":"Encrypted Pattern Definitions","text":"<p>Protect your custom detection patterns:</p> <pre><code># Create encrypted pattern file\npython -m src.crypto_utils encrypt_patterns \\\n    --input config/patterns.json \\\n    --output config/patterns.json.enc \\\n    --key keys/patterns.key\n</code></pre> <p>Pattern encryption format:</p> <pre><code>{\n  \"encryption_metadata\": {\n    \"version\": \"1.0\",\n    \"algorithm\": \"AES-256-GCM\",\n    \"timestamp\": \"2024-07-19T10:30:00Z\",\n    \"key_id\": \"patterns_key_v1\"\n  },\n  \"encrypted_patterns\": {\n    \"sql_injection\": \"gAAAAABhZ2V5...encrypted_pattern_data...XvYmRl\",\n    \"xss_detection\": \"gAAAAABhZ3R5...encrypted_pattern_data...MmNvbm\",\n    \"brute_force\": \"gAAAAABhZ4V5...encrypted_pattern_data...Tm90ZX\"\n  }\n}\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#dynamic-pattern-decryption","title":"Dynamic Pattern Decryption","text":"<p>Load patterns securely at runtime:</p> <pre><code># src/encrypted_patterns.py\nfrom src.crypto_utils import CryptoUtils\nimport json\n\nclass EncryptedPatternLoader:\n    \"\"\"Load and decrypt pattern definitions.\"\"\"\n\n    def __init__(self, pattern_file: str, key_file: str):\n        self.pattern_file = pattern_file\n        self.crypto = CryptoUtils()\n        self.key = self._load_key(key_file)\n\n    def load_patterns(self) -&gt; dict:\n        \"\"\"Load and decrypt all patterns.\"\"\"\n        with open(self.pattern_file, 'r') as f:\n            encrypted_data = json.load(f)\n\n        patterns = {}\n        for pattern_name, encrypted_pattern in encrypted_data['encrypted_patterns'].items():\n            try:\n                decrypted = self.crypto.decrypt_data(encrypted_pattern, self.key)\n                patterns[pattern_name] = json.loads(decrypted)\n            except Exception as e:\n                logger.error(f\"Failed to decrypt pattern {pattern_name}: {e}\")\n\n        return patterns\n\n    def add_encrypted_pattern(self, name: str, pattern: dict) -&gt; bool:\n        \"\"\"Add new encrypted pattern.\"\"\"\n        try:\n            pattern_json = json.dumps(pattern)\n            encrypted = self.crypto.encrypt_data(pattern_json, self.key)\n\n            # Load existing patterns\n            with open(self.pattern_file, 'r') as f:\n                data = json.load(f)\n\n            # Add new pattern\n            data['encrypted_patterns'][name] = encrypted\n\n            # Save updated file\n            with open(self.pattern_file, 'w') as f:\n                json.dump(data, f, indent=2)\n\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to add encrypted pattern: {e}\")\n            return False\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#database-encryption","title":"\ud83d\udd10 Database Encryption","text":""},{"location":"ENCRYPTION_GUIDE/#connection-string-encryption","title":"Connection String Encryption","text":"<p>Encrypt database connection details:</p> <pre><code>database:\n  encryption:\n    enabled: true\n    algorithm: \"AES-256-GCM\"\n\n  # Encrypted connection strings\n  connections:\n    primary:\n      encrypted_data: |\n        gAAAAABhZ2V5X3JlYWxseV9sb25nX2VuY3J5cHRlZF9kYXRhX2hlcmVf\n        dGhhdF9jb250YWluc190aGVfZGF0YWJhc2VfY29ubmVjdGlvbl9zdHJp\n        bmdfd2l0aF91c2VybmFtZV9hbmRfcGFzc3dvcmQ\n\n    backup:\n      encrypted_data: |\n        gAAAAABhZ3R5X2Fub3RoZXJfbG9uZ19lbmNyeXB0ZWRfY29ubmVjdGlv\n        bl9zdHJpbmdfZm9yX3RoZV9iYWNrdXBfZGF0YWJhc2Vfc2VydmVy\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#encrypted-data-storage","title":"Encrypted Data Storage","text":"<p>Encrypt sensitive data in database:</p> <pre><code># src/encrypted_storage.py\nfrom src.crypto_utils import CryptoUtils\nimport json\nfrom typing import Any, Dict\n\nclass EncryptedStorage:\n    \"\"\"Handle encrypted data storage in database.\"\"\"\n\n    def __init__(self, encryption_key: bytes):\n        self.crypto = CryptoUtils()\n        self.key = encryption_key\n\n    def store_encrypted(self, table: str, data: Dict[str, Any]) -&gt; bool:\n        \"\"\"Store encrypted data in database.\"\"\"\n        try:\n            # Encrypt sensitive fields\n            encrypted_data = {}\n            for field, value in data.items():\n                if self._is_sensitive_field(field):\n                    encrypted_data[field] = self.crypto.encrypt_data(\n                        json.dumps(value), self.key\n                    ).decode('utf-8')\n                else:\n                    encrypted_data[field] = value\n\n            # Store in database (implementation depends on your DB)\n            return self._store_in_database(table, encrypted_data)\n\n        except Exception as e:\n            logger.error(f\"Failed to store encrypted data: {e}\")\n            return False\n\n    def retrieve_decrypted(self, table: str, record_id: str) -&gt; Dict[str, Any]:\n        \"\"\"Retrieve and decrypt data from database.\"\"\"\n        try:\n            # Get encrypted data from database\n            encrypted_data = self._retrieve_from_database(table, record_id)\n\n            # Decrypt sensitive fields\n            decrypted_data = {}\n            for field, value in encrypted_data.items():\n                if self._is_sensitive_field(field):\n                    decrypted = self.crypto.decrypt_data(\n                        value.encode('utf-8'), self.key\n                    )\n                    decrypted_data[field] = json.loads(decrypted)\n                else:\n                    decrypted_data[field] = value\n\n            return decrypted_data\n\n        except Exception as e:\n            logger.error(f\"Failed to retrieve decrypted data: {e}\")\n            return {}\n\n    def _is_sensitive_field(self, field: str) -&gt; bool:\n        \"\"\"Check if field contains sensitive data.\"\"\"\n        sensitive_fields = [\n            'password', 'token', 'key', 'secret', 'credential',\n            'api_key', 'auth_token', 'private_key', 'certificate'\n        ]\n        return any(sensitive in field.lower() for sensitive in sensitive_fields)\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#transport-encryption","title":"\ud83c\udf10 Transport Encryption","text":""},{"location":"ENCRYPTION_GUIDE/#tls-configuration","title":"TLS Configuration","text":"<p>Secure all network communications:</p> <pre><code>network:\n  tls:\n    enabled: true\n    version: \"1.3\"  # Minimum TLS 1.3\n\n    # Certificate configuration\n    certificates:\n      server_cert: \"/etc/nginx-security/certs/server.crt\"\n      server_key: \"/etc/nginx-security/certs/server.key\"\n      ca_cert: \"/etc/nginx-security/certs/ca.crt\"\n\n    # Cipher suites (TLS 1.3)\n    cipher_suites:\n      - \"TLS_AES_256_GCM_SHA384\"\n      - \"TLS_CHACHA20_POLY1305_SHA256\"\n      - \"TLS_AES_128_GCM_SHA256\"\n\n    # Perfect Forward Secrecy\n    perfect_forward_secrecy: true\n\n    # Certificate validation\n    verify_certificates: true\n    check_hostname: true\n\n    # HSTS settings\n    hsts:\n      enabled: true\n      max_age: 31536000  # 1 year\n      include_subdomains: true\n      preload: true\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#api-communication-encryption","title":"API Communication Encryption","text":"<p>Encrypt API communications:</p> <pre><code>api:\n  encryption:\n    enabled: true\n\n    # Request/response encryption\n    payload_encryption:\n      algorithm: \"AES-256-GCM\"\n      key_exchange: \"ECDH-P384\"\n\n    # API key encryption\n    api_key_encryption:\n      enabled: true\n      rotation_interval: \"24h\"\n\n    # Message authentication\n    message_auth:\n      algorithm: \"HMAC-SHA256\"\n      key_derivation: \"HKDF\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#key-rotation-procedures","title":"\ud83d\udd04 Key Rotation Procedures","text":""},{"location":"ENCRYPTION_GUIDE/#automated-key-rotation","title":"Automated Key Rotation","text":"<p>Implement automated key rotation:</p> <pre><code># src/key_rotation.py\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom src.crypto_utils import CryptoUtils\n\nclass KeyRotationManager:\n    \"\"\"Manage automatic key rotation.\"\"\"\n\n    def __init__(self, config: dict):\n        self.config = config\n        self.crypto = CryptoUtils()\n\n    def rotate_keys(self) -&gt; bool:\n        \"\"\"Perform key rotation.\"\"\"\n        try:\n            # Generate new keys\n            new_keys = self._generate_new_keys()\n\n            # Re-encrypt data with new keys\n            self._re_encrypt_data(new_keys)\n\n            # Backup old keys\n            self._backup_old_keys()\n\n            # Deploy new keys\n            self._deploy_new_keys(new_keys)\n\n            # Update key metadata\n            self._update_key_metadata()\n\n            # Send rotation notification\n            self._send_rotation_notification()\n\n            return True\n\n        except Exception as e:\n            logger.error(f\"Key rotation failed: {e}\")\n            return False\n\n    def _generate_new_keys(self) -&gt; dict:\n        \"\"\"Generate new encryption keys.\"\"\"\n        new_keys = {}\n\n        for key_name in self.config['keys_to_rotate']:\n            new_keys[key_name] = self.crypto.generate_key()\n\n        return new_keys\n\n    def _re_encrypt_data(self, new_keys: dict):\n        \"\"\"Re-encrypt data with new keys.\"\"\"\n        for key_name, new_key in new_keys.items():\n            old_key = self._load_old_key(key_name)\n\n            # Re-encrypt configuration files\n            for config_file in self._get_encrypted_files(key_name):\n                self._re_encrypt_file(config_file, old_key, new_key)\n\n    def _backup_old_keys(self):\n        \"\"\"Backup old keys before rotation.\"\"\"\n        backup_dir = f\"/etc/nginx-security/key-backups/{datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n        os.makedirs(backup_dir, exist_ok=True)\n\n        for key_file in self._get_key_files():\n            shutil.copy2(key_file, backup_dir)\n\n    def schedule_rotation(self):\n        \"\"\"Schedule automatic key rotation.\"\"\"\n        import schedule\n\n        # Schedule based on configuration\n        rotation_schedule = self.config.get('rotation_schedule', {})\n\n        for key_type, frequency in rotation_schedule.items():\n            if frequency == 'daily':\n                schedule.every().day.at(\"02:00\").do(self.rotate_keys)\n            elif frequency == 'weekly':\n                schedule.every().week.do(self.rotate_keys)\n            elif frequency == 'monthly':\n                schedule.every().month.do(self.rotate_keys)\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#manual-key-rotation","title":"Manual Key Rotation","text":"<p>Provide manual key rotation tools:</p> <pre><code>#!/bin/bash\n# scripts/rotate_keys.sh\n\necho \"Starting key rotation process...\"\n\n# Backup current keys\nBACKUP_DIR=\"/etc/nginx-security/key-backups/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\ncp /etc/nginx-security/keys/* \"$BACKUP_DIR/\"\n\n# Generate new keys\npython -m src.crypto_utils generate_key --output /tmp/new_master.key\npython -m src.crypto_utils generate_key --output /tmp/new_config.key\npython -m src.crypto_utils generate_key --output /tmp/new_patterns.key\n\n# Re-encrypt configuration files\necho \"Re-encrypting configuration files...\"\npython -m src.crypto_utils re_encrypt \\\n    --input config/settings.yaml.enc \\\n    --old-key keys/config.key \\\n    --new-key /tmp/new_config.key \\\n    --output config/settings.yaml.enc.new\n\n# Verify new encryption\necho \"Verifying new encryption...\"\npython -m src.crypto_utils verify \\\n    --file config/settings.yaml.enc.new \\\n    --key /tmp/new_config.key\n\n# Deploy new keys (only if verification passes)\nif [ $? -eq 0 ]; then\n    echo \"Deploying new keys...\"\n    mv /tmp/new_master.key keys/master.key\n    mv /tmp/new_config.key keys/config.key\n    mv /tmp/new_patterns.key keys/patterns.key\n    mv config/settings.yaml.enc.new config/settings.yaml.enc\n\n    # Set permissions\n    chmod 600 keys/*.key\n    chown root:security keys/*.key\n\n    echo \"Key rotation completed successfully!\"\nelse\n    echo \"Key rotation failed - verification error\"\n    exit 1\nfi\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#security-auditing","title":"\ud83d\udd0d Security Auditing","text":""},{"location":"ENCRYPTION_GUIDE/#encryption-audit-trail","title":"Encryption Audit Trail","text":"<p>Maintain comprehensive audit logs:</p> <pre><code>auditing:\n  encryption_events:\n    enabled: true\n    log_file: \"/var/log/nginx-security/encryption.log\"\n\n    # Events to log\n    events:\n      - \"key_generation\"\n      - \"key_rotation\"\n      - \"encryption_operation\"\n      - \"decryption_operation\"\n      - \"key_access\"\n      - \"encryption_failure\"\n\n    # Log format\n    format: |\n      {timestamp} | {level} | {event_type} | {user} | {key_id} | \n      {operation} | {file} | {result} | {details}\n\n    # Log rotation\n    rotation:\n      max_size: \"100MB\"\n      backup_count: 10\n      compress: true\n\n    # Tamper protection\n    tamper_protection:\n      enabled: true\n      signature_algorithm: \"HMAC-SHA256\"\n      signature_key: \"audit_signature_key\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#compliance-reporting","title":"Compliance Reporting","text":"<p>Generate compliance reports:</p> <pre><code># src/compliance_reporter.py\nfrom datetime import datetime, timedelta\nimport json\n\nclass ComplianceReporter:\n    \"\"\"Generate encryption compliance reports.\"\"\"\n\n    def __init__(self, config: dict):\n        self.config = config\n\n    def generate_encryption_report(self, period_days: int = 30) -&gt; dict:\n        \"\"\"Generate encryption compliance report.\"\"\"\n        end_date = datetime.now()\n        start_date = end_date - timedelta(days=period_days)\n\n        report = {\n            'report_period': {\n                'start_date': start_date.isoformat(),\n                'end_date': end_date.isoformat(),\n                'duration_days': period_days\n            },\n            'encryption_status': self._check_encryption_status(),\n            'key_management': self._audit_key_management(),\n            'compliance_checks': self._run_compliance_checks(),\n            'recommendations': self._generate_recommendations()\n        }\n\n        return report\n\n    def _check_encryption_status(self) -&gt; dict:\n        \"\"\"Check current encryption status.\"\"\"\n        return {\n            'config_files_encrypted': self._check_config_encryption(),\n            'pattern_files_encrypted': self._check_pattern_encryption(),\n            'database_encryption': self._check_database_encryption(),\n            'transport_encryption': self._check_transport_encryption(),\n            'key_storage_secure': self._check_key_storage()\n        }\n\n    def _run_compliance_checks(self) -&gt; dict:\n        \"\"\"Run compliance checks.\"\"\"\n        checks = {\n            'encryption_algorithms': self._check_approved_algorithms(),\n            'key_length_compliance': self._check_key_lengths(),\n            'key_rotation_compliance': self._check_key_rotation(),\n            'access_control_compliance': self._check_access_controls(),\n            'audit_trail_complete': self._check_audit_trail()\n        }\n\n        return {\n            'total_checks': len(checks),\n            'passed_checks': sum(1 for result in checks.values() if result['status'] == 'pass'),\n            'failed_checks': sum(1 for result in checks.values() if result['status'] == 'fail'),\n            'details': checks\n        }\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#emergency-procedures","title":"\ud83d\udea8 Emergency Procedures","text":""},{"location":"ENCRYPTION_GUIDE/#key-compromise-response","title":"Key Compromise Response","text":"<p>Procedures for handling key compromise:</p> <pre><code>#!/bin/bash\n# scripts/emergency_key_rotation.sh\n\necho \"EMERGENCY KEY ROTATION - Key Compromise Detected\"\n\n# 1. Immediately disable compromised keys\necho \"Disabling compromised keys...\"\nmv keys/compromised.key keys/compromised.key.disabled\n\n# 2. Generate new emergency keys\necho \"Generating emergency keys...\"\npython -m src.crypto_utils generate_key --output keys/emergency.key --strength high\n\n# 3. Re-encrypt critical data immediately\necho \"Re-encrypting critical data...\"\nfor file in config/*.enc; do\n    python -m src.crypto_utils emergency_re_encrypt \\\n        --file \"$file\" \\\n        --compromised-key keys/compromised.key.disabled \\\n        --new-key keys/emergency.key\ndone\n\n# 4. Notify security team\necho \"Notifying security team...\"\npython -m src.alert_manager send_alert \\\n    --type \"security_incident\" \\\n    --severity \"critical\" \\\n    --message \"Encryption key compromise detected - emergency rotation completed\"\n\n# 5. Update access logs\necho \"$(date): Emergency key rotation completed due to compromise\" &gt;&gt; /var/log/nginx-security/emergency.log\n\necho \"Emergency key rotation completed!\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#encryption-recovery","title":"Encryption Recovery","text":"<p>Procedures for encryption failure recovery:</p> <pre><code># src/encryption_recovery.py\nimport os\nimport shutil\nfrom typing import List, Dict, Any\n\nclass EncryptionRecovery:\n    \"\"\"Handle encryption failure recovery.\"\"\"\n\n    def __init__(self, config: dict):\n        self.config = config\n        self.backup_dir = config.get('backup_directory', '/var/backups/nginx-security')\n\n    def recover_from_failure(self, failure_type: str) -&gt; bool:\n        \"\"\"Recover from encryption failure.\"\"\"\n        try:\n            if failure_type == \"key_corruption\":\n                return self._recover_from_key_corruption()\n            elif failure_type == \"config_corruption\":\n                return self._recover_from_config_corruption()\n            elif failure_type == \"total_failure\":\n                return self._recover_from_total_failure()\n            else:\n                logger.error(f\"Unknown failure type: {failure_type}\")\n                return False\n\n        except Exception as e:\n            logger.error(f\"Recovery failed: {e}\")\n            return False\n\n    def _recover_from_key_corruption(self) -&gt; bool:\n        \"\"\"Recover from corrupted encryption keys.\"\"\"\n        # Find latest key backup\n        latest_backup = self._find_latest_key_backup()\n\n        if not latest_backup:\n            logger.error(\"No key backup found for recovery\")\n            return False\n\n        # Restore keys from backup\n        self._restore_keys_from_backup(latest_backup)\n\n        # Verify restored keys\n        if self._verify_restored_keys():\n            logger.info(\"Key recovery successful\")\n            return True\n        else:\n            logger.error(\"Key recovery failed verification\")\n            return False\n\n    def create_recovery_point(self) -&gt; str:\n        \"\"\"Create recovery point with current encryption state.\"\"\"\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        recovery_point_dir = f\"{self.backup_dir}/recovery_points/{timestamp}\"\n\n        os.makedirs(recovery_point_dir, exist_ok=True)\n\n        # Backup keys\n        shutil.copytree('keys/', f\"{recovery_point_dir}/keys/\")\n\n        # Backup encrypted configs\n        shutil.copytree('config/', f\"{recovery_point_dir}/config/\")\n\n        # Create recovery metadata\n        metadata = {\n            'timestamp': timestamp,\n            'encryption_version': self._get_encryption_version(),\n            'key_ids': self._get_current_key_ids(),\n            'config_files': self._get_encrypted_config_files()\n        }\n\n        with open(f\"{recovery_point_dir}/metadata.json\", 'w') as f:\n            json.dump(metadata, f, indent=2)\n\n        return recovery_point_dir\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#performance-considerations","title":"\ud83d\udcca Performance Considerations","text":""},{"location":"ENCRYPTION_GUIDE/#encryption-performance-tuning","title":"Encryption Performance Tuning","text":"<p>Optimize encryption performance:</p> <pre><code>performance:\n  encryption:\n    # Caching\n    key_cache:\n      enabled: true\n      max_size: 100\n      ttl: 3600  # 1 hour\n\n    # Batch operations\n    batch_encryption:\n      enabled: true\n      batch_size: 1000\n\n    # Parallel processing\n    parallel_operations:\n      enabled: true\n      worker_threads: 4\n\n    # Hardware acceleration\n    hardware_acceleration:\n      aes_ni: true      # Intel AES-NI\n      cryptodev: true   # Hardware crypto devices\n\n    # Memory optimization\n    memory_management:\n      secure_memory: true\n      zero_on_free: true\n      memory_pool_size: \"64MB\"\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#benchmark-encryption-performance","title":"Benchmark Encryption Performance","text":"<pre><code># scripts/benchmark_encryption.py\nimport time\nimport statistics\nfrom src.crypto_utils import CryptoUtils\n\ndef benchmark_encryption_performance():\n    \"\"\"Benchmark encryption performance.\"\"\"\n    crypto = CryptoUtils()\n\n    # Test data sizes\n    test_sizes = [1024, 10240, 102400, 1048576]  # 1KB, 10KB, 100KB, 1MB\n\n    results = {}\n\n    for size in test_sizes:\n        test_data = \"A\" * size\n        key = crypto.generate_key()\n\n        # Benchmark encryption\n        encrypt_times = []\n        for _ in range(100):\n            start = time.time()\n            encrypted = crypto.encrypt_data(test_data, key)\n            encrypt_times.append(time.time() - start)\n\n        # Benchmark decryption\n        decrypt_times = []\n        for _ in range(100):\n            start = time.time()\n            decrypted = crypto.decrypt_data(encrypted, key)\n            decrypt_times.append(time.time() - start)\n\n        results[f\"{size}_bytes\"] = {\n            'encryption': {\n                'avg_time': statistics.mean(encrypt_times),\n                'min_time': min(encrypt_times),\n                'max_time': max(encrypt_times),\n                'throughput_mbps': (size / 1024 / 1024) / statistics.mean(encrypt_times)\n            },\n            'decryption': {\n                'avg_time': statistics.mean(decrypt_times),\n                'min_time': min(decrypt_times),\n                'max_time': max(decrypt_times),\n                'throughput_mbps': (size / 1024 / 1024) / statistics.mean(decrypt_times)\n            }\n        }\n\n    return results\n\nif __name__ == \"__main__\":\n    results = benchmark_encryption_performance()\n    print(json.dumps(results, indent=2))\n</code></pre>"},{"location":"ENCRYPTION_GUIDE/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Configuration Guide - Encryption configuration options</li> <li>Security Features - Overall security architecture</li> <li>Plugin Development - Securing custom plugins</li> <li>Operations Guide - Managing encrypted deployments</li> <li>API Reference - CryptoUtils API documentation</li> </ul> <p>This encryption guide is part of the NGINX Security Monitor documentation. For updates and contributions, see CONTRIBUTING.md.</p>"},{"location":"INSTALLATION/","title":"\ud83d\ude80 Installation Guide","text":"<p>Complete installation guide for NGINX Security Monitor across different environments and platforms.</p>"},{"location":"INSTALLATION/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"INSTALLATION/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.8 or higher</li> <li>Operating System: Linux (Ubuntu 18.04+, CentOS 7+), macOS 10.15+, Windows 10+</li> <li>Memory: Minimum 512MB RAM, Recommended 1GB+</li> <li>Storage: 100MB for application, additional space for logs</li> <li>Network: Internet access for dependency installation</li> </ul>"},{"location":"INSTALLATION/#required-permissions","title":"Required Permissions","text":"<ul> <li>Read access to NGINX log files</li> <li>Write access to configuration directories</li> <li>Optional: systemd service management (for service installation)</li> </ul>"},{"location":"INSTALLATION/#installation-methods","title":"\ud83d\udee0 Installation Methods","text":""},{"location":"INSTALLATION/#method-1-development-installation-recommended-for-testing","title":"Method 1: Development Installation (Recommended for Testing)","text":""},{"location":"INSTALLATION/#step-1-clone-and-setup","title":"Step 1: Clone and Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/AccessiTech/nginx-security-monitor.git\ncd nginx-security-monitor\n\n# Create virtual environment\npython3 -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"INSTALLATION/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<pre><code># Install all dependencies (core + development tools)\npip install -r requirements.txt\n\n# For clean install (force reinstall):\npip install -r requirements.txt --force-reinstall\n\n# Install only core dependencies:\npip install pyyaml&gt;=6.0 cryptography&gt;=3.4.8 psutil&gt;=5.8.0\n</code></pre>"},{"location":"INSTALLATION/#step-3-verify-installation","title":"Step 3: Verify Installation","text":"<pre><code># Test core modules\npython -c \"import src.log_parser; print('\u2705 Log parser loaded')\"\npython -c \"import src.pattern_detector; print('\u2705 Pattern detector loaded')\"\npython -c \"import src.alert_manager; print('\u2705 Alert manager loaded')\"\n\n# Run tests to verify everything works\npytest\n</code></pre>"},{"location":"INSTALLATION/#method-2-production-installation-system-service","title":"Method 2: Production Installation (System Service)","text":""},{"location":"INSTALLATION/#step-1-system-preparation","title":"Step 1: System Preparation","text":"<pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install python3 python3-pip python3-venv git\n\n# CentOS/RHEL\nsudo yum install python3 python3-pip git\n# or on newer versions:\nsudo dnf install python3 python3-pip git\n\n# Create system user\nsudo useradd -r -s /bin/false -d /opt/nginx-security-monitor nginx-monitor\n</code></pre>"},{"location":"INSTALLATION/#step-2-install-application","title":"Step 2: Install Application","text":"<pre><code># Clone to system location\nsudo git clone https://github.com/AccessiTech/nginx-security-monitor.git /opt/nginx-security-monitor\ncd /opt/nginx-security-monitor\n\n# Create virtual environment\nsudo python3 -m venv .venv\nsudo .venv/bin/pip install -r requirements.txt\n\n# Set permissions\nsudo chown -R nginx-monitor:nginx-monitor /opt/nginx-security-monitor\nsudo chmod +x nginx-security-monitor.sh\n</code></pre>"},{"location":"INSTALLATION/#step-3-configure-system-service","title":"Step 3: Configure System Service","text":"<pre><code># Copy service file\nsudo cp systemd/nginx-security-monitor.service /etc/systemd/system/\n\n# Create configuration directory\nsudo mkdir -p /etc/nginx-security-monitor\nsudo cp config/*.yaml /etc/nginx-security-monitor/\nsudo chown -R nginx-monitor:nginx-monitor /etc/nginx-security-monitor\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable nginx-security-monitor\nsudo systemctl start nginx-security-monitor\n</code></pre>"},{"location":"INSTALLATION/#method-3-docker-installation","title":"Method 3: Docker Installation","text":""},{"location":"INSTALLATION/#step-1-build-docker-image","title":"Step 1: Build Docker Image","text":"<pre><code># Clone repository\ngit clone https://github.com/AccessiTech/nginx-security-monitor.git\ncd nginx-security-monitor\n\n# Build image\ndocker build -t nginx-security-monitor .\n</code></pre>"},{"location":"INSTALLATION/#step-2-run-container","title":"Step 2: Run Container","text":"<pre><code># Create volume for configuration\ndocker volume create nginx-security-config\n\n# Run container\ndocker run -d \\\n  --name nginx-security-monitor \\\n  -v nginx-security-config:/etc/nginx-security-monitor \\\n  -v /var/log/nginx:/var/log/nginx:ro \\\n  --restart unless-stopped \\\n  nginx-security-monitor\n</code></pre>"},{"location":"INSTALLATION/#step-3-docker-compose-recommended","title":"Step 3: Docker Compose (Recommended)","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  nginx-security-monitor:\n    build: .\n    container_name: nginx-security-monitor\n    volumes:\n      - ./config:/etc/nginx-security-monitor\n      - /var/log/nginx:/var/log/nginx:ro\n    environment:\n      - LOG_LEVEL=INFO\n    restart: unless-stopped\n</code></pre> <pre><code># Start with docker-compose\ndocker-compose up -d\n</code></pre>"},{"location":"INSTALLATION/#platform-specific-instructions","title":"\ud83d\udd27 Platform-Specific Instructions","text":""},{"location":"INSTALLATION/#ubuntu-20042204","title":"Ubuntu 20.04/22.04","text":"<pre><code># Install dependencies\nsudo apt update\nsudo apt install python3.9 python3.9-venv python3-pip git\n\n# Follow Method 1 or 2 above\n</code></pre>"},{"location":"INSTALLATION/#centos-8rhel-8","title":"CentOS 8/RHEL 8","text":"<pre><code># Enable Python 3.9\nsudo dnf module enable python39\nsudo dnf install python39 python39-pip git\n\n# Follow Method 1 or 2 above\n</code></pre>"},{"location":"INSTALLATION/#macos","title":"macOS","text":"<pre><code># Install Python via Homebrew (recommended)\nbrew install python@3.9 git\n\n# Follow Method 1 above\n</code></pre>"},{"location":"INSTALLATION/#windows-1011","title":"Windows 10/11","text":"<pre><code># Install Python from python.org or Microsoft Store\n# Install Git from git-scm.com\n\n# Clone repository\ngit clone https://github.com/AccessiTech/nginx-security-monitor.git\ncd nginx-security-monitor\n\n# Create virtual environment\npython -m venv .venv\n.venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"INSTALLATION/#troubleshooting-common-issues","title":"\ud83d\udea8 Troubleshooting Common Issues","text":""},{"location":"INSTALLATION/#issue-permission-denied-on-nginx-logs","title":"Issue: Permission Denied on NGINX Logs","text":"<pre><code># Add user to nginx group\nsudo usermod -a -G nginx $USER\n\n# Or adjust log file permissions\nsudo chmod 644 /var/log/nginx/*.log\n</code></pre>"},{"location":"INSTALLATION/#issue-python-version-too-old","title":"Issue: Python Version Too Old","text":"<pre><code># Ubuntu: Install newer Python\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.9 python3.9-venv\n\n# CentOS: Enable newer Python module\nsudo dnf module enable python39\nsudo dnf install python39\n</code></pre>"},{"location":"INSTALLATION/#issue-dependencies-wont-install","title":"Issue: Dependencies Won't Install","text":"<pre><code># Upgrade pip first\npip install --upgrade pip\n\n# Install with no cache\npip install -r requirements.txt --no-cache-dir\n\n# Install with force reinstall\npip install -r requirements.txt --force-reinstall\n</code></pre>"},{"location":"INSTALLATION/#issue-service-wont-start","title":"Issue: Service Won't Start","text":"<pre><code># Check service status\nsudo systemctl status nginx-security-monitor\n\n# Check logs\nsudo journalctl -u nginx-security-monitor -f\n\n# Verify configuration\nsudo /opt/nginx-security-monitor/.venv/bin/python -m src.monitor_service --check-config\n</code></pre>"},{"location":"INSTALLATION/#verification-steps","title":"\u2705 Verification Steps","text":""},{"location":"INSTALLATION/#test-installation","title":"Test Installation","text":"<pre><code># Activate environment (if using Method 1)\nsource .venv/bin/activate\n\n# Test core functionality\npython -c \"\nfrom src.log_parser import parse_logs\nfrom src.pattern_detector import PatternDetector\nprint('\u2705 Core modules working')\n\"\n\n# Run test suite\npytest tests/ -v\n</code></pre>"},{"location":"INSTALLATION/#test-configuration","title":"Test Configuration","text":"<pre><code># Validate configuration files\npython -c \"\nimport yaml\nwith open('config/settings.yaml') as f:\n    config = yaml.safe_load(f)\nprint('\u2705 Configuration valid')\n\"\n</code></pre>"},{"location":"INSTALLATION/#test-log-access","title":"Test Log Access","text":"<pre><code># Test NGINX log access\npython -c \"\nimport os\nlog_file = '/var/log/nginx/access.log'\nif os.path.exists(log_file) and os.access(log_file, os.R_OK):\n    print('\u2705 Can read NGINX logs')\nelse:\n    print('\u274c Cannot read NGINX logs')\n\"\n</code></pre>"},{"location":"INSTALLATION/#environment-variables-setup","title":"Environment Variables Setup","text":""},{"location":"INSTALLATION/#step-4-configure-environment-variables","title":"Step 4: Configure Environment Variables","text":"<pre><code># Create a .env file in the application directory\ncd /opt/nginx-security-monitor\nsudo touch .env\n\n# Add sensitive information to the .env file\nsudo bash -c 'echo \"SECRET_KEY=your_secret_key\" &gt;&gt; .env'\nsudo bash -c 'echo \"DATABASE_URL=your_database_url\" &gt;&gt; .env'\n\n# Set permissions for the .env file\nsudo chown nginx-monitor:nginx-monitor .env\nsudo chmod 600 .env\n</code></pre>"},{"location":"INSTALLATION/#usage","title":"Usage","text":"<p>The application automatically loads environment variables from the <code>.env</code> file. Ensure that sensitive information such as API keys, database URLs, and other credentials are stored securely in this file. Avoid committing the <code>.env</code> file to version control by adding it to <code>.gitignore</code>.</p>"},{"location":"INSTALLATION/#next-steps","title":"\ud83d\udcda Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure the system: See CONFIGURATION.md</li> <li>Set up alerts: See ALERT_SYSTEMS.md</li> <li>Customize patterns: See PATTERN_DETECTION.md</li> <li>Start monitoring: See QUICK_START_TUTORIAL.md</li> </ol>"},{"location":"INSTALLATION/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>Documentation: Check the relevant guide in the docs/ directory</li> <li>Issues: Report problems on GitHub Issues</li> <li>Community: Join discussions in GitHub Discussions</li> <li>Support: See TROUBLESHOOTING.md for detailed help</li> </ul>"},{"location":"INTEGRATION_COOKBOOK/","title":"\ud83d\udd17 Integration Cookbook - NGINX Security Monitor","text":""},{"location":"INTEGRATION_COOKBOOK/#overview","title":"\ud83c\udfaf Overview","text":"<p>This cookbook provides practical, real-world integration examples for the NGINX Security Monitor with popular security tools, SIEM systems, cloud platforms, and enterprise services. Each recipe includes complete configuration examples, troubleshooting tips, and best practices.</p>"},{"location":"INTEGRATION_COOKBOOK/#integration-categories","title":"\ud83d\udcda Integration Categories","text":"Category Tools Purpose Intrusion Detection fail2ban, OSSEC, Wazuh, Suricata Block and detect threats Web Application Firewalls ModSecurity, Cloudflare WAF, AWS WAF Filter malicious requests SIEM Platforms Splunk, ELK Stack, QRadar, ArcSight Centralized log analysis Cloud Security AWS Security Hub, Azure Sentinel, GCP Security Command Center Cloud-native security Monitoring &amp; Alerting Prometheus, Grafana, DataDog, New Relic Metrics and visualization Incident Response PagerDuty, Opsgenie, ServiceNow, Jira Automated incident management Threat Intelligence VirusTotal, AbuseIPDB, OTX, MISP Threat context and reputation"},{"location":"INTEGRATION_COOKBOOK/#fail2ban-integration","title":"\ud83d\udeab fail2ban Integration","text":""},{"location":"INTEGRATION_COOKBOOK/#complete-fail2ban-setup","title":"Complete fail2ban Setup","text":"<p>Configure fail2ban to work with NGINX Security Monitor:</p>"},{"location":"INTEGRATION_COOKBOOK/#1-install-and-configure-fail2ban","title":"1. Install and Configure fail2ban","text":"<pre><code># Install fail2ban\nsudo apt-get install fail2ban\n\n# Create custom configuration\nsudo mkdir -p /etc/fail2ban/filter.d\nsudo mkdir -p /etc/fail2ban/action.d\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#2-create-custom-filter","title":"2. Create Custom Filter","text":"<pre><code># /etc/fail2ban/filter.d/nginx-security-monitor.conf\n[Definition]\n\n# Match NGINX Security Monitor threat detections\nfailregex = ^&lt;HOST&gt; .* \".*\" [45]\\d\\d \\d+.*THREAT_DETECTED.*$\n            ^&lt;HOST&gt; .* \".*(\\?|&amp;)(.*=.*(\\\\\\|'|;|&lt;|&gt;|\\(|\\)|,|union|select|insert|delete|drop|update|script).*).*\" \\d+ \\d+.*$\n            ^&lt;HOST&gt; .* \"(GET|POST) .*(\\.\\./|\\.\\.\\\\\\|etc/passwd|etc/shadow|proc/self/environ).*\" \\d+ \\d+.*$\n            ^&lt;HOST&gt; .* \".*(\\bor\\b|\\band\\b).*(\\b1=1\\b|\\b'='|\\bdrop\\b|\\bunion\\b|\\bselect\\b).*\" \\d+ \\d+.*$\n\n# Ignore legitimate traffic\nignoreregex = ^&lt;HOST&gt; .* \"GET /(favicon\\.ico|robots\\.txt|sitemap\\.xml)\" 200.*$\n              ^&lt;HOST&gt; .* \".*Googlebot.*\" 200.*$\n              ^&lt;HOST&gt; .* \".*Bingbot.*\" 200.*$\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#3-create-custom-actions","title":"3. Create Custom Actions","text":"<pre><code># /etc/fail2ban/action.d/nginx-security-notify.conf\n[Definition]\n\n# Action to notify NGINX Security Monitor of ban\nactionstart = \nactionstop = \nactioncheck = \nactionban = curl -X POST http://localhost:8080/api/bans \\\n           -H \"Content-Type: application/json\" \\\n           -d '{\"ip\":\"&lt;ip&gt;\",\"action\":\"ban\",\"jail\":\"&lt;name&gt;\",\"time\":\"&lt;time&gt;\"}'\nactionunban = curl -X POST http://localhost:8080/api/bans \\\n             -H \"Content-Type: application/json\" \\\n             -d '{\"ip\":\"&lt;ip&gt;\",\"action\":\"unban\",\"jail\":\"&lt;name&gt;\",\"time\":\"&lt;time&gt;\"}'\n\n[Init]\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#4-configure-jails","title":"4. Configure Jails","text":"<pre><code># /etc/fail2ban/jail.d/nginx-security.conf\n[nginx-security-brute-force]\nenabled = true\nfilter = nginx-security-monitor\nlogpath = /var/log/nginx/access.log\nmaxretry = 5\nfindtime = 600\nbantime = 3600\naction = iptables-multiport[name=nginx-security, port=\"http,https\", protocol=tcp]\n         nginx-security-notify[name=nginx-security-brute-force]\n\n[nginx-security-sql-injection]\nenabled = true\nfilter = nginx-security-monitor\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nfindtime = 300\nbantime = 86400\naction = iptables-multiport[name=nginx-sql, port=\"http,https\", protocol=tcp]\n         nginx-security-notify[name=nginx-security-sql-injection]\n\n[nginx-security-directory-traversal]\nenabled = true\nfilter = nginx-security-monitor\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nfindtime = 600\nbantime = 7200\naction = iptables-multiport[name=nginx-traversal, port=\"http,https\", protocol=tcp]\n         nginx-security-notify[name=nginx-security-directory-traversal]\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#5-nginx-security-monitor-configuration","title":"5. NGINX Security Monitor Configuration","text":"<pre><code># config/settings.yaml\nintegrations:\n  fail2ban:\n    enabled: true\n\n    # Communication settings\n    api_endpoint: \"http://localhost:8080/api\"\n    webhook_endpoint: \"/webhook/fail2ban\"\n\n    # Synchronization\n    sync_bans: true\n    sync_interval: 60  # seconds\n\n    # Jail management\n    managed_jails:\n      - \"nginx-security-brute-force\"\n      - \"nginx-security-sql-injection\" \n      - \"nginx-security-directory-traversal\"\n\n    # Ban coordination\n    coordinate_bans: true\n    ban_duration_sync: true\n\n    # Logging\n    log_integration: true\n    log_file: \"/var/log/nginx-security/fail2ban-integration.log\"\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#6-integration-code","title":"6. Integration Code","text":"<pre><code># src/integrations/fail2ban_integration.py\nimport subprocess\nimport requests\nimport json\nfrom typing import Dict, Any, List\n\nclass Fail2banIntegration:\n    \"\"\"Integration with fail2ban for coordinated threat response.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.api_endpoint = config.get('api_endpoint')\n        self.managed_jails = config.get('managed_jails', [])\n\n    def ban_ip(self, ip: str, jail: str = \"nginx-security-brute-force\") -&gt; bool:\n        \"\"\"Ban IP address through fail2ban.\"\"\"\n        try:\n            cmd = f\"fail2ban-client set {jail} banip {ip}\"\n            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n\n            if result.returncode == 0:\n                self._log_action(f\"Banned IP {ip} in jail {jail}\")\n                return True\n            else:\n                self._log_error(f\"Failed to ban IP {ip}: {result.stderr}\")\n                return False\n\n        except Exception as e:\n            self._log_error(f\"Error banning IP {ip}: {e}\")\n            return False\n\n    def unban_ip(self, ip: str, jail: str = \"nginx-security-brute-force\") -&gt; bool:\n        \"\"\"Unban IP address through fail2ban.\"\"\"\n        try:\n            cmd = f\"fail2ban-client set {jail} unbanip {ip}\"\n            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n\n            return result.returncode == 0\n\n        except Exception as e:\n            self._log_error(f\"Error unbanning IP {ip}: {e}\")\n            return False\n\n    def get_banned_ips(self, jail: str = None) -&gt; List[str]:\n        \"\"\"Get list of currently banned IPs.\"\"\"\n        try:\n            if jail:\n                cmd = f\"fail2ban-client get {jail} banip\"\n            else:\n                # Get banned IPs from all managed jails\n                banned_ips = []\n                for managed_jail in self.managed_jails:\n                    cmd = f\"fail2ban-client get {managed_jail} banip\"\n                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n                    if result.returncode == 0:\n                        banned_ips.extend(result.stdout.strip().split('\\n'))\n                return list(set(banned_ips))\n\n            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n            if result.returncode == 0:\n                return result.stdout.strip().split('\\n')\n            else:\n                return []\n\n        except Exception as e:\n            self._log_error(f\"Error getting banned IPs: {e}\")\n            return []\n\n    def sync_bans_with_security_monitor(self):\n        \"\"\"Synchronize bans between fail2ban and security monitor.\"\"\"\n        try:\n            # Get banned IPs from fail2ban\n            fail2ban_bans = self.get_banned_ips()\n\n            # Get banned IPs from security monitor\n            response = requests.get(f\"{self.api_endpoint}/bans\")\n            security_monitor_bans = response.json().get('banned_ips', [])\n\n            # Sync differences\n            for ip in fail2ban_bans:\n                if ip not in security_monitor_bans:\n                    self._notify_security_monitor_ban(ip)\n\n            for ip in security_monitor_bans:\n                if ip not in fail2ban_bans:\n                    self.ban_ip(ip)\n\n        except Exception as e:\n            self._log_error(f\"Error syncing bans: {e}\")\n\n    def handle_webhook(self, webhook_data: Dict[str, Any]):\n        \"\"\"Handle webhook notifications from fail2ban.\"\"\"\n        action = webhook_data.get('action')\n        ip = webhook_data.get('ip')\n        jail = webhook_data.get('jail')\n\n        if action == 'ban':\n            self._handle_ban_notification(ip, jail)\n        elif action == 'unban':\n            self._handle_unban_notification(ip, jail)\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#ossecwazuh-integration","title":"\ud83d\udd0d OSSEC/Wazuh Integration","text":""},{"location":"INTEGRATION_COOKBOOK/#complete-ossecwazuh-setup","title":"Complete OSSEC/Wazuh Setup","text":""},{"location":"INTEGRATION_COOKBOOK/#1-ossec-agent-configuration","title":"1. OSSEC Agent Configuration","text":"<pre><code>&lt;!-- /var/ossec/etc/ossec.conf --&gt;\n&lt;ossec_config&gt;\n  &lt;!-- NGINX Security Monitor log monitoring --&gt;\n  &lt;localfile&gt;\n    &lt;log_format&gt;json&lt;/log_format&gt;\n    &lt;location&gt;/var/log/nginx-security/threats.log&lt;/location&gt;\n  &lt;/localfile&gt;\n\n  &lt;localfile&gt;\n    &lt;log_format&gt;syslog&lt;/log_format&gt;\n    &lt;location&gt;/var/log/nginx-security/mitigation.log&lt;/location&gt;\n  &lt;/localfile&gt;\n\n  &lt;!-- NGINX access logs --&gt;\n  &lt;localfile&gt;\n    &lt;log_format&gt;apache&lt;/log_format&gt;\n    &lt;location&gt;/var/log/nginx/access.log&lt;/location&gt;\n  &lt;/localfile&gt;\n\n  &lt;!-- Active response configuration --&gt;\n  &lt;command&gt;\n    &lt;name&gt;nginx-security-block&lt;/name&gt;\n    &lt;executable&gt;nginx-security-block.sh&lt;/executable&gt;\n    &lt;expect&gt;srcip&lt;/expect&gt;\n    &lt;timeout_allowed&gt;yes&lt;/timeout_allowed&gt;\n  &lt;/command&gt;\n\n  &lt;active-response&gt;\n    &lt;command&gt;nginx-security-block&lt;/command&gt;\n    &lt;location&gt;local&lt;/location&gt;\n    &lt;rules_id&gt;100001,100002,100003&lt;/rules_id&gt;\n    &lt;timeout&gt;3600&lt;/timeout&gt;\n  &lt;/active-response&gt;\n&lt;/ossec_config&gt;\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#2-custom-ossec-rules","title":"2. Custom OSSEC Rules","text":"<pre><code>&lt;!-- /var/ossec/rules/local_rules.xml --&gt;\n&lt;group name=\"nginx-security,\"&gt;\n\n  &lt;!-- NGINX Security Monitor threat detection --&gt;\n  &lt;rule id=\"100001\" level=\"10\"&gt;\n    &lt;decoded_as&gt;json&lt;/decoded_as&gt;\n    &lt;field name=\"threat_type\"&gt;sql_injection&lt;/field&gt;\n    &lt;description&gt;SQL injection attempt detected by NGINX Security Monitor&lt;/description&gt;\n    &lt;group&gt;web,attack,sql_injection&lt;/group&gt;\n  &lt;/rule&gt;\n\n  &lt;rule id=\"100002\" level=\"8\"&gt;\n    &lt;decoded_as&gt;json&lt;/decoded_as&gt;\n    &lt;field name=\"threat_type\"&gt;brute_force&lt;/field&gt;\n    &lt;description&gt;Brute force attack detected by NGINX Security Monitor&lt;/description&gt;\n    &lt;group&gt;web,attack,brute_force&lt;/group&gt;\n  &lt;/rule&gt;\n\n  &lt;rule id=\"100003\" level=\"12\"&gt;\n    &lt;decoded_as&gt;json&lt;/decoded_as&gt;\n    &lt;field name=\"threat_type\"&gt;directory_traversal&lt;/field&gt;\n    &lt;description&gt;Directory traversal attempt detected by NGINX Security Monitor&lt;/description&gt;\n    &lt;group&gt;web,attack,directory_traversal&lt;/group&gt;\n  &lt;/rule&gt;\n\n  &lt;!-- High severity threats --&gt;\n  &lt;rule id=\"100004\" level=\"15\"&gt;\n    &lt;decoded_as&gt;json&lt;/decoded_as&gt;\n    &lt;field name=\"severity\"&gt;critical&lt;/field&gt;\n    &lt;description&gt;Critical threat detected by NGINX Security Monitor&lt;/description&gt;\n    &lt;group&gt;web,attack,critical&lt;/group&gt;\n  &lt;/rule&gt;\n\n  &lt;!-- Mitigation actions --&gt;\n  &lt;rule id=\"100005\" level=\"5\"&gt;\n    &lt;match&gt;Mitigation action: IP blocked&lt;/match&gt;\n    &lt;description&gt;IP address blocked by NGINX Security Monitor&lt;/description&gt;\n    &lt;group&gt;web,mitigation&lt;/group&gt;\n  &lt;/rule&gt;\n\n&lt;/group&gt;\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#3-custom-decoders","title":"3. Custom Decoders","text":"<pre><code>&lt;!-- /var/ossec/etc/local_decoder.xml --&gt;\n&lt;decoder name=\"nginx-security-json\"&gt;\n  &lt;program_name&gt;nginx-security&lt;/program_name&gt;\n  &lt;type&gt;json&lt;/type&gt;\n&lt;/decoder&gt;\n\n&lt;decoder name=\"nginx-security-threat\"&gt;\n  &lt;parent&gt;nginx-security-json&lt;/parent&gt;\n  &lt;field name=\"timestamp\"&gt;\\.timestamp&lt;/field&gt;\n  &lt;field name=\"threat_type\"&gt;\\.threat_type&lt;/field&gt;\n  &lt;field name=\"severity\"&gt;\\.severity&lt;/field&gt;\n  &lt;field name=\"source_ip\"&gt;\\.source_ip&lt;/field&gt;\n  &lt;field name=\"description\"&gt;\\.description&lt;/field&gt;\n  &lt;field name=\"confidence\"&gt;\\.confidence&lt;/field&gt;\n&lt;/decoder&gt;\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#4-active-response-script","title":"4. Active Response Script","text":"<pre><code>#!/bin/bash\n# /var/ossec/active-response/bin/nginx-security-block.sh\n\nLOCAL=`dirname $0`;\ncd $LOCAL\ncd ../\nPWD=`pwd`\n\n# Read input from OSSEC\nread INPUT_JSON\nSRCIP=$(echo $INPUT_JSON | jq -r '.srcip')\nACTION=$(echo $INPUT_JSON | jq -r '.action')\n\n# Log the action\necho \"$(date) - OSSEC Active Response: $ACTION for IP $SRCIP\" &gt;&gt; /var/log/nginx-security/ossec-integration.log\n\ncase \"$ACTION\" in\n  add)\n    # Block IP via NGINX Security Monitor API\n    curl -X POST http://localhost:8080/api/mitigation/block \\\n         -H \"Content-Type: application/json\" \\\n         -d \"{\\\"ip\\\":\\\"$SRCIP\\\",\\\"duration\\\":3600,\\\"source\\\":\\\"ossec\\\"}\"\n\n    # Also block via iptables as backup\n    iptables -I INPUT -s $SRCIP -j DROP\n    ;;\n\n  delete)\n    # Unblock IP via NGINX Security Monitor API\n    curl -X POST http://localhost:8080/api/mitigation/unblock \\\n         -H \"Content-Type: application/json\" \\\n         -d \"{\\\"ip\\\":\\\"$SRCIP\\\",\\\"source\\\":\\\"ossec\\\"}\"\n\n    # Remove iptables rule\n    iptables -D INPUT -s $SRCIP -j DROP\n    ;;\nesac\n\nexit 0\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#5-integration-configuration","title":"5. Integration Configuration","text":"<pre><code># config/settings.yaml\nintegrations:\n  ossec:\n    enabled: true\n\n    # OSSEC manager connection\n    manager_host: \"127.0.0.1\"\n    manager_port: 1514\n    agent_id: \"001\"\n\n    # Log forwarding\n    forward_threats: true\n    forward_mitigations: true\n    log_format: \"json\"\n\n    # Active response coordination\n    active_response: true\n    response_timeout: 60\n\n    # Rule mapping\n    rule_mapping:\n      sql_injection: 100001\n      brute_force: 100002\n      directory_traversal: 100003\n      critical_threat: 100004\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#suricata-integration","title":"\ud83c\udf0a Suricata Integration","text":""},{"location":"INTEGRATION_COOKBOOK/#complete-suricata-ids-setup","title":"Complete Suricata IDS Setup","text":""},{"location":"INTEGRATION_COOKBOOK/#1-suricata-configuration","title":"1. Suricata Configuration","text":"<pre><code># /etc/suricata/suricata.yaml (relevant sections)\noutputs:\n  - eve-log:\n      enabled: yes\n      filetype: unix_dgram\n      filename: /var/run/suricata/suricata-command.socket\n      types:\n        - alert:\n            payload: yes\n            payload-buffer-size: 4kb\n            payload-printable: yes\n            packet: yes\n            metadata: yes\n            http-body: yes\n            http-body-printable: yes\n        - http:\n            extended: yes\n        - dns\n        - tls\n        - files\n        - smtp\n        - flow\n\n# Custom rules directory\nrule-files:\n  - nginx-security-monitor.rules\n  - /etc/suricata/rules/custom.rules\n\n# Performance tuning for web traffic\naf-packet:\n  - interface: eth0\n    cluster-id: 99\n    cluster-type: cluster_flow\n    defrag: yes\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#2-custom-suricata-rules","title":"2. Custom Suricata Rules","text":"<pre><code># /etc/suricata/rules/nginx-security-monitor.rules\n\n# SQL Injection Detection\nalert http any any -&gt; any any (msg:\"NGINX-SEC SQL Injection Attempt\"; flow:established,to_server; content:\"union\"; nocase; content:\"select\"; nocase; distance:0; within:100; classtype:web-application-attack; sid:2000001; rev:1;)\n\nalert http any any -&gt; any any (msg:\"NGINX-SEC SQL Injection - DROP TABLE\"; flow:established,to_server; content:\"drop\"; nocase; content:\"table\"; nocase; distance:0; within:50; classtype:web-application-attack; sid:2000002; rev:1;)\n\n# XSS Detection\nalert http any any -&gt; any any (msg:\"NGINX-SEC XSS Attempt - Script Tag\"; flow:established,to_server; content:\"&lt;script\"; nocase; classtype:web-application-attack; sid:2000003; rev:1;)\n\nalert http any any -&gt; any any (msg:\"NGINX-SEC XSS Attempt - JavaScript URI\"; flow:established,to_server; content:\"javascript:\"; nocase; classtype:web-application-attack; sid:2000004; rev:1;)\n\n# Directory Traversal\nalert http any any -&gt; any any (msg:\"NGINX-SEC Directory Traversal Attempt\"; flow:established,to_server; content:\"../\"; classtype:web-application-attack; sid:2000005; rev:1;)\n\nalert http any any -&gt; any any (msg:\"NGINX-SEC Sensitive File Access\"; flow:established,to_server; content:\"/etc/passwd\"; classtype:web-application-attack; sid:2000006; rev:1;)\n\n# Brute Force Detection (multiple requests to login)\nalert http any any -&gt; any any (msg:\"NGINX-SEC Potential Brute Force - Login\"; flow:established,to_server; content:\"POST\"; http_method; content:\"/login\"; http_uri; threshold: type both, track by_src, count 10, seconds 60; classtype:web-application-attack; sid:2000007; rev:1;)\n\n# Suspicious User Agents\nalert http any any -&gt; any any (msg:\"NGINX-SEC Malicious User Agent - SQLMap\"; flow:established,to_server; content:\"sqlmap\"; http_user_agent; nocase; classtype:web-application-attack; sid:2000008; rev:1;)\n\nalert http any any -&gt; any any (msg:\"NGINX-SEC Malicious User Agent - Nikto\"; flow:established,to_server; content:\"nikto\"; http_user_agent; nocase; classtype:web-application-attack; sid:2000009; rev:1;)\n\n# File Upload Attacks\nalert http any any -&gt; any any (msg:\"NGINX-SEC Malicious File Upload - PHP\"; flow:established,to_server; content:\"Content-Type: application/x-php\"; http_header; classtype:web-application-attack; sid:2000010; rev:1;)\n\n# Command Injection\nalert http any any -&gt; any any (msg:\"NGINX-SEC Command Injection Attempt\"; flow:established,to_server; pcre:\"/(\\||;|`|\\$\\(|\\$\\{)/\"; classtype:web-application-attack; sid:2000011; rev:1;)\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#3-integration-code","title":"3. Integration Code","text":"<pre><code># src/integrations/suricata_integration.py\nimport json\nimport socket\nimport threading\nfrom typing import Dict, Any, Callable\n\nclass SuricataIntegration:\n    \"\"\"Integration with Suricata IDS for enhanced threat detection.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.socket_path = config.get('socket_path', '/var/run/suricata/suricata-command.socket')\n        self.running = False\n        self.callback = None\n\n    def start_monitoring(self, alert_callback: Callable):\n        \"\"\"Start monitoring Suricata alerts.\"\"\"\n        self.callback = alert_callback\n        self.running = True\n\n        # Start monitoring thread\n        monitor_thread = threading.Thread(target=self._monitor_alerts)\n        monitor_thread.daemon = True\n        monitor_thread.start()\n\n    def _monitor_alerts(self):\n        \"\"\"Monitor Suricata EVE alerts.\"\"\"\n        try:\n            # Connect to Suricata socket\n            sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)\n            sock.bind(self.socket_path)\n            sock.settimeout(1.0)\n\n            while self.running:\n                try:\n                    data = sock.recv(65536)\n                    alert_data = json.loads(data.decode('utf-8'))\n\n                    if alert_data.get('event_type') == 'alert':\n                        self._process_suricata_alert(alert_data)\n\n                except socket.timeout:\n                    continue\n                except Exception as e:\n                    logger.error(f\"Error processing Suricata alert: {e}\")\n\n        except Exception as e:\n            logger.error(f\"Error connecting to Suricata: {e}\")\n\n    def _process_suricata_alert(self, alert_data: Dict[str, Any]):\n        \"\"\"Process Suricata alert and convert to security monitor format.\"\"\"\n        try:\n            # Extract relevant information\n            alert = alert_data.get('alert', {})\n            flow = alert_data.get('flow', {})\n            http = alert_data.get('http', {})\n\n            # Convert to security monitor threat format\n            threat = {\n                'threat_type': self._map_suricata_category(alert.get('category', '')),\n                'severity': self._map_suricata_severity(alert.get('severity', 3)),\n                'confidence': 0.8,  # High confidence from Suricata\n                'description': alert.get('signature', 'Suricata alert'),\n                'source_ip': flow.get('src_ip', ''),\n                'dest_ip': flow.get('dest_ip', ''),\n                'source_port': flow.get('src_port', 0),\n                'dest_port': flow.get('dest_port', 0),\n                'protocol': flow.get('proto', ''),\n                'metadata': {\n                    'suricata_signature_id': alert.get('signature_id'),\n                    'suricata_gid': alert.get('gid'),\n                    'suricata_rev': alert.get('rev'),\n                    'http_hostname': http.get('hostname', ''),\n                    'http_url': http.get('url', ''),\n                    'http_method': http.get('http_method', ''),\n                    'http_user_agent': http.get('http_user_agent', ''),\n                    'detection_source': 'suricata'\n                }\n            }\n\n            # Send to callback if configured\n            if self.callback:\n                self.callback(threat)\n\n        except Exception as e:\n            logger.error(f\"Error processing Suricata alert: {e}\")\n\n    def _map_suricata_category(self, category: str) -&gt; str:\n        \"\"\"Map Suricata alert category to threat type.\"\"\"\n        mapping = {\n            'web-application-attack': 'web_attack',\n            'attempted-admin': 'admin_access',\n            'attempted-user': 'user_access',\n            'inappropriate-content': 'content_violation',\n            'policy-violation': 'policy_violation',\n            'trojan-activity': 'malware',\n            'unsuccessful-user': 'failed_auth',\n            'successful-admin': 'admin_success',\n            'successful-user': 'user_success',\n            'shellcode-detect': 'shellcode',\n            'string-detect': 'string_match',\n            'suspicious-filename-detect': 'suspicious_file',\n            'suspicious-login': 'suspicious_auth',\n            'system-call-detect': 'system_call',\n            'tcp-connection': 'tcp_connection',\n            'unusual-client-port-connection': 'unusual_connection',\n            'network-scan': 'network_scan',\n            'denial-of-service': 'dos_attack',\n            'non-standard-protocol': 'protocol_violation',\n            'protocol-command-decode': 'protocol_decode',\n            'generic-protocol-command-decode': 'generic_protocol',\n            'generic-icmp-event': 'icmp_event',\n            'generic-ip-event': 'ip_event'\n        }\n\n        return mapping.get(category.lower(), 'unknown')\n\n    def _map_suricata_severity(self, severity: int) -&gt; str:\n        \"\"\"Map Suricata severity to security monitor severity.\"\"\"\n        if severity == 1:\n            return 'critical'\n        elif severity == 2:\n            return 'high'\n        elif severity == 3:\n            return 'medium'\n        else:\n            return 'low'\n\n    def send_command(self, command: str) -&gt; Dict[str, Any]:\n        \"\"\"Send command to Suricata via unix socket.\"\"\"\n        try:\n            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            sock.connect('/var/run/suricata/suricata-command.socket')\n\n            # Send command\n            sock.send(json.dumps({\"command\": command}).encode())\n\n            # Receive response\n            response = sock.recv(4096)\n            sock.close()\n\n            return json.loads(response.decode())\n\n        except Exception as e:\n            logger.error(f\"Error sending Suricata command: {e}\")\n            return {\"return\": \"NOK\", \"message\": str(e)}\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#4-configuration-integration","title":"4. Configuration Integration","text":"<pre><code># config/settings.yaml\nintegrations:\n  suricata:\n    enabled: true\n\n    # Socket configuration\n    socket_path: \"/var/run/suricata/suricata-command.socket\"\n    eve_socket_path: \"/var/run/suricata/suricata-eve.socket\"\n\n    # Alert processing\n    process_alerts: true\n    alert_threshold: \"medium\"\n\n    # Rule management\n    custom_rules_file: \"/etc/suricata/rules/nginx-security-monitor.rules\"\n    auto_update_rules: true\n\n    # Performance settings\n    buffer_size: 65536\n    timeout: 1.0\n\n    # Correlation settings\n    correlate_with_nginx_logs: true\n    correlation_window: 300  # 5 minutes\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#cloud-platform-integrations","title":"\u2601\ufe0f Cloud Platform Integrations","text":""},{"location":"INTEGRATION_COOKBOOK/#aws-security-hub-integration","title":"AWS Security Hub Integration","text":""},{"location":"INTEGRATION_COOKBOOK/#1-aws-security-hub-configuration","title":"1. AWS Security Hub Configuration","text":"<pre><code># src/integrations/aws_security_hub.py\nimport boto3\nimport json\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\nclass AWSSecurityHubIntegration:\n    \"\"\"Integration with AWS Security Hub for cloud-native security.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.region = config.get('region', 'us-east-1')\n        self.account_id = config.get('account_id')\n        self.product_arn = f\"arn:aws:securityhub:{self.region}:{self.account_id}:product/{self.account_id}/nginx-security-monitor\"\n\n        # Initialize Security Hub client\n        self.security_hub = boto3.client('securityhub', region_name=self.region)\n\n    def send_finding(self, threat: Dict[str, Any]) -&gt; bool:\n        \"\"\"Send threat as Security Hub finding.\"\"\"\n        try:\n            finding = self._convert_threat_to_finding(threat)\n\n            response = self.security_hub.batch_import_findings(\n                Findings=[finding]\n            )\n\n            failed_count = response.get('FailedCount', 0)\n            return failed_count == 0\n\n        except Exception as e:\n            logger.error(f\"Failed to send finding to Security Hub: {e}\")\n            return False\n\n    def _convert_threat_to_finding(self, threat: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Convert threat to Security Hub finding format.\"\"\"\n        finding_id = f\"nginx-security-{threat.get('source_ip', 'unknown')}-{int(datetime.now().timestamp())}\"\n\n        # Map severity\n        severity_mapping = {\n            'low': {'Label': 'LOW', 'Normalized': 25},\n            'medium': {'Label': 'MEDIUM', 'Normalized': 50},\n            'high': {'Label': 'HIGH', 'Normalized': 75},\n            'critical': {'Label': 'CRITICAL', 'Normalized': 100}\n        }\n\n        severity = severity_mapping.get(threat.get('severity', 'medium'), {'Label': 'MEDIUM', 'Normalized': 50})\n\n        finding = {\n            'SchemaVersion': '2018-10-08',\n            'Id': finding_id,\n            'ProductArn': self.product_arn,\n            'GeneratorId': 'nginx-security-monitor',\n            'AwsAccountId': self.account_id,\n            'Types': [self._get_finding_type(threat.get('threat_type', 'unknown'))],\n            'FirstObservedAt': datetime.now().isoformat(),\n            'LastObservedAt': datetime.now().isoformat(),\n            'CreatedAt': datetime.now().isoformat(),\n            'UpdatedAt': datetime.now().isoformat(),\n            'Severity': severity,\n            'Confidence': int(threat.get('confidence', 0.5) * 100),\n            'Title': f\"NGINX Security Threat: {threat.get('threat_type', 'Unknown')}\",\n            'Description': threat.get('description', 'Threat detected by NGINX Security Monitor'),\n            'SourceUrl': f\"https://console.aws.amazon.com/securityhub/home?region={self.region}#/findings\",\n            'Resources': [\n                {\n                    'Type': 'AwsEc2Instance',\n                    'Id': f\"arn:aws:ec2:{self.region}:{self.account_id}:instance/{self._get_instance_id()}\",\n                    'Region': self.region,\n                    'Details': {\n                        'AwsEc2Instance': {\n                            'Type': 'web-server',\n                            'ImageId': self._get_ami_id(),\n                            'VpcId': self._get_vpc_id(),\n                            'SubnetId': self._get_subnet_id()\n                        }\n                    }\n                }\n            ],\n            'Network': {\n                'Direction': 'IN',\n                'Protocol': 'HTTP',\n                'SourceIpV4': threat.get('source_ip', ''),\n                'DestinationPort': 80\n            },\n            'RecordState': 'ACTIVE',\n            'WorkflowState': 'NEW',\n            'UserDefinedFields': {\n                'ThreatType': threat.get('threat_type', 'unknown'),\n                'DetectionConfidence': str(threat.get('confidence', 0.5)),\n                'MitigationApplied': str(threat.get('mitigation_applied', False)),\n                'NginxSecurityVersion': self._get_version()\n            }\n        }\n\n        return finding\n\n    def _get_finding_type(self, threat_type: str) -&gt; str:\n        \"\"\"Map threat type to Security Hub finding type.\"\"\"\n        type_mapping = {\n            'sql_injection': 'TTPs/Command and Control/SQL Injection',\n            'xss': 'TTPs/Command and Control/Cross-Site Scripting',\n            'brute_force': 'TTPs/Credential Access/Brute Force',\n            'directory_traversal': 'TTPs/Discovery/System Information Discovery',\n            'malicious_user_agent': 'TTPs/Defense Evasion/Masquerading',\n            'dos_attack': 'TTPs/Impact/Network Denial of Service'\n        }\n\n        return type_mapping.get(threat_type, 'TTPs/Impact/Network Denial of Service')\n\n    def create_custom_insight(self) -&gt; bool:\n        \"\"\"Create custom Security Hub insight for NGINX threats.\"\"\"\n        try:\n            insight = {\n                'Name': 'NGINX Security Monitor Threats',\n                'Filters': {\n                    'ProductArn': [{'Value': self.product_arn, 'Comparison': 'EQUALS'}],\n                    'RecordState': [{'Value': 'ACTIVE', 'Comparison': 'EQUALS'}]\n                },\n                'GroupByAttribute': 'Types'\n            }\n\n            response = self.security_hub.create_insight(**insight)\n            return 'InsightArn' in response\n\n        except Exception as e:\n            logger.error(f\"Failed to create Security Hub insight: {e}\")\n            return False\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#2-security-hub-configuration","title":"2. Security Hub Configuration","text":"<pre><code># config/settings.yaml\nintegrations:\n  aws_security_hub:\n    enabled: true\n\n    # AWS Configuration\n    region: \"us-east-1\"\n    account_id: \"123456789012\"\n\n    # Finding configuration\n    send_findings: true\n    finding_threshold: \"medium\"\n    batch_size: 100\n\n    # Resource tagging\n    resource_tags:\n      Environment: \"production\"\n      Application: \"nginx-security-monitor\"\n      Owner: \"security-team\"\n\n    # Custom insights\n    create_insights: true\n    insight_names:\n      - \"Top Threat Types\"\n      - \"Most Targeted Resources\"\n      - \"Geographic Distribution\"\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#azure-sentinel-integration","title":"Azure Sentinel Integration","text":""},{"location":"INTEGRATION_COOKBOOK/#1-azure-sentinel-configuration","title":"1. Azure Sentinel Configuration","text":"<pre><code># src/integrations/azure_sentinel.py\nimport requests\nimport json\nimport hashlib\nimport hmac\nimport base64\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\nclass AzureSentinelIntegration:\n    \"\"\"Integration with Azure Sentinel SIEM.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.workspace_id = config.get('workspace_id')\n        self.shared_key = config.get('shared_key')\n        self.log_type = config.get('log_type', 'NginxSecurityMonitor')\n\n    def send_logs(self, threats: List[Dict[str, Any]]) -&gt; bool:\n        \"\"\"Send threat logs to Azure Sentinel.\"\"\"\n        try:\n            # Convert threats to JSON\n            json_data = json.dumps(threats)\n\n            # Build signature\n            date_string = datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S GMT')\n            string_to_hash = f\"POST\\n{len(json_data)}\\napplication/json\\nx-ms-date:{date_string}\\n/api/logs\"\n            bytes_to_hash = bytes(string_to_hash, 'utf-8')\n            decoded_key = base64.b64decode(self.shared_key)\n            encoded_hash = base64.b64encode(hmac.new(decoded_key, bytes_to_hash, digestmod=hashlib.sha256).digest()).decode()\n            authorization = f\"SharedKey {self.workspace_id}:{encoded_hash}\"\n\n            # Build headers\n            headers = {\n                'content-type': 'application/json',\n                'Authorization': authorization,\n                'Log-Type': self.log_type,\n                'x-ms-date': date_string\n            }\n\n            # Send to Azure Sentinel\n            uri = f\"https://{self.workspace_id}.ods.opinsights.azure.com/api/logs?api-version=2016-04-01\"\n            response = requests.post(uri, data=json_data, headers=headers)\n\n            return response.status_code == 200\n\n        except Exception as e:\n            logger.error(f\"Failed to send logs to Azure Sentinel: {e}\")\n            return False\n\n    def create_analytics_rule(self, rule_config: Dict[str, Any]) -&gt; bool:\n        \"\"\"Create analytics rule in Azure Sentinel.\"\"\"\n        try:\n            # This would use Azure REST API to create analytics rules\n            # Implementation depends on Azure AD authentication\n            pass\n        except Exception as e:\n            logger.error(f\"Failed to create analytics rule: {e}\")\n            return False\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#siem-platform-integrations","title":"\ud83d\udcca SIEM Platform Integrations","text":""},{"location":"INTEGRATION_COOKBOOK/#splunk-integration","title":"Splunk Integration","text":""},{"location":"INTEGRATION_COOKBOOK/#1-splunk-universal-forwarder-setup","title":"1. Splunk Universal Forwarder Setup","text":"<pre><code># Install Splunk Universal Forwarder\nwget -O splunkforwarder-8.2.0-e77ba4b7c37f-linux-2.6-amd64.deb \\\n'https://www.splunk.com/bin/splunk/DownloadActivityServlet?...'\n\nsudo dpkg -i splunkforwarder-8.2.0-e77ba4b7c37f-linux-2.6-amd64.deb\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#2-splunk-configuration","title":"2. Splunk Configuration","text":"<pre><code># /opt/splunkforwarder/etc/system/local/inputs.conf\n[monitor:///var/log/nginx-security/threats.log]\ndisabled = false\nsourcetype = nginx_security_threats\nindex = security\n\n[monitor:///var/log/nginx-security/mitigation.log]\ndisabled = false\nsourcetype = nginx_security_mitigation\nindex = security\n\n[monitor:///var/log/nginx/access.log]\ndisabled = false\nsourcetype = nginx_access\nindex = web\n\n# HTTP Event Collector input\n[http://nginx_security_hec]\ntoken = your-hec-token-here\nindex = security\nsourcetype = nginx_security_json\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#3-splunk-props-configuration","title":"3. Splunk Props Configuration","text":"<pre><code># /opt/splunk/etc/system/local/props.conf\n[nginx_security_threats]\nKV_MODE = json\nSHOULD_LINEMERGE = false\nTIME_PREFIX = \"timestamp\":\"\nTIME_FORMAT = %Y-%m-%dT%H:%M:%S\nTRUNCATE = 10000\ncategory = Security\n\n[nginx_security_mitigation]\nEXTRACT-action = Mitigation action: (?&lt;mitigation_action&gt;.+)\nEXTRACT-ip = IP (?&lt;blocked_ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+)\nEXTRACT-duration = duration (?&lt;block_duration&gt;\\d+)\nTIME_FORMAT = %Y-%m-%d %H:%M:%S\ncategory = Security\n\n[nginx_access]\nREPORT-nginx_access = nginx_access_extractions\nTIME_FORMAT = %d/%b/%Y:%H:%M:%S %z\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#4-splunk-searches-and-dashboards","title":"4. Splunk Searches and Dashboards","text":"<pre><code># Saved Search: Top Threat Types (Last 24 Hours)\nindex=security sourcetype=nginx_security_threats\n| stats count by threat_type\n| sort -count\n| head 10\n\n# Saved Search: Geographic Distribution of Threats\nindex=security sourcetype=nginx_security_threats\n| iplocation source_ip\n| geostats count by Country\n\n# Alert: Critical Threats\nindex=security sourcetype=nginx_security_threats severity=critical\n| eval alert_time=_time\n| table alert_time, threat_type, source_ip, description\n| sort -alert_time\n\n# Dashboard Query: Threat Timeline\nindex=security sourcetype=nginx_security_threats\n| timechart span=1h count by threat_type\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#5-splunk-integration-code","title":"5. Splunk Integration Code","text":"<pre><code># src/integrations/splunk_integration.py\nimport requests\nimport json\nfrom typing import Dict, Any, List\n\nclass SplunkIntegration:\n    \"\"\"Integration with Splunk for centralized logging and analysis.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.hec_url = config.get('hec_url')\n        self.hec_token = config.get('hec_token')\n        self.index = config.get('index', 'security')\n        self.sourcetype = config.get('sourcetype', 'nginx_security_json')\n\n    def send_event(self, threat: Dict[str, Any]) -&gt; bool:\n        \"\"\"Send threat event to Splunk via HEC.\"\"\"\n        try:\n            # Format event for Splunk\n            event = {\n                \"time\": int(datetime.now().timestamp()),\n                \"index\": self.index,\n                \"sourcetype\": self.sourcetype,\n                \"source\": \"nginx-security-monitor\",\n                \"event\": threat\n            }\n\n            headers = {\n                'Authorization': f'Splunk {self.hec_token}',\n                'Content-Type': 'application/json'\n            }\n\n            response = requests.post(\n                f\"{self.hec_url}/services/collector/event\",\n                headers=headers,\n                data=json.dumps(event),\n                verify=False  # Set to True in production with proper certs\n            )\n\n            return response.status_code == 200\n\n        except Exception as e:\n            logger.error(f\"Failed to send event to Splunk: {e}\")\n            return False\n\n    def send_batch_events(self, threats: List[Dict[str, Any]]) -&gt; bool:\n        \"\"\"Send multiple threat events to Splunk.\"\"\"\n        try:\n            events = []\n            for threat in threats:\n                events.append({\n                    \"time\": int(datetime.now().timestamp()),\n                    \"index\": self.index,\n                    \"sourcetype\": self.sourcetype,\n                    \"source\": \"nginx-security-monitor\",\n                    \"event\": threat\n                })\n\n            headers = {\n                'Authorization': f'Splunk {self.hec_token}',\n                'Content-Type': 'application/json'\n            }\n\n            # Send as batch\n            batch_data = '\\n'.join([json.dumps(event) for event in events])\n\n            response = requests.post(\n                f\"{self.hec_url}/services/collector/event\",\n                headers=headers,\n                data=batch_data,\n                verify=False\n            )\n\n            return response.status_code == 200\n\n        except Exception as e:\n            logger.error(f\"Failed to send batch events to Splunk: {e}\")\n            return False\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#api-integration-examples","title":"\ud83d\udd17 API Integration Examples","text":""},{"location":"INTEGRATION_COOKBOOK/#generic-rest-api-integration","title":"Generic REST API Integration","text":"<pre><code># src/integrations/generic_api.py\nimport requests\nimport json\nfrom typing import Dict, Any, Optional\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\nclass GenericAPIIntegration:\n    \"\"\"Generic REST API integration for custom endpoints.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.base_url = config.get('base_url')\n        self.api_key = config.get('api_key')\n        self.timeout = config.get('timeout', 30)\n\n        # Setup session with retry strategy\n        self.session = requests.Session()\n        retry_strategy = Retry(\n            total=3,\n            backoff_factor=1,\n            status_forcelist=[429, 500, 502, 503, 504]\n        )\n        adapter = HTTPAdapter(max_retries=retry_strategy)\n        self.session.mount(\"http://\", adapter)\n        self.session.mount(\"https://\", adapter)\n\n        # Default headers\n        self.headers = {\n            'Content-Type': 'application/json',\n            'User-Agent': 'NGINX-Security-Monitor/2.0'\n        }\n\n        if self.api_key:\n            auth_header = config.get('auth_header', 'Authorization')\n            auth_prefix = config.get('auth_prefix', 'Bearer')\n            self.headers[auth_header] = f\"{auth_prefix} {self.api_key}\"\n\n    def send_threat_data(self, threat: Dict[str, Any]) -&gt; bool:\n        \"\"\"Send threat data to external API.\"\"\"\n        try:\n            endpoint = self.config.get('threat_endpoint', '/api/threats')\n            url = f\"{self.base_url}{endpoint}\"\n\n            # Transform threat data if mapping is configured\n            if 'field_mapping' in self.config:\n                threat = self._map_fields(threat, self.config['field_mapping'])\n\n            response = self.session.post(\n                url,\n                headers=self.headers,\n                data=json.dumps(threat),\n                timeout=self.timeout\n            )\n\n            response.raise_for_status()\n            return True\n\n        except Exception as e:\n            logger.error(f\"Failed to send threat data to API: {e}\")\n            return False\n\n    def get_threat_intelligence(self, ip: str) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Get threat intelligence for IP address.\"\"\"\n        try:\n            endpoint = self.config.get('intel_endpoint', '/api/intel/ip')\n            url = f\"{self.base_url}{endpoint}/{ip}\"\n\n            response = self.session.get(\n                url,\n                headers=self.headers,\n                timeout=self.timeout\n            )\n\n            response.raise_for_status()\n            return response.json()\n\n        except Exception as e:\n            logger.error(f\"Failed to get threat intelligence: {e}\")\n            return None\n\n    def _map_fields(self, data: Dict[str, Any], mapping: Dict[str, str]) -&gt; Dict[str, Any]:\n        \"\"\"Map fields according to configuration.\"\"\"\n        mapped_data = {}\n\n        for source_field, target_field in mapping.items():\n            if source_field in data:\n                mapped_data[target_field] = data[source_field]\n\n        return mapped_data\n</code></pre>"},{"location":"INTEGRATION_COOKBOOK/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Configuration Guide - Integration configuration options</li> <li>Alert Systems - Alert channel integrations</li> <li>Mitigation Strategies - Mitigation tool integrations</li> <li>Plugin Development - Creating custom integrations</li> <li>API Reference - Integration APIs and interfaces</li> </ul> <p>This integration cookbook is part of the NGINX Security Monitor documentation. For updates and contributions, see CONTRIBUTING.md.</p>"},{"location":"MITIGATION_STRATEGIES/","title":"\ud83d\udee1\ufe0f Mitigation Strategies Guide - NGINX Security Monitor","text":""},{"location":"MITIGATION_STRATEGIES/#overview","title":"\ud83c\udfaf Overview","text":"<p>The NGINX Security Monitor includes a comprehensive mitigation engine that can automatically respond to detected threats. This guide covers configuring, customizing, and extending the automated mitigation capabilities to protect your web infrastructure.</p>"},{"location":"MITIGATION_STRATEGIES/#mitigation-engine-architecture","title":"\ud83d\udd27 Mitigation Engine Architecture","text":"<p>The mitigation system operates in multiple layers:</p> <ol> <li>Detection \u2192 Threat patterns identified</li> <li>Analysis \u2192 Threat severity and context assessed</li> <li>Decision \u2192 Appropriate mitigation strategy selected</li> <li>Execution \u2192 Mitigation actions implemented</li> <li>Monitoring \u2192 Results tracked and logged</li> <li>Escalation \u2192 Additional actions if needed</li> </ol>"},{"location":"MITIGATION_STRATEGIES/#built-in-mitigation-strategies","title":"\u2699\ufe0f Built-in Mitigation Strategies","text":""},{"location":"MITIGATION_STRATEGIES/#1-ip-blocking","title":"1. IP Blocking","text":"<p>Temporarily or permanently block malicious IP addresses.</p> <pre><code>mitigation:\n  ip_blocking:\n    enabled: true\n\n    # Automatic blocking rules\n    auto_block:\n      brute_force:\n        threshold: 5  # Block after 5 failed attempts\n        duration: 3600  # Block for 1 hour\n        escalation: true  # Increase duration for repeat offenders\n\n      sql_injection:\n        threshold: 1  # Block immediately\n        duration: 7200  # Block for 2 hours\n        permanent_after: 3  # Permanent block after 3 incidents\n\n      directory_traversal:\n        threshold: 2\n        duration: 1800  # 30 minutes\n\n    # Block duration escalation\n    escalation:\n      enabled: true\n      multiplier: 2  # Double duration each time\n      max_duration: 86400  # Maximum 24 hours\n      reset_after: 604800  # Reset escalation after 1 week\n\n    # Whitelist protection\n    whitelist:\n      - \"127.0.0.1\"\n      - \"192.168.1.0/24\"  # Local network\n      - \"10.0.0.0/8\"      # Internal network\n\n    # Integration with system tools\n    methods:\n      - \"iptables\"\n      - \"fail2ban\"\n      - \"nginx_deny\"\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#2-rate-limiting","title":"2. Rate Limiting","text":"<p>Implement dynamic rate limiting based on threat patterns.</p> <pre><code>mitigation:\n  rate_limiting:\n    enabled: true\n\n    # Adaptive rate limits\n    adaptive_limits:\n      normal_traffic:\n        requests_per_minute: 60\n        burst_allowance: 10\n\n      suspicious_behavior:\n        requests_per_minute: 10\n        burst_allowance: 2\n        trigger_duration: 300  # 5 minutes\n\n      under_attack:\n        requests_per_minute: 5\n        burst_allowance: 1\n        trigger_duration: 900  # 15 minutes\n\n    # Per-endpoint limits\n    endpoint_limits:\n      \"/login\":\n        requests_per_minute: 5\n        requests_per_hour: 20\n\n      \"/admin/*\":\n        requests_per_minute: 10\n        requests_per_hour: 100\n\n      \"/api/*\":\n        requests_per_minute: 100\n        requests_per_hour: 1000\n\n    # Implementation methods\n    methods:\n      - \"nginx_limit_req\"\n      - \"application_layer\"\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#3-request-filtering","title":"3. Request Filtering","text":"<p>Filter malicious requests based on patterns and content.</p> <pre><code>mitigation:\n  request_filtering:\n    enabled: true\n\n    # SQL injection protection\n    sql_injection:\n      block_patterns:\n        - \"union.*select\"\n        - \"drop.*table\"\n        - \"insert.*into\"\n        - \"delete.*from\"\n      response_action: \"block\"  # or \"sanitize\"\n\n    # XSS protection\n    xss_protection:\n      block_patterns:\n        - \"&lt;script.*&gt;\"\n        - \"javascript:\"\n        - \"on(load|error|click)=\"\n      response_action: \"sanitize\"\n\n    # Directory traversal protection\n    directory_traversal:\n      block_patterns:\n        - \"\\\\.\\\\./.*\"\n        - \"/etc/passwd\"\n        - \"/etc/shadow\"\n      response_action: \"block\"\n\n    # File upload restrictions\n    file_upload:\n      allowed_extensions: [\".jpg\", \".png\", \".pdf\", \".doc\"]\n      max_file_size: \"10MB\"\n      scan_for_malware: true\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#4-geographic-blocking","title":"4. Geographic Blocking","text":"<p>Block traffic from specific countries or regions.</p> <pre><code>mitigation:\n  geo_blocking:\n    enabled: true\n\n    # Country-based blocking\n    blocked_countries:\n      - \"CN\"  # China\n      - \"RU\"  # Russia\n      - \"KP\"  # North Korea\n\n    # Allow specific countries only\n    allowed_countries_only: false\n    allowed_countries: []\n\n    # Regional blocking\n    blocked_regions:\n      - \"TOR\"  # Tor exit nodes\n      - \"VPN\"  # Known VPN providers\n      - \"PROXY\"  # Open proxies\n\n    # Exceptions\n    whitelist_ips:\n      - \"203.0.113.0/24\"  # Trusted partner network\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#5-user-agent-filtering","title":"5. User-Agent Filtering","text":"<p>Block requests from malicious or automated user agents.</p> <pre><code>mitigation:\n  user_agent_filtering:\n    enabled: true\n\n    # Block known bad user agents\n    blocked_user_agents:\n      - \"sqlmap\"\n      - \"nikto\"\n      - \"nmap\"\n      - \"masscan\"\n      - \"bot\"\n      - \"crawler\"\n      - \"spider\"\n\n    # Block empty or suspicious user agents\n    block_empty_user_agent: true\n    block_suspicious_patterns: true\n\n    # Advanced patterns\n    suspicious_patterns:\n      - \"^$\"  # Empty user agent\n      - \"python-requests\"  # Automated scripts\n      - \"curl\"  # Command line tools\n      - \"wget\"  # Download tools\n\n    # Allow legitimate bots\n    whitelist_user_agents:\n      - \"Googlebot\"\n      - \"Bingbot\"\n      - \"facebookexternalhit\"\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#integration-methods","title":"\ud83d\udd04 Integration Methods","text":""},{"location":"MITIGATION_STRATEGIES/#iptables-integration","title":"iptables Integration","text":"<p>Direct firewall integration for IP blocking:</p> <pre><code>mitigation:\n  iptables:\n    enabled: true\n    chain: \"INPUT\"\n    target: \"DROP\"\n    table: \"filter\"\n\n    # Custom rules\n    custom_rules:\n      - rule: \"-s {ip} -j LOG --log-prefix 'Security-Block: '\"\n        apply_before_block: true\n      - rule: \"-s {ip} -j DROP\"\n\n    # Rule management\n    auto_cleanup: true\n    cleanup_interval: 3600  # 1 hour\n    max_rules: 1000\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#fail2ban-integration","title":"fail2ban Integration","text":"<p>Integrate with fail2ban for advanced IP management:</p> <pre><code>mitigation:\n  fail2ban:\n    enabled: true\n\n    # Jail configuration\n    jails:\n      nginx-security:\n        enabled: true\n        port: \"http,https\"\n        filter: \"nginx-security\"\n        logpath: \"/var/log/nginx/access.log\"\n        maxretry: 3\n        bantime: 3600\n        findtime: 600\n\n    # Custom filters\n    filters:\n      nginx-security: |\n        [Definition]\n        failregex = ^&lt;HOST&gt; .* \".*\" [45]\\d\\d \\d+.*$\n                   ^&lt;HOST&gt; .* \"(GET|POST) .*(\\?|&amp;)(.*=.*(\\\\\\|'|;|&lt;|&gt;|\\(|\\)|,|union|select|insert|delete|drop|update|script).*).*\" \\d+ \\d+.*$\n        ignoreregex =\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#nginx-configuration-integration","title":"NGINX Configuration Integration","text":"<p>Automatically update NGINX configuration for blocking:</p> <pre><code>mitigation:\n  nginx_integration:\n    enabled: true\n\n    # Configuration files\n    deny_file: \"/etc/nginx/conf.d/security-deny.conf\"\n    limit_req_file: \"/etc/nginx/conf.d/security-limits.conf\"\n\n    # Auto-reload NGINX after changes\n    auto_reload: true\n    reload_command: \"nginx -s reload\"\n\n    # Template for deny rules\n    deny_template: |\n      # Security-generated deny rules\n      # Updated: {timestamp}\n\n    # Template for rate limiting\n    limit_req_template: |\n      # Security-generated rate limiting\n      # Updated: {timestamp}\n      limit_req_zone $binary_remote_addr zone=security:10m rate=1r/s;\n      limit_req zone=security burst=5 nodelay;\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#custom-mitigation-strategies","title":"\ud83c\udfaf Custom Mitigation Strategies","text":""},{"location":"MITIGATION_STRATEGIES/#creating-custom-mitigation-plugins","title":"Creating Custom Mitigation Plugins","text":"<p>Develop custom mitigation strategies for specific threats:</p> <pre><code># plugins/custom_mitigation.py\nfrom src.mitigation import MitigationPlugin\n\nclass CustomMitigationPlugin(MitigationPlugin):\n    \"\"\"Custom mitigation strategy example.\"\"\"\n\n    def __init__(self, config):\n        super().__init__(config)\n        self.name = \"custom_mitigation\"\n\n    def can_handle(self, threat):\n        \"\"\"Check if this plugin can handle the threat.\"\"\"\n        return threat.get('threat_type') == 'custom_threat'\n\n    def mitigate(self, threat):\n        \"\"\"Execute custom mitigation logic.\"\"\"\n        result = {\n            'action_taken': 'custom_action',\n            'success': False,\n            'details': {}\n        }\n\n        try:\n            # Your custom mitigation logic here\n            self._custom_mitigation_logic(threat)\n\n            result['success'] = True\n            result['details'] = {\n                'method': 'custom',\n                'target': threat.get('source_ip'),\n                'timestamp': datetime.now().isoformat()\n            }\n\n        except Exception as e:\n            result['details']['error'] = str(e)\n\n        return result\n\n    def _custom_mitigation_logic(self, threat):\n        \"\"\"Implement your custom mitigation logic.\"\"\"\n        # Example: Send to external security system\n        import requests\n\n        response = requests.post(\n            'https://security-system.com/api/block',\n            json={\n                'ip': threat.get('source_ip'),\n                'reason': threat.get('description'),\n                'duration': 3600\n            },\n            headers={'Authorization': 'Bearer your-api-token'}\n        )\n\n        if response.status_code != 200:\n            raise Exception(f\"External system error: {response.text}\")\n</code></pre> <p>Register custom plugin:</p> <pre><code>mitigation:\n  plugins:\n    custom_mitigation:\n      enabled: true\n      module: \"plugins.custom_mitigation\"\n      class: \"CustomMitigationPlugin\"\n      config:\n        api_endpoint: \"https://security-system.com/api\"\n        api_token: \"your-api-token\"\n        timeout: 30\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#conditional-mitigation-logic","title":"Conditional Mitigation Logic","text":"<p>Implement complex conditional logic for mitigation decisions:</p> <pre><code>mitigation:\n  conditional_logic:\n    enabled: true\n\n    rules:\n      # Rule 1: Severe threats get immediate permanent blocking\n      - name: \"severe_threat_immediate_block\"\n        condition: |\n          threat_type in ['sql_injection', 'rce'] and \n          severity == 'critical'\n        actions:\n          - type: \"ip_block\"\n            duration: \"permanent\"\n          - type: \"alert\"\n            priority: \"urgent\"\n          - type: \"log\"\n            level: \"critical\"\n\n      # Rule 2: Repeated offenders get escalated blocking\n      - name: \"repeat_offender_escalation\"\n        condition: |\n          incident_count &gt;= 3 and \n          last_incident_age &lt; 86400\n        actions:\n          - type: \"ip_block\"\n            duration: 86400  # 24 hours\n          - type: \"geo_analysis\"\n          - type: \"threat_intelligence_lookup\"\n\n      # Rule 3: Internal IPs get monitoring only\n      - name: \"internal_ip_monitoring\"\n        condition: |\n          source_ip.startswith('192.168.') or \n          source_ip.startswith('10.')\n        actions:\n          - type: \"monitor\"\n          - type: \"alert\"\n            priority: \"low\"\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#mitigation-analytics","title":"\ud83d\udcca Mitigation Analytics","text":""},{"location":"MITIGATION_STRATEGIES/#track-mitigation-effectiveness","title":"Track Mitigation Effectiveness","text":"<p>Monitor how well your mitigation strategies are working:</p> <pre><code>analytics:\n  mitigation_tracking:\n    enabled: true\n\n    metrics:\n      - \"blocked_attacks_count\"\n      - \"mitigation_success_rate\"\n      - \"false_positive_rate\"\n      - \"response_time\"\n      - \"threat_reduction_percentage\"\n\n    reporting:\n      daily_summary: true\n      weekly_detailed_report: true\n      monthly_trend_analysis: true\n\n    storage:\n      database: \"sqlite:///analytics.db\"\n      retention_days: 90\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#ab-testing-mitigation-strategies","title":"A/B Testing Mitigation Strategies","text":"<p>Test different mitigation approaches:</p> <pre><code>mitigation:\n  ab_testing:\n    enabled: true\n\n    experiments:\n      - name: \"blocking_vs_rate_limiting\"\n        traffic_split: 50  # 50% each strategy\n        strategies:\n          - \"ip_blocking\"\n          - \"rate_limiting\"\n        metrics: [\"effectiveness\", \"false_positives\"]\n        duration_days: 7\n\n      - name: \"immediate_vs_graduated_response\"\n        traffic_split: 30  # 30% new strategy, 70% current\n        strategies:\n          - \"graduated_response\"\n          - \"immediate_block\"\n        metrics: [\"user_experience\", \"threat_mitigation\"]\n        duration_days: 14\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#emergency-response-procedures","title":"\ud83d\udea8 Emergency Response Procedures","text":""},{"location":"MITIGATION_STRATEGIES/#panic-mode","title":"Panic Mode","text":"<p>Activate emergency protection during active attacks:</p> <pre><code>mitigation:\n  panic_mode:\n    enabled: true\n\n    # Automatic activation triggers\n    auto_trigger:\n      attacks_per_minute: 100\n      unique_ips_per_minute: 50\n      critical_threats_per_hour: 10\n\n    # Emergency actions\n    emergency_actions:\n      - \"block_all_non_whitelisted\"\n      - \"enable_strict_rate_limiting\"\n      - \"activate_geo_blocking\"\n      - \"send_emergency_alerts\"\n      - \"enable_detailed_logging\"\n\n    # Auto-recovery\n    recovery:\n      auto_disable_after: 3600  # 1 hour\n      conditions:\n        - \"attack_rate_below_threshold\"\n        - \"manual_approval\"\n</code></pre> <p>Manual panic mode activation:</p> <pre><code># Activate panic mode\npython -m src.mitigation panic --activate\n\n# Check panic mode status\npython -m src.mitigation panic --status\n\n# Deactivate panic mode\npython -m src.mitigation panic --deactivate\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#incident-response-integration","title":"Incident Response Integration","text":"<p>Integrate with incident response procedures:</p> <pre><code>mitigation:\n  incident_response:\n    enabled: true\n\n    # Automatic incident creation\n    create_incidents:\n      severity_threshold: \"high\"\n      auto_assign_team: \"security-team\"\n\n    # Incident management system integration\n    integration:\n      system: \"jira\"\n      endpoint: \"https://company.atlassian.net/rest/api/2\"\n      credentials: \"encrypted_credentials\"\n\n    # Escalation procedures\n    escalation:\n      - level: 1\n        condition: \"severity == 'medium'\"\n        notify: [\"security-team@company.com\"]\n\n      - level: 2\n        condition: \"severity == 'high'\"\n        notify: [\"security-team@company.com\", \"it-manager@company.com\"]\n\n      - level: 3\n        condition: \"severity == 'critical'\"\n        notify: [\"all-hands@company.com\"]\n        actions: [\"activate_panic_mode\"]\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"MITIGATION_STRATEGIES/#preventing-mitigation-bypass","title":"Preventing Mitigation Bypass","text":"<p>Protect your mitigation system from being bypassed:</p> <pre><code>mitigation:\n  security:\n    # Protect configuration files\n    config_protection:\n      file_permissions: \"600\"\n      owner: \"root\"\n      group: \"security\"\n\n    # Rate limit mitigation system access\n    api_protection:\n      rate_limit: \"10/minute\"\n      authentication_required: true\n\n    # Monitor mitigation system health\n    health_monitoring:\n      check_interval: 60\n      alert_on_failure: true\n      auto_restart: true\n\n    # Prevent IP spoofing\n    ip_validation:\n      check_reverse_dns: true\n      validate_source_routing: true\n      detect_proxy_headers: true\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#mitigation-logging-and-auditing","title":"Mitigation Logging and Auditing","text":"<p>Comprehensive logging for compliance and analysis:</p> <pre><code>logging:\n  mitigation_audit:\n    enabled: true\n    log_level: \"INFO\"\n    log_file: \"/var/log/nginx-security/mitigation.log\"\n\n    # What to log\n    log_events:\n      - \"mitigation_triggered\"\n      - \"mitigation_executed\"\n      - \"mitigation_failed\"\n      - \"whitelist_bypass\"\n      - \"escalation_triggered\"\n      - \"panic_mode_activated\"\n\n    # Log format\n    format: |\n      {timestamp} | {level} | {event_type} | {source_ip} | {threat_type} | \n      {action_taken} | {success} | {details}\n\n    # Log rotation\n    rotation:\n      max_size: \"100MB\"\n      backup_count: 10\n      compress: true\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#testing-mitigation-strategies","title":"\ud83e\uddea Testing Mitigation Strategies","text":""},{"location":"MITIGATION_STRATEGIES/#controlled-testing-environment","title":"Controlled Testing Environment","text":"<p>Set up a safe testing environment:</p> <pre><code>testing:\n  environment:\n    enabled: true\n    mode: \"simulation\"  # Don't actually block in test mode\n\n    # Test traffic generation\n    test_scenarios:\n      - name: \"brute_force_simulation\"\n        type: \"brute_force\"\n        source_ips: [\"192.168.100.1\", \"192.168.100.2\"]\n        duration: 300  # 5 minutes\n        intensity: \"medium\"\n\n      - name: \"sql_injection_test\"\n        type: \"sql_injection\"\n        source_ip: \"192.168.100.10\"\n        payloads: [\"union select\", \"drop table\", \"' or 1=1\"]\n\n    # Verification\n    verify_mitigation:\n      check_blocking: true\n      check_alerts: true\n      check_logs: true\n      generate_report: true\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#mitigation-testing-scripts","title":"Mitigation Testing Scripts","text":"<pre><code>#!/bin/bash\n# test_mitigation.sh\n\necho \"Testing NGINX Security Monitor Mitigation...\"\n\n# Test 1: Brute force detection and blocking\necho \"Test 1: Brute force simulation\"\nfor i in {1..10}; do\n    curl -s -o /dev/null \"http://localhost/login\" \\\n         -d \"username=admin&amp;password=wrong$i\" \\\n         -H \"X-Forwarded-For: 192.168.100.1\"\n    sleep 1\ndone\n\n# Test 2: SQL injection detection\necho \"Test 2: SQL injection simulation\"\ncurl -s -o /dev/null \"http://localhost/search?q=1' OR '1'='1\" \\\n     -H \"X-Forwarded-For: 192.168.100.2\"\n\n# Test 3: Directory traversal\necho \"Test 3: Directory traversal simulation\"\ncurl -s -o /dev/null \"http://localhost/../../../etc/passwd\" \\\n     -H \"X-Forwarded-For: 192.168.100.3\"\n\necho \"Mitigation tests completed. Check logs for results.\"\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#performance-optimization","title":"\ud83d\udcda Performance Optimization","text":""},{"location":"MITIGATION_STRATEGIES/#optimize-mitigation-performance","title":"Optimize Mitigation Performance","text":"<p>Ensure mitigation doesn't impact legitimate traffic:</p> <pre><code>performance:\n  optimization:\n    # Caching\n    cache_decisions: true\n    cache_duration: 300  # 5 minutes\n    cache_size: 10000    # Number of cached decisions\n\n    # Asynchronous processing\n    async_mitigation: true\n    worker_threads: 4\n    queue_size: 1000\n\n    # Database optimization\n    database:\n      connection_pool_size: 10\n      query_timeout: 5\n      bulk_operations: true\n\n    # Memory management\n    memory:\n      max_memory_usage: \"512MB\"\n      cleanup_interval: 3600\n      gc_threshold: 1000\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#load-testing","title":"Load Testing","text":"<p>Test mitigation system under load:</p> <pre><code># Install testing tools\npip install locust\n\n# Run load test\nlocust -f load_test.py --host=http://localhost\n</code></pre> <p>Load test script (<code>load_test.py</code>):</p> <pre><code>from locust import HttpUser, task, between\n\nclass SecurityTestUser(HttpUser):\n    wait_time = between(1, 3)\n\n    @task(3)\n    def normal_request(self):\n        \"\"\"Normal traffic simulation.\"\"\"\n        self.client.get(\"/\")\n\n    @task(1)\n    def malicious_request(self):\n        \"\"\"Malicious traffic simulation.\"\"\"\n        self.client.get(\"/search?q=1' OR '1'='1\")\n\n    @task(1)\n    def brute_force_attempt(self):\n        \"\"\"Brute force simulation.\"\"\"\n        self.client.post(\"/login\", data={\n            \"username\": \"admin\",\n            \"password\": \"wrong_password\"\n        })\n</code></pre>"},{"location":"MITIGATION_STRATEGIES/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Pattern Detection - Understanding threat detection</li> <li>Alert Systems - Configuring alert notifications</li> <li>Configuration Guide - Mitigation configuration options</li> <li>Integration Cookbook - Integration examples</li> <li>API Reference - MitigationEngine API documentation</li> </ul> <p>This mitigation strategies guide is part of the NGINX Security Monitor documentation. For updates and contributions, see CONTRIBUTING.md.</p>"},{"location":"OPERATIONS_GUIDE/","title":"\ud83d\udd27 Operations Guide - NGINX Security Monitor","text":""},{"location":"OPERATIONS_GUIDE/#overview","title":"\ud83c\udfaf Overview","text":"<p>This guide covers day-to-day operations and maintenance of the NGINX Security Monitor in production environments. It includes service monitoring, health checks, log management, backup procedures, and operational best practices for maintaining a secure and reliable security monitoring infrastructure.</p>"},{"location":"OPERATIONS_GUIDE/#service-management","title":"\ud83d\ude80 Service Management","text":""},{"location":"OPERATIONS_GUIDE/#systemd-service-control","title":"Systemd Service Control","text":"<p>The NGINX Security Monitor runs as a systemd service for reliable operation:</p>"},{"location":"OPERATIONS_GUIDE/#service-commands","title":"Service Commands","text":"<pre><code># Start the service\nsudo systemctl start nginx-security-monitor\n\n# Stop the service\nsudo systemctl stop nginx-security-monitor\n\n# Restart the service\nsudo systemctl restart nginx-security-monitor\n\n# Reload configuration without restart\nsudo systemctl reload nginx-security-monitor\n\n# Check service status\nsudo systemctl status nginx-security-monitor\n\n# Enable auto-start on boot\nsudo systemctl enable nginx-security-monitor\n\n# View service logs\nsudo journalctl -u nginx-security-monitor -f\n\n# View logs for specific time period\nsudo journalctl -u nginx-security-monitor --since \"2024-01-01\" --until \"2024-01-02\"\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#service-configuration","title":"Service Configuration","text":"<pre><code># /etc/systemd/system/nginx-security-monitor.service\n[Unit]\nDescription=NGINX Security Monitor\nAfter=network.target nginx.service\nWants=network.target\n\n[Service]\nType=forking\nUser=nginx-security\nGroup=nginx-security\nWorkingDirectory=/opt/nginx-security-monitor\nExecStart=/opt/nginx-security-monitor/nginx-security-monitor.sh start\nExecReload=/opt/nginx-security-monitor/nginx-security-monitor.sh reload\nExecStop=/opt/nginx-security-monitor/nginx-security-monitor.sh stop\nPIDFile=/var/run/nginx-security-monitor.pid\nRestart=always\nRestartSec=10\nStandardOutput=journal\nStandardError=journal\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/var/log/nginx-security /var/lib/nginx-security /etc/nginx-security\n\n# Resource limits\nLimitNOFILE=65536\nLimitNPROC=4096\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#process-management","title":"Process Management","text":""},{"location":"OPERATIONS_GUIDE/#multi-process-architecture","title":"Multi-Process Architecture","text":"<pre><code># Check running processes\nps aux | grep nginx-security\n\n# Expected process tree:\n# nginx-security-monitor (main process)\n# \u251c\u2500\u2500 log-processor (worker)\n# \u251c\u2500\u2500 pattern-detector (worker)\n# \u251c\u2500\u2500 alert-manager (worker)\n# \u251c\u2500\u2500 mitigation-engine (worker)\n# \u2514\u2500\u2500 web-interface (worker)\n\n# Check process resource usage\ntop -p $(pgrep -d',' -f nginx-security)\n\n# Monitor memory usage\nps -o pid,vsz,rss,comm -p $(pgrep -f nginx-security)\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#process-health-monitoring","title":"Process Health Monitoring","text":"<pre><code># scripts/health_check.py\n#!/usr/bin/env python3\n\"\"\"Health check script for NGINX Security Monitor.\"\"\"\n\nimport psutil\nimport requests\nimport json\nimport sys\nimport time\nfrom typing import Dict, Any, List\n\nclass HealthChecker:\n    \"\"\"Comprehensive health check for security monitor.\"\"\"\n\n    def __init__(self, config_file: str = '/etc/nginx-security/health.yaml'):\n        self.config = self._load_config(config_file)\n        self.checks = {\n            'process': self._check_processes,\n            'memory': self._check_memory_usage,\n            'disk': self._check_disk_space,\n            'network': self._check_network_connectivity,\n            'api': self._check_api_health,\n            'database': self._check_database_connection,\n            'log_processing': self._check_log_processing\n        }\n\n    def run_all_checks(self) -&gt; Dict[str, Any]:\n        \"\"\"Run all health checks.\"\"\"\n        results = {\n            'timestamp': time.time(),\n            'overall_status': 'healthy',\n            'checks': {}\n        }\n\n        for check_name, check_func in self.checks.items():\n            try:\n                check_result = check_func()\n                results['checks'][check_name] = check_result\n\n                if not check_result.get('healthy', False):\n                    results['overall_status'] = 'unhealthy'\n\n            except Exception as e:\n                results['checks'][check_name] = {\n                    'healthy': False,\n                    'error': str(e),\n                    'status': 'check_failed'\n                }\n                results['overall_status'] = 'unhealthy'\n\n        return results\n\n    def _check_processes(self) -&gt; Dict[str, Any]:\n        \"\"\"Check if all required processes are running.\"\"\"\n        required_processes = [\n            'nginx-security-monitor',\n            'log-processor',\n            'pattern-detector',\n            'alert-manager',\n            'mitigation-engine'\n        ]\n\n        running_processes = []\n        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):\n            cmdline = ' '.join(proc.info['cmdline'] or [])\n            for req_proc in required_processes:\n                if req_proc in cmdline:\n                    running_processes.append({\n                        'name': req_proc,\n                        'pid': proc.info['pid'],\n                        'status': proc.status()\n                    })\n\n        missing_processes = [\n            proc for proc in required_processes \n            if not any(rp['name'] == proc for rp in running_processes)\n        ]\n\n        return {\n            'healthy': len(missing_processes) == 0,\n            'running_processes': running_processes,\n            'missing_processes': missing_processes,\n            'total_processes': len(running_processes)\n        }\n\n    def _check_memory_usage(self) -&gt; Dict[str, Any]:\n        \"\"\"Check memory usage of security monitor processes.\"\"\"\n        memory_threshold = self.config.get('memory_threshold_mb', 512)\n\n        total_memory = 0\n        process_memory = []\n\n        for proc in psutil.process_iter(['pid', 'name', 'memory_info']):\n            if 'nginx-security' in (proc.info['name'] or ''):\n                mem_mb = proc.info['memory_info'].rss / 1024 / 1024\n                total_memory += mem_mb\n                process_memory.append({\n                    'pid': proc.info['pid'],\n                    'name': proc.info['name'],\n                    'memory_mb': round(mem_mb, 2)\n                })\n\n        return {\n            'healthy': total_memory &lt; memory_threshold,\n            'total_memory_mb': round(total_memory, 2),\n            'threshold_mb': memory_threshold,\n            'process_memory': process_memory\n        }\n\n    def _check_disk_space(self) -&gt; Dict[str, Any]:\n        \"\"\"Check disk space for log directories.\"\"\"\n        paths_to_check = [\n            '/var/log/nginx-security',\n            '/var/lib/nginx-security',\n            '/tmp'\n        ]\n\n        disk_usage = []\n        all_healthy = True\n\n        for path in paths_to_check:\n            try:\n                usage = psutil.disk_usage(path)\n                used_percent = (usage.used / usage.total) * 100\n\n                # Alert if over 80% full\n                is_healthy = used_percent &lt; 80\n                all_healthy = all_healthy and is_healthy\n\n                disk_usage.append({\n                    'path': path,\n                    'total_gb': round(usage.total / 1024**3, 2),\n                    'used_gb': round(usage.used / 1024**3, 2),\n                    'free_gb': round(usage.free / 1024**3, 2),\n                    'used_percent': round(used_percent, 2),\n                    'healthy': is_healthy\n                })\n            except Exception as e:\n                disk_usage.append({\n                    'path': path,\n                    'error': str(e),\n                    'healthy': False\n                })\n                all_healthy = False\n\n        return {\n            'healthy': all_healthy,\n            'disk_usage': disk_usage\n        }\n\n    def _check_api_health(self) -&gt; Dict[str, Any]:\n        \"\"\"Check API endpoint health.\"\"\"\n        api_url = self.config.get('api_url', 'http://localhost:8080')\n\n        try:\n            # Check health endpoint\n            response = requests.get(f\"{api_url}/health\", timeout=10)\n\n            if response.status_code == 200:\n                health_data = response.json()\n                return {\n                    'healthy': health_data.get('status') == 'healthy',\n                    'response_time_ms': response.elapsed.total_seconds() * 1000,\n                    'api_version': health_data.get('version'),\n                    'uptime_seconds': health_data.get('uptime')\n                }\n            else:\n                return {\n                    'healthy': False,\n                    'error': f\"HTTP {response.status_code}\",\n                    'response_text': response.text[:200]\n                }\n\n        except Exception as e:\n            return {\n                'healthy': False,\n                'error': str(e)\n            }\n\nif __name__ == \"__main__\":\n    checker = HealthChecker()\n    results = checker.run_all_checks()\n\n    print(json.dumps(results, indent=2))\n\n    # Exit with error code if unhealthy\n    sys.exit(0 if results['overall_status'] == 'healthy' else 1)\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#automated-health-monitoring","title":"Automated Health Monitoring","text":""},{"location":"OPERATIONS_GUIDE/#monitoring-script-setup","title":"Monitoring Script Setup","text":"<pre><code>#!/bin/bash\n# scripts/monitor_health.sh\n\nHEALTH_CHECK_INTERVAL=60  # seconds\nLOG_FILE=\"/var/log/nginx-security/health-monitor.log\"\nALERT_THRESHOLD=3  # consecutive failures before alert\n\nconsecutive_failures=0\n\nwhile true; do\n    # Run health check\n    if python3 /opt/nginx-security-monitor/scripts/health_check.py &gt; /tmp/health_check.json 2&gt;&amp;1; then\n        echo \"$(date): Health check passed\" &gt;&gt; \"$LOG_FILE\"\n        consecutive_failures=0\n    else\n        consecutive_failures=$((consecutive_failures + 1))\n        echo \"$(date): Health check failed (attempt $consecutive_failures)\" &gt;&gt; \"$LOG_FILE\"\n\n        # Send alert if threshold reached\n        if [ $consecutive_failures -ge $ALERT_THRESHOLD ]; then\n            echo \"$(date): Sending health alert after $consecutive_failures failures\" &gt;&gt; \"$LOG_FILE\"\n\n            # Send alert via configured channels\n            python3 -m src.alert_manager send_alert \\\n                --type \"system_health\" \\\n                --severity \"high\" \\\n                --message \"NGINX Security Monitor health check failed $consecutive_failures times\" \\\n                --details \"$(cat /tmp/health_check.json)\"\n\n            consecutive_failures=0  # Reset after sending alert\n        fi\n    fi\n\n    sleep $HEALTH_CHECK_INTERVAL\ndone\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#cron-based-monitoring","title":"Cron-based Monitoring","text":"<pre><code># Add to crontab\n# Check health every 5 minutes\n*/5 * * * * /opt/nginx-security-monitor/scripts/health_check.py &gt;&gt; /var/log/nginx-security/health.log 2&gt;&amp;1\n\n# Daily health report\n0 8 * * * /opt/nginx-security-monitor/scripts/daily_health_report.sh\n\n# Weekly performance report\n0 9 * * 1 /opt/nginx-security-monitor/scripts/weekly_performance_report.sh\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#log-management","title":"\ud83d\udcca Log Management","text":""},{"location":"OPERATIONS_GUIDE/#log-file-structure","title":"Log File Structure","text":"<pre><code>/var/log/nginx-security/\n\u251c\u2500\u2500 main.log                    # Main application log\n\u251c\u2500\u2500 threats.log                 # Detected threats\n\u251c\u2500\u2500 mitigation.log              # Mitigation actions\n\u251c\u2500\u2500 alerts.log                  # Alert delivery log\n\u251c\u2500\u2500 performance.log             # Performance metrics\n\u251c\u2500\u2500 integration.log             # External integration logs\n\u251c\u2500\u2500 error.log                   # Error logs\n\u251c\u2500\u2500 access.log                  # API access logs\n\u251c\u2500\u2500 audit.log                   # Security audit trail\n\u2514\u2500\u2500 archive/                    # Rotated log files\n    \u251c\u2500\u2500 main.log.1.gz\n    \u251c\u2500\u2500 threats.log.1.gz\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#log-rotation-configuration","title":"Log Rotation Configuration","text":"<pre><code># /etc/logrotate.d/nginx-security-monitor\n/var/log/nginx-security/*.log {\n    daily\n    missingok\n    rotate 30\n    compress\n    delaycompress\n    notifempty\n    create 644 nginx-security nginx-security\n\n    postrotate\n        # Signal the service to reopen log files\n        /bin/kill -USR1 $(cat /var/run/nginx-security-monitor.pid) 2&gt;/dev/null || true\n    endscript\n}\n\n# Separate configuration for high-volume logs\n/var/log/nginx-security/threats.log\n/var/log/nginx-security/mitigation.log {\n    hourly\n    missingok\n    rotate 168  # Keep 7 days of hourly logs\n    compress\n    delaycompress\n    notifempty\n    create 644 nginx-security nginx-security\n\n    postrotate\n        /bin/kill -USR1 $(cat /var/run/nginx-security-monitor.pid) 2&gt;/dev/null || true\n    endscript\n}\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#log-analysis-and-monitoring","title":"Log Analysis and Monitoring","text":""},{"location":"OPERATIONS_GUIDE/#log-analysis-script","title":"Log Analysis Script","text":"<pre><code># scripts/log_analyzer.py\n#!/usr/bin/env python3\n\"\"\"Analyze NGINX Security Monitor logs for operational insights.\"\"\"\n\nimport re\nimport json\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict, Counter\nfrom typing import Dict, Any, List\n\nclass LogAnalyzer:\n    \"\"\"Analyze security monitor logs.\"\"\"\n\n    def __init__(self, log_dir: str = '/var/log/nginx-security'):\n        self.log_dir = log_dir\n\n    def analyze_threats(self, hours: int = 24) -&gt; Dict[str, Any]:\n        \"\"\"Analyze threat detection patterns.\"\"\"\n        threats_file = f\"{self.log_dir}/threats.log\"\n        cutoff_time = datetime.now() - timedelta(hours=hours)\n\n        threat_types = Counter()\n        severity_counts = Counter()\n        source_ips = Counter()\n        hourly_counts = defaultdict(int)\n\n        try:\n            with open(threats_file, 'r') as f:\n                for line in f:\n                    try:\n                        threat_data = json.loads(line.strip())\n                        threat_time = datetime.fromisoformat(threat_data.get('timestamp', ''))\n\n                        if threat_time &gt;= cutoff_time:\n                            threat_types[threat_data.get('threat_type', 'unknown')] += 1\n                            severity_counts[threat_data.get('severity', 'unknown')] += 1\n                            source_ips[threat_data.get('source_ip', 'unknown')] += 1\n\n                            # Count by hour\n                            hour_key = threat_time.strftime('%Y-%m-%d %H:00')\n                            hourly_counts[hour_key] += 1\n\n                    except (json.JSONDecodeError, ValueError):\n                        continue\n\n        except FileNotFoundError:\n            return {'error': 'Threats log file not found'}\n\n        return {\n            'analysis_period_hours': hours,\n            'total_threats': sum(threat_types.values()),\n            'threat_types': dict(threat_types.most_common(10)),\n            'severity_distribution': dict(severity_counts),\n            'top_source_ips': dict(source_ips.most_common(10)),\n            'hourly_distribution': dict(sorted(hourly_counts.items()))\n        }\n\n    def analyze_performance(self, hours: int = 24) -&gt; Dict[str, Any]:\n        \"\"\"Analyze performance metrics.\"\"\"\n        perf_file = f\"{self.log_dir}/performance.log\"\n        cutoff_time = datetime.now() - timedelta(hours=hours)\n\n        response_times = []\n        memory_usage = []\n        cpu_usage = []\n\n        try:\n            with open(perf_file, 'r') as f:\n                for line in f:\n                    try:\n                        perf_data = json.loads(line.strip())\n                        perf_time = datetime.fromisoformat(perf_data.get('timestamp', ''))\n\n                        if perf_time &gt;= cutoff_time:\n                            if 'response_time_ms' in perf_data:\n                                response_times.append(perf_data['response_time_ms'])\n                            if 'memory_usage_mb' in perf_data:\n                                memory_usage.append(perf_data['memory_usage_mb'])\n                            if 'cpu_usage_percent' in perf_data:\n                                cpu_usage.append(perf_data['cpu_usage_percent'])\n\n                    except (json.JSONDecodeError, ValueError):\n                        continue\n\n        except FileNotFoundError:\n            return {'error': 'Performance log file not found'}\n\n        def calculate_stats(values: List[float]) -&gt; Dict[str, float]:\n            if not values:\n                return {}\n            return {\n                'min': min(values),\n                'max': max(values),\n                'avg': sum(values) / len(values),\n                'count': len(values)\n            }\n\n        return {\n            'analysis_period_hours': hours,\n            'response_times': calculate_stats(response_times),\n            'memory_usage': calculate_stats(memory_usage),\n            'cpu_usage': calculate_stats(cpu_usage)\n        }\n\n    def check_error_patterns(self, hours: int = 24) -&gt; Dict[str, Any]:\n        \"\"\"Check for error patterns in logs.\"\"\"\n        error_file = f\"{self.log_dir}/error.log\"\n        cutoff_time = datetime.now() - timedelta(hours=hours)\n\n        error_types = Counter()\n        error_modules = Counter()\n        recent_errors = []\n\n        try:\n            with open(error_file, 'r') as f:\n                for line in f:\n                    # Parse log line (assuming standard format)\n                    match = re.match(r'(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}) \\[(\\w+)\\] (.+)', line.strip())\n                    if match:\n                        timestamp_str, level, message = match.groups()\n                        try:\n                            log_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')\n                            if log_time &gt;= cutoff_time:\n                                error_types[level] += 1\n\n                                # Extract module name if present\n                                module_match = re.search(r'\\[(\\w+)\\]', message)\n                                if module_match:\n                                    error_modules[module_match.group(1)] += 1\n\n                                # Keep recent critical errors\n                                if level in ['ERROR', 'CRITICAL']:\n                                    recent_errors.append({\n                                        'timestamp': timestamp_str,\n                                        'level': level,\n                                        'message': message[:200]  # Truncate long messages\n                                    })\n\n                        except ValueError:\n                            continue\n\n        except FileNotFoundError:\n            return {'error': 'Error log file not found'}\n\n        return {\n            'analysis_period_hours': hours,\n            'total_errors': sum(error_types.values()),\n            'error_levels': dict(error_types),\n            'error_modules': dict(error_modules.most_common(10)),\n            'recent_critical_errors': recent_errors[-10:]  # Last 10 critical errors\n        }\n\nif __name__ == \"__main__\":\n    import sys\n\n    analyzer = LogAnalyzer()\n\n    if len(sys.argv) &gt; 1 and sys.argv[1] == 'threats':\n        results = analyzer.analyze_threats()\n    elif len(sys.argv) &gt; 1 and sys.argv[1] == 'performance':\n        results = analyzer.analyze_performance()\n    elif len(sys.argv) &gt; 1 and sys.argv[1] == 'errors':\n        results = analyzer.check_error_patterns()\n    else:\n        # Full analysis\n        results = {\n            'threats': analyzer.analyze_threats(),\n            'performance': analyzer.analyze_performance(),\n            'errors': analyzer.check_error_patterns()\n        }\n\n    print(json.dumps(results, indent=2))\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#backup-and-recovery","title":"\ud83d\udcbe Backup and Recovery","text":""},{"location":"OPERATIONS_GUIDE/#backup-strategy","title":"Backup Strategy","text":""},{"location":"OPERATIONS_GUIDE/#configuration-backup","title":"Configuration Backup","text":"<pre><code>#!/bin/bash\n# scripts/backup_config.sh\n\nBACKUP_DIR=\"/var/backups/nginx-security\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_PATH=\"$BACKUP_DIR/config_backup_$TIMESTAMP\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_PATH\"\n\n# Backup configuration files\ncp -r /etc/nginx-security/ \"$BACKUP_PATH/\"\n\n# Backup custom patterns\ncp -r /var/lib/nginx-security/patterns/ \"$BACKUP_PATH/\" 2&gt;/dev/null || true\n\n# Backup database (if using SQLite)\nif [ -f /var/lib/nginx-security/database.db ]; then\n    cp /var/lib/nginx-security/database.db \"$BACKUP_PATH/\"\nfi\n\n# Backup systemd service file\ncp /etc/systemd/system/nginx-security-monitor.service \"$BACKUP_PATH/\"\n\n# Create backup manifest\ncat &gt; \"$BACKUP_PATH/manifest.txt\" &lt;&lt; EOF\nNGINX Security Monitor Configuration Backup\nCreated: $(date)\nHostname: $(hostname)\nVersion: $(cat /opt/nginx-security-monitor/VERSION 2&gt;/dev/null || echo \"unknown\")\n\nContents:\n- Configuration files (/etc/nginx-security/)\n- Custom patterns (/var/lib/nginx-security/patterns/)\n- Database files\n- Systemd service file\nEOF\n\n# Compress backup\ntar -czf \"$BACKUP_PATH.tar.gz\" -C \"$BACKUP_DIR\" \"config_backup_$TIMESTAMP\"\nrm -rf \"$BACKUP_PATH\"\n\n# Keep only last 10 backups\nls -t \"$BACKUP_DIR\"/config_backup_*.tar.gz | tail -n +11 | xargs rm -f\n\necho \"Configuration backup created: $BACKUP_PATH.tar.gz\"\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#log-backup-and-archival","title":"Log Backup and Archival","text":"<pre><code>#!/bin/bash\n# scripts/archive_logs.sh\n\nLOG_DIR=\"/var/log/nginx-security\"\nARCHIVE_DIR=\"/var/lib/nginx-security/log-archive\"\nDAYS_TO_KEEP=7\n\n# Create archive directory\nmkdir -p \"$ARCHIVE_DIR\"\n\n# Find logs older than specified days\nfind \"$LOG_DIR\" -name \"*.log.*\" -mtime +$DAYS_TO_KEEP -type f | while read logfile; do\n    # Get relative path\n    rel_path=${logfile#$LOG_DIR/}\n\n    # Create year/month directory structure\n    file_date=$(stat -c %Y \"$logfile\")\n    year_month=$(date -d \"@$file_date\" +%Y/%m)\n    dest_dir=\"$ARCHIVE_DIR/$year_month\"\n\n    mkdir -p \"$dest_dir\"\n\n    # Move and compress if not already compressed\n    if [[ \"$logfile\" == *.gz ]]; then\n        mv \"$logfile\" \"$dest_dir/\"\n    else\n        gzip -c \"$logfile\" &gt; \"$dest_dir/${rel_path}.gz\"\n        rm \"$logfile\"\n    fi\ndone\n\n# Archive very old logs to external storage (optional)\nfind \"$ARCHIVE_DIR\" -type f -mtime +90 | while read old_file; do\n    # Upload to S3, move to tape, etc.\n    # aws s3 cp \"$old_file\" s3://backup-bucket/nginx-security-logs/\n    # rm \"$old_file\"\n    echo \"Old log archived: $old_file\"\ndone\n\necho \"Log archival completed\"\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"OPERATIONS_GUIDE/#configuration-recovery","title":"Configuration Recovery","text":"<pre><code>#!/bin/bash\n# scripts/restore_config.sh\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 &lt;backup_file.tar.gz&gt;\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\nTEMP_DIR=\"/tmp/nginx-security-restore-$$\"\n\n# Verify backup file exists\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Create temporary directory\nmkdir -p \"$TEMP_DIR\"\n\n# Extract backup\necho \"Extracting backup...\"\ntar -xzf \"$BACKUP_FILE\" -C \"$TEMP_DIR\"\n\n# Find the extracted directory\nEXTRACTED_DIR=$(find \"$TEMP_DIR\" -name \"config_backup_*\" -type d | head -1)\n\nif [ -z \"$EXTRACTED_DIR\" ]; then\n    echo \"Error: Invalid backup format\"\n    rm -rf \"$TEMP_DIR\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping NGINX Security Monitor...\"\nsudo systemctl stop nginx-security-monitor\n\n# Backup current configuration\necho \"Backing up current configuration...\"\nsudo cp -r /etc/nginx-security /etc/nginx-security.backup.$(date +%Y%m%d_%H%M%S)\n\n# Restore configuration\necho \"Restoring configuration...\"\nsudo cp -r \"$EXTRACTED_DIR/nginx-security/\"* /etc/nginx-security/\n\n# Restore patterns if present\nif [ -d \"$EXTRACTED_DIR/patterns\" ]; then\n    sudo mkdir -p /var/lib/nginx-security/patterns\n    sudo cp -r \"$EXTRACTED_DIR/patterns/\"* /var/lib/nginx-security/patterns/\nfi\n\n# Restore database if present\nif [ -f \"$EXTRACTED_DIR/database.db\" ]; then\n    sudo cp \"$EXTRACTED_DIR/database.db\" /var/lib/nginx-security/\nfi\n\n# Restore systemd service if present\nif [ -f \"$EXTRACTED_DIR/nginx-security-monitor.service\" ]; then\n    sudo cp \"$EXTRACTED_DIR/nginx-security-monitor.service\" /etc/systemd/system/\n    sudo systemctl daemon-reload\nfi\n\n# Set proper permissions\nsudo chown -R nginx-security:nginx-security /etc/nginx-security\nsudo chown -R nginx-security:nginx-security /var/lib/nginx-security\nsudo chmod -R 640 /etc/nginx-security/*.yaml\nsudo chmod 600 /etc/nginx-security/keys/* 2&gt;/dev/null || true\n\n# Start service\necho \"Starting NGINX Security Monitor...\"\nsudo systemctl start nginx-security-monitor\n\n# Verify service started\nsleep 5\nif sudo systemctl is-active --quiet nginx-security-monitor; then\n    echo \"Configuration restored successfully!\"\n    echo \"Service is running.\"\nelse\n    echo \"Warning: Service failed to start. Check logs:\"\n    sudo journalctl -u nginx-security-monitor --lines=20\nfi\n\n# Cleanup\nrm -rf \"$TEMP_DIR\"\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#upgrade-and-migration","title":"\ud83d\udd04 Upgrade and Migration","text":""},{"location":"OPERATIONS_GUIDE/#version-upgrade-procedure","title":"Version Upgrade Procedure","text":""},{"location":"OPERATIONS_GUIDE/#pre-upgrade-checklist","title":"Pre-Upgrade Checklist","text":"<pre><code>#!/bin/bash\n# scripts/pre_upgrade_check.sh\n\necho \"NGINX Security Monitor Pre-Upgrade Checklist\"\necho \"=============================================\"\n\n# Check current version\ncurrent_version=$(cat /opt/nginx-security-monitor/VERSION 2&gt;/dev/null || echo \"unknown\")\necho \"Current version: $current_version\"\n\n# Check service status\nif systemctl is-active --quiet nginx-security-monitor; then\n    echo \"\u2713 Service is running\"\nelse\n    echo \"\u2717 Service is not running\"\nfi\n\n# Check disk space\nfree_space=$(df /opt/nginx-security-monitor --output=avail | tail -1)\nif [ \"$free_space\" -gt 1048576 ]; then  # 1GB in KB\n    echo \"\u2713 Sufficient disk space available\"\nelse\n    echo \"\u2717 Warning: Low disk space ($(($free_space / 1024))MB available)\"\nfi\n\n# Check configuration validity\nif python3 -m src.config_validator /etc/nginx-security/settings.yaml; then\n    echo \"\u2713 Configuration is valid\"\nelse\n    echo \"\u2717 Configuration validation failed\"\nfi\n\n# Check for custom plugins\nif [ -d /opt/nginx-security-monitor/plugins ] &amp;&amp; [ \"$(ls -A /opt/nginx-security-monitor/plugins)\" ]; then\n    echo \"! Custom plugins detected - review compatibility\"\n    ls /opt/nginx-security-monitor/plugins\nfi\n\n# Create pre-upgrade backup\necho \"Creating pre-upgrade backup...\"\n/opt/nginx-security-monitor/scripts/backup_config.sh\n\necho \"Pre-upgrade check completed.\"\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#upgrade-script","title":"Upgrade Script","text":"<pre><code>#!/bin/bash\n# scripts/upgrade.sh\n\nset -e\n\nNEW_VERSION=\"$1\"\nif [ -z \"$NEW_VERSION\" ]; then\n    echo \"Usage: $0 &lt;new_version&gt;\"\n    exit 1\nfi\n\nINSTALL_DIR=\"/opt/nginx-security-monitor\"\nBACKUP_DIR=\"/var/backups/nginx-security/upgrade-$(date +%Y%m%d_%H%M%S)\"\n\necho \"Upgrading NGINX Security Monitor to version $NEW_VERSION\"\n\n# Pre-upgrade checks\necho \"Running pre-upgrade checks...\"\n$INSTALL_DIR/scripts/pre_upgrade_check.sh\n\n# Create upgrade backup\necho \"Creating upgrade backup...\"\nmkdir -p \"$BACKUP_DIR\"\ncp -r \"$INSTALL_DIR\" \"$BACKUP_DIR/nginx-security-monitor\"\ncp -r /etc/nginx-security \"$BACKUP_DIR/\"\n\n# Download new version\necho \"Downloading version $NEW_VERSION...\"\ncd /tmp\nwget \"https://github.com/nginx-security-monitor/releases/download/v$NEW_VERSION/nginx-security-monitor-$NEW_VERSION.tar.gz\"\ntar -xzf \"nginx-security-monitor-$NEW_VERSION.tar.gz\"\n\n# Stop service\necho \"Stopping service...\"\nsystemctl stop nginx-security-monitor\n\n# Install new version\necho \"Installing new version...\"\nrsync -av \"nginx-security-monitor-$NEW_VERSION/\" \"$INSTALL_DIR/\"\n\n# Run database migrations if needed\nif [ -f \"$INSTALL_DIR/scripts/migrate.py\" ]; then\n    echo \"Running database migrations...\"\n    python3 \"$INSTALL_DIR/scripts/migrate.py\"\nfi\n\n# Update configuration if needed\nif [ -f \"$INSTALL_DIR/scripts/update_config.py\" ]; then\n    echo \"Updating configuration...\"\n    python3 \"$INSTALL_DIR/scripts/update_config.py\" --version \"$NEW_VERSION\"\nfi\n\n# Install new dependencies\necho \"Installing dependencies...\"\npip install -r \"$INSTALL_DIR/requirements.txt\" --upgrade\n\n# Update systemd service if changed\nif ! cmp -s \"$INSTALL_DIR/systemd/nginx-security-monitor.service\" \"/etc/systemd/system/nginx-security-monitor.service\"; then\n    echo \"Updating systemd service...\"\n    cp \"$INSTALL_DIR/systemd/nginx-security-monitor.service\" /etc/systemd/system/\n    systemctl daemon-reload\nfi\n\n# Set permissions\nchown -R nginx-security:nginx-security \"$INSTALL_DIR\"\nchmod +x \"$INSTALL_DIR/nginx-security-monitor.sh\"\n\n# Start service\necho \"Starting service...\"\nsystemctl start nginx-security-monitor\n\n# Verify upgrade\nsleep 10\nif systemctl is-active --quiet nginx-security-monitor; then\n    new_version=$(cat \"$INSTALL_DIR/VERSION\")\n    echo \"Upgrade successful! New version: $new_version\"\n\n    # Test basic functionality\n    echo \"Testing basic functionality...\"\n    curl -s http://localhost:8080/health &gt; /dev/null\n    echo \"Health check passed.\"\n\nelse\n    echo \"Upgrade failed! Service is not running.\"\n    echo \"Restoring from backup...\"\n\n    systemctl stop nginx-security-monitor\n    rm -rf \"$INSTALL_DIR\"\n    cp -r \"$BACKUP_DIR/nginx-security-monitor\" \"$INSTALL_DIR\"\n    systemctl start nginx-security-monitor\n\n    echo \"Rollback completed. Check logs for details.\"\n    exit 1\nfi\n\n# Cleanup\nrm -rf \"/tmp/nginx-security-monitor-$NEW_VERSION\"\nrm -f \"/tmp/nginx-security-monitor-$NEW_VERSION.tar.gz\"\n\necho \"Upgrade completed successfully!\"\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#performance-monitoring","title":"\ud83d\udcc8 Performance Monitoring","text":""},{"location":"OPERATIONS_GUIDE/#metrics-collection","title":"Metrics Collection","text":""},{"location":"OPERATIONS_GUIDE/#system-metrics-script","title":"System Metrics Script","text":"<pre><code># scripts/collect_metrics.py\n#!/usr/bin/env python3\n\"\"\"Collect performance metrics for NGINX Security Monitor.\"\"\"\n\nimport psutil\nimport time\nimport json\nimport sqlite3\nfrom datetime import datetime\nfrom typing import Dict, Any\n\nclass MetricsCollector:\n    \"\"\"Collect and store performance metrics.\"\"\"\n\n    def __init__(self, db_path: str = '/var/lib/nginx-security/metrics.db'):\n        self.db_path = db_path\n        self._init_database()\n\n    def _init_database(self):\n        \"\"\"Initialize metrics database.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS metrics (\n                timestamp INTEGER PRIMARY KEY,\n                cpu_usage REAL,\n                memory_usage REAL,\n                disk_usage REAL,\n                network_bytes_sent INTEGER,\n                network_bytes_recv INTEGER,\n                process_count INTEGER,\n                response_time_avg REAL,\n                threats_per_minute REAL,\n                alerts_per_minute REAL\n            )\n        ''')\n\n        conn.commit()\n        conn.close()\n\n    def collect_system_metrics(self) -&gt; Dict[str, Any]:\n        \"\"\"Collect system-level metrics.\"\"\"\n        # CPU usage\n        cpu_percent = psutil.cpu_percent(interval=1)\n\n        # Memory usage\n        memory = psutil.virtual_memory()\n        memory_percent = memory.percent\n\n        # Disk usage for log directory\n        disk = psutil.disk_usage('/var/log/nginx-security')\n        disk_percent = (disk.used / disk.total) * 100\n\n        # Network stats\n        network = psutil.net_io_counters()\n\n        # Process count\n        process_count = len([p for p in psutil.process_iter() if 'nginx-security' in p.name()])\n\n        return {\n            'timestamp': int(time.time()),\n            'cpu_usage': cpu_percent,\n            'memory_usage': memory_percent,\n            'disk_usage': disk_percent,\n            'network_bytes_sent': network.bytes_sent,\n            'network_bytes_recv': network.bytes_recv,\n            'process_count': process_count\n        }\n\n    def collect_application_metrics(self) -&gt; Dict[str, Any]:\n        \"\"\"Collect application-specific metrics.\"\"\"\n        # This would integrate with the application's metrics endpoint\n        try:\n            import requests\n            response = requests.get('http://localhost:8080/metrics', timeout=5)\n            if response.status_code == 200:\n                return response.json()\n        except:\n            pass\n\n        return {\n            'response_time_avg': 0,\n            'threats_per_minute': 0,\n            'alerts_per_minute': 0\n        }\n\n    def store_metrics(self, metrics: Dict[str, Any]):\n        \"\"\"Store metrics in database.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            INSERT INTO metrics VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        ''', (\n            metrics.get('timestamp'),\n            metrics.get('cpu_usage'),\n            metrics.get('memory_usage'), \n            metrics.get('disk_usage'),\n            metrics.get('network_bytes_sent'),\n            metrics.get('network_bytes_recv'),\n            metrics.get('process_count'),\n            metrics.get('response_time_avg'),\n            metrics.get('threats_per_minute'),\n            metrics.get('alerts_per_minute')\n        ))\n\n        conn.commit()\n        conn.close()\n\n    def get_metrics_summary(self, hours: int = 24) -&gt; Dict[str, Any]:\n        \"\"\"Get metrics summary for specified time period.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        cutoff_time = int(time.time()) - (hours * 3600)\n\n        cursor.execute('''\n            SELECT \n                AVG(cpu_usage) as avg_cpu,\n                MAX(cpu_usage) as max_cpu,\n                AVG(memory_usage) as avg_memory,\n                MAX(memory_usage) as max_memory,\n                AVG(disk_usage) as avg_disk,\n                MAX(disk_usage) as max_disk,\n                AVG(response_time_avg) as avg_response_time,\n                SUM(threats_per_minute) as total_threats,\n                SUM(alerts_per_minute) as total_alerts,\n                COUNT(*) as data_points\n            FROM metrics \n            WHERE timestamp &gt; ?\n        ''', (cutoff_time,))\n\n        result = cursor.fetchone()\n        conn.close()\n\n        if result:\n            return {\n                'period_hours': hours,\n                'avg_cpu_usage': round(result[0] or 0, 2),\n                'max_cpu_usage': round(result[1] or 0, 2),\n                'avg_memory_usage': round(result[2] or 0, 2),\n                'max_memory_usage': round(result[3] or 0, 2),\n                'avg_disk_usage': round(result[4] or 0, 2),\n                'max_disk_usage': round(result[5] or 0, 2),\n                'avg_response_time': round(result[6] or 0, 2),\n                'total_threats': int(result[7] or 0),\n                'total_alerts': int(result[8] or 0),\n                'data_points': result[9]\n            }\n\n        return {}\n\nif __name__ == \"__main__\":\n    collector = MetricsCollector()\n\n    # Collect current metrics\n    system_metrics = collector.collect_system_metrics()\n    app_metrics = collector.collect_application_metrics()\n\n    # Combine metrics\n    all_metrics = {**system_metrics, **app_metrics}\n\n    # Store metrics\n    collector.store_metrics(all_metrics)\n\n    # Print current metrics\n    print(json.dumps(all_metrics, indent=2))\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#performance-alerting","title":"Performance Alerting","text":"<pre><code># config/performance_alerts.yaml\nperformance_monitoring:\n  enabled: true\n  collection_interval: 60  # seconds\n\n  thresholds:\n    cpu_usage:\n      warning: 70\n      critical: 90\n\n    memory_usage:\n      warning: 80\n      critical: 95\n\n    disk_usage:\n      warning: 80\n      critical: 90\n\n    response_time:\n      warning: 1000  # ms\n      critical: 5000\n\n    error_rate:\n      warning: 5    # percent\n      critical: 10\n\n  alerts:\n    enabled: true\n    cooldown_minutes: 15  # Minimum time between similar alerts\n    channels: [\"email\", \"slack\"]\n</code></pre>"},{"location":"OPERATIONS_GUIDE/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Installation Guide - Initial setup and installation</li> <li>Configuration Guide - Configuration options</li> <li>Troubleshooting Guide - Problem resolution</li> <li>Performance Tuning - Optimization strategies</li> <li>Security Features - Security considerations</li> </ul> <p>This operations guide is part of the NGINX Security Monitor documentation. For updates and contributions, see CONTRIBUTING.md.</p>"},{"location":"PATTERN_DETECTION/","title":"\ud83d\udd0d Pattern Detection Guide","text":"<p>Comprehensive guide to understanding, customizing, and extending the pattern detection system in NGINX Security Monitor.</p>"},{"location":"PATTERN_DETECTION/#overview","title":"\ud83d\udccb Overview","text":"<p>The pattern detection system is the core of NGINX Security Monitor, analyzing NGINX log entries in real-time to identify potential security threats. It uses a combination of regex patterns, frequency analysis, and behavioral detection to identify various attack types.</p>"},{"location":"PATTERN_DETECTION/#built-in-detection-patterns","title":"\ud83c\udfaf Built-in Detection Patterns","text":""},{"location":"PATTERN_DETECTION/#sql-injection-detection","title":"SQL Injection Detection","text":"<pre><code>{\n  \"sql_injection\": {\n    \"enabled\": true,\n    \"severity\": \"high\",\n    \"description\": \"Detects SQL injection attempts\",\n    \"patterns\": [\n      \"(?i)(union.*select|select.*from|insert.*into|delete.*from)\",\n      \"(?i)(or\\\\s+1=1|and\\\\s+1=1|'\\\\s*or\\\\s*')\",\n      \"(?i)(exec\\\\s*\\\\(|sp_|xp_)\",\n      \"(?i)(concat\\\\s*\\\\(|char\\\\s*\\\\(|ascii\\\\s*\\\\()\",\n      \"(?i)(waitfor\\\\s+delay|benchmark\\\\s*\\\\()\",\n      \"(?i)(information_schema|mysql\\\\.|sys\\\\.)\"\n    ],\n    \"threshold\": 1,\n    \"window\": 60,\n    \"action\": \"alert_and_log\"\n  }\n}\n</code></pre> <p>What it catches: - Classic SQL injection: <code>' OR '1'='1</code> - UNION-based attacks: <code>UNION SELECT * FROM users</code> - Blind SQL injection: <code>'; WAITFOR DELAY '00:00:05'--</code> - Information gathering: <code>' AND (SELECT * FROM information_schema.tables)</code></p>"},{"location":"PATTERN_DETECTION/#cross-site-scripting-xss-detection","title":"Cross-Site Scripting (XSS) Detection","text":"<pre><code>{\n  \"xss_attacks\": {\n    \"enabled\": true,\n    \"severity\": \"medium\",\n    \"description\": \"Cross-site scripting detection\",\n    \"patterns\": [\n      \"(?i)&lt;script[^&gt;]*&gt;.*?&lt;/script&gt;\",\n      \"(?i)javascript:\",\n      \"(?i)on(load|click|mouseover|error|focus)\\\\s*=\",\n      \"(?i)(alert\\\\s*\\\\(|confirm\\\\s*\\\\(|prompt\\\\s*\\\\()\",\n      \"(?i)&lt;iframe[^&gt;]*src\",\n      \"(?i)expression\\\\s*\\\\(\"\n    ],\n    \"threshold\": 1,\n    \"window\": 60\n  }\n}\n</code></pre> <p>What it catches: - Script tags: <code>&lt;script&gt;alert('xss')&lt;/script&gt;</code> - Event handlers: <code>&lt;img onerror=\"alert('xss')\" src=x&gt;</code> - JavaScript URLs: <code>&lt;a href=\"javascript:alert('xss')\"&gt;</code> - CSS expressions: <code>style=\"expression(alert('xss'))\"</code></p>"},{"location":"PATTERN_DETECTION/#ddos-and-high-volume-attacks","title":"DDoS and High-Volume Attacks","text":"<pre><code>{\n  \"ddos_detection\": {\n    \"enabled\": true,\n    \"severity\": \"high\",\n    \"description\": \"DDoS and high-volume attacks\",\n    \"type\": \"frequency\",\n    \"threshold\": 100,\n    \"window\": 60,\n    \"per_ip\": true,\n    \"sliding_window\": true\n  }\n}\n</code></pre> <p>What it catches: - Rapid requests from single IP - Distributed high-volume attacks - Resource exhaustion attempts - Bot traffic spikes</p>"},{"location":"PATTERN_DETECTION/#brute-force-detection","title":"Brute Force Detection","text":"<pre><code>{\n  \"brute_force\": {\n    \"enabled\": true,\n    \"severity\": \"medium\",\n    \"description\": \"Brute force login attempts\",\n    \"patterns\": [\n      \"POST.*/(login|signin|auth|wp-login)\",\n      \"POST.*password=\",\n      \"401.*Unauthorized\",\n      \"403.*Forbidden\"\n    ],\n    \"threshold\": 5,\n    \"window\": 300,\n    \"per_ip\": true\n  }\n}\n</code></pre> <p>What it catches: - Multiple failed login attempts - Password spraying attacks - Credential stuffing - Authentication bypass attempts</p>"},{"location":"PATTERN_DETECTION/#directory-traversal-detection","title":"Directory Traversal Detection","text":"<pre><code>{\n  \"directory_traversal\": {\n    \"enabled\": true,\n    \"severity\": \"medium\",\n    \"description\": \"Path traversal and directory attacks\",\n    \"patterns\": [\n      \"(?i)(\\\\.\\\\./|\\\\.\\\\.\\\\\\\\)\",\n      \"(?i)(/etc/passwd|/etc/shadow|/etc/hosts)\",\n      \"(?i)(/proc/|/sys/|/dev/)\",\n      \"(?i)(boot\\\\.ini|win\\\\.ini|system32)\",\n      \"(?i)(%2e%2e%2f|%2e%2e\\\\\\\\|%c0%af)\"\n    ],\n    \"threshold\": 1,\n    \"window\": 60\n  }\n}\n</code></pre> <p>What it catches: - Path traversal: <code>../../../etc/passwd</code> - Windows traversal: <code>..\\..\\..\\windows\\system32</code> - URL encoded traversal: <code>%2e%2e%2f</code> - System file access attempts</p>"},{"location":"PATTERN_DETECTION/#suspicious-user-agents","title":"Suspicious User Agents","text":"<pre><code>{\n  \"suspicious_user_agents\": {\n    \"enabled\": true,\n    \"severity\": \"low\",\n    \"description\": \"Detects suspicious or malicious user agents\",\n    \"patterns\": [\n      \"(?i)(sqlmap|nmap|nikto|dirb|gobuster)\",\n      \"(?i)(burp|owasp|zap|w3af)\",\n      \"(?i)(python-requests|curl|wget)(?!.*bot)\",\n      \"(?i)(masscan|nessus|openvas)\",\n      \"(?i)(bot|crawler|spider)(?!.*(google|bing|yahoo))\"\n    ],\n    \"threshold\": 3,\n    \"window\": 300\n  }\n}\n</code></pre> <p>What it catches: - Security scanners: <code>sqlmap/1.0</code>, <code>Nikto/2.1</code> - Penetration testing tools: <code>Burp Suite</code>, <code>OWASP ZAP</code> - Automated scripts: <code>python-requests/2.0</code> - Unknown bots and crawlers</p>"},{"location":"PATTERN_DETECTION/#creating-custom-patterns","title":"\ud83d\udee0 Creating Custom Patterns","text":""},{"location":"PATTERN_DETECTION/#basic-custom-pattern","title":"Basic Custom Pattern","text":"<pre><code>{\n  \"custom_wordpress_attacks\": {\n    \"enabled\": true,\n    \"severity\": \"medium\",\n    \"description\": \"WordPress-specific attack patterns\",\n    \"patterns\": [\n      \"/wp-admin/admin-ajax\\\\.php.*action=\",\n      \"/wp-content/plugins/.*\\\\.php\\\\?\",\n      \"/wp-includes/.*\\\\.(php|inc)\\\\?\",\n      \"wp-config\\\\.php\",\n      \"/xmlrpc\\\\.php.*POST\"\n    ],\n    \"threshold\": 5,\n    \"window\": 300,\n    \"per_ip\": true\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#advanced-custom-pattern-with-multiple-conditions","title":"Advanced Custom Pattern with Multiple Conditions","text":"<pre><code>{\n  \"api_abuse_detection\": {\n    \"enabled\": true,\n    \"severity\": \"medium\", \n    \"description\": \"API endpoint abuse detection\",\n    \"conditions\": {\n      \"all_of\": [\n        {\n          \"pattern\": \"/api/v[0-9]+/\",\n          \"field\": \"request_uri\"\n        },\n        {\n          \"pattern\": \"(GET|POST|PUT|DELETE)\",\n          \"field\": \"method\"\n        }\n      ],\n      \"frequency\": {\n        \"threshold\": 50,\n        \"window\": 60,\n        \"per_ip\": true\n      }\n    },\n    \"whitelist\": {\n      \"user_agents\": [\"MyApp/1.0\", \"InternalService/2.1\"],\n      \"ips\": [\"192.168.1.100\", \"10.0.0.0/8\"]\n    }\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#time-based-pattern-detection","title":"Time-Based Pattern Detection","text":"<pre><code>{\n  \"off_hours_admin_access\": {\n    \"enabled\": true,\n    \"severity\": \"low\",\n    \"description\": \"Administrative access during off-hours\",\n    \"patterns\": [\n      \"/admin/\",\n      \"/dashboard/\",\n      \"/management/\"\n    ],\n    \"time_conditions\": {\n      \"excluded_hours\": [\"22:00-06:00\"],\n      \"excluded_days\": [\"saturday\", \"sunday\"],\n      \"timezone\": \"UTC\"\n    },\n    \"threshold\": 1,\n    \"window\": 3600\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#pattern-configuration-options","title":"\ud83c\udf9b Pattern Configuration Options","text":""},{"location":"PATTERN_DETECTION/#basic-pattern-options","title":"Basic Pattern Options","text":"<pre><code>{\n  \"pattern_name\": {\n    \"enabled\": true,                    # Enable/disable pattern\n    \"severity\": \"high|medium|low\",      # Alert severity level\n    \"description\": \"Human readable description\",\n    \"patterns\": [\"regex1\", \"regex2\"],   # List of regex patterns\n    \"threshold\": 5,                     # Number of matches to trigger\n    \"window\": 300,                      # Time window in seconds\n    \"per_ip\": true,                     # Count per IP address\n    \"sliding_window\": false,            # Use sliding vs fixed window\n    \"action\": \"alert_and_log\"           # Action to take on match\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#advanced-detection-types","title":"Advanced Detection Types","text":"<p>Frequency-Based Detection: <pre><code>{\n  \"high_frequency_requests\": {\n    \"type\": \"frequency\",\n    \"threshold\": 100,\n    \"window\": 60,\n    \"per_ip\": true,\n    \"baseline\": {\n      \"enabled\": true,\n      \"learning_period\": 7200,  # 2 hours\n      \"deviation_threshold\": 3.0\n    }\n  }\n}\n</code></pre></p> <p>Anomaly Detection: <pre><code>{\n  \"unusual_response_sizes\": {\n    \"type\": \"anomaly\",\n    \"field\": \"response_size\",\n    \"algorithm\": \"statistical\",\n    \"parameters\": {\n      \"window_size\": 1000,\n      \"threshold\": 2.5,\n      \"min_samples\": 50\n    }\n  }\n}\n</code></pre></p> <p>Geographic Pattern Detection: <pre><code>{\n  \"geographic_anomaly\": {\n    \"type\": \"geographic\",\n    \"description\": \"Detect access from unusual countries\",\n    \"allowed_countries\": [\"US\", \"CA\", \"GB\"],\n    \"suspicious_countries\": [\"CN\", \"RU\", \"KP\"],\n    \"action\": \"alert_high_risk_countries\"\n  }\n}\n</code></pre></p>"},{"location":"PATTERN_DETECTION/#pattern-tuning-and-optimization","title":"\ud83d\udd27 Pattern Tuning and Optimization","text":""},{"location":"PATTERN_DETECTION/#threshold-tuning","title":"Threshold Tuning","text":"<pre><code># Analyze pattern performance\npython -m src.pattern_detector --analyze-patterns --days 7\n\n# Output example:\n# Pattern: sql_injection\n#   True Positives: 45\n#   False Positives: 2\n#   Current Threshold: 1\n#   Recommended Threshold: 1\n#   Precision: 95.7%\n</code></pre>"},{"location":"PATTERN_DETECTION/#performance-optimization","title":"Performance Optimization","text":"<pre><code>{\n  \"optimized_pattern\": {\n    \"patterns\": [\n      \"(?i)(?:union.*select|select.*from)\"  # Use non-capturing groups\n    ],\n    \"compiled\": true,                        # Pre-compile regex\n    \"multiline\": false,                      # Disable multiline if not needed\n    \"cache_results\": true,                   # Cache pattern matches\n    \"max_string_length\": 2048               # Limit string processing\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#pattern-priority-and-ordering","title":"Pattern Priority and Ordering","text":"<pre><code>{\n  \"pattern_priorities\": {\n    \"sql_injection\": 100,        # Highest priority\n    \"xss_attacks\": 90,\n    \"ddos_detection\": 80,\n    \"brute_force\": 70,\n    \"directory_traversal\": 60,\n    \"suspicious_user_agents\": 10  # Lowest priority\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#testing-custom-patterns","title":"\ud83e\uddea Testing Custom Patterns","text":""},{"location":"PATTERN_DETECTION/#pattern-validation-tool","title":"Pattern Validation Tool","text":"<pre><code># Test a single pattern\npython -m src.pattern_detector --test-pattern \\\n  --pattern \"(?i)(union.*select)\" \\\n  --test-string \"GET /search?q=1' UNION SELECT * FROM users-- HTTP/1.1\"\n\n# Expected output:\n# \u2705 Pattern matched!\n# Match: \"UNION SELECT\"\n# Position: 19-31\n</code></pre>"},{"location":"PATTERN_DETECTION/#bulk-pattern-testing","title":"Bulk Pattern Testing","text":"<pre><code># Test all patterns against sample logs\npython -m src.pattern_detector --validate-patterns \\\n  --config config/patterns.json \\\n  --test-logs tests/sample_logs/\n\n# Generate test data\npython scripts/generate_test_attacks.py --output test_attacks.log\n</code></pre>"},{"location":"PATTERN_DETECTION/#pattern-performance-benchmarking","title":"Pattern Performance Benchmarking","text":"<pre><code># Benchmark pattern performance\npython -m src.pattern_detector --benchmark \\\n  --patterns config/patterns.json \\\n  --log-file /var/log/nginx/access.log \\\n  --duration 60\n\n# Output:\n# Pattern Performance Report:\n# sql_injection: 1,234 checks/sec, 0.8ms avg\n# xss_attacks: 2,456 checks/sec, 0.4ms avg\n# ddos_detection: 5,678 checks/sec, 0.2ms avg\n</code></pre>"},{"location":"PATTERN_DETECTION/#pattern-analytics-and-reporting","title":"\ud83d\udcca Pattern Analytics and Reporting","text":""},{"location":"PATTERN_DETECTION/#detection-statistics","title":"Detection Statistics","text":"<pre><code># Generate pattern effectiveness report\npython -m src.analytics --pattern-report --days 30\n\n# View detection trends\npython -m src.analytics --trend-analysis --pattern sql_injection\n</code></pre>"},{"location":"PATTERN_DETECTION/#false-positive-analysis","title":"False Positive Analysis","text":"<pre><code>{\n  \"whitelist_rules\": {\n    \"sql_injection_exceptions\": {\n      \"patterns\": [\"(?i)(union.*select)\"],\n      \"exceptions\": [\n        {\n          \"condition\": \"user_agent contains 'MyLegitimateApp'\",\n          \"action\": \"ignore\"\n        },\n        {\n          \"condition\": \"ip in ['192.168.1.100']\",\n          \"action\": \"log_only\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#dynamic-pattern-updates","title":"\ud83d\udd04 Dynamic Pattern Updates","text":""},{"location":"PATTERN_DETECTION/#hot-pattern-reloading","title":"Hot Pattern Reloading","text":"<pre><code># Reload patterns without restarting service\nsudo systemctl reload nginx-security-monitor\n\n# Or via API\ncurl -X POST http://localhost:8080/api/reload-patterns \\\n  -H \"Authorization: Bearer your-api-token\"\n</code></pre>"},{"location":"PATTERN_DETECTION/#pattern-ab-testing","title":"Pattern A/B Testing","text":"<pre><code>{\n  \"experimental_patterns\": {\n    \"new_sql_injection_v2\": {\n      \"enabled\": true,\n      \"experimental\": true,\n      \"rollout_percentage\": 25,  # Only apply to 25% of traffic\n      \"patterns\": [\"improved_regex_here\"],\n      \"compare_to\": \"sql_injection\"\n    }\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#pattern-specific-mitigation","title":"\ud83d\udea8 Pattern-Specific Mitigation","text":""},{"location":"PATTERN_DETECTION/#pattern-triggered-actions","title":"Pattern-Triggered Actions","text":"<pre><code>{\n  \"sql_injection\": {\n    \"patterns\": [\"(?i)(union.*select)\"],\n    \"actions\": {\n      \"immediate\": [\n        \"log_detailed\",\n        \"alert_security_team\", \n        \"block_ip_temporary\"\n      ],\n      \"escalation\": {\n        \"threshold\": 3,\n        \"window\": 3600,\n        \"actions\": [\"block_ip_permanent\", \"alert_admin\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#adaptive-thresholds","title":"Adaptive Thresholds","text":"<pre><code>{\n  \"adaptive_thresholds\": {\n    \"enabled\": true,\n    \"learning_period\": 86400,  # 24 hours\n    \"patterns\": {\n      \"brute_force\": {\n        \"base_threshold\": 5,\n        \"max_threshold\": 20,\n        \"adaptation_rate\": 0.1\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"PATTERN_DETECTION/#best-practices-for-pattern-development","title":"\ud83d\udcda Best Practices for Pattern Development","text":""},{"location":"PATTERN_DETECTION/#1-pattern-design-principles","title":"1. Pattern Design Principles","text":"<ul> <li>Specific: Minimize false positives</li> <li>Efficient: Use optimized regex patterns</li> <li>Maintainable: Clear descriptions and comments</li> <li>Testable: Include test cases</li> </ul>"},{"location":"PATTERN_DETECTION/#2-regex-optimization-tips","title":"2. Regex Optimization Tips","text":"<pre><code>// \u274c Inefficient\n\".*admin.*password.*\"\n\n// \u2705 Efficient  \n\"admin[^\\\\s]*password|password[^\\\\s]*admin\"\n\n// \u274c Catastrophic backtracking risk\n\"(a+)+\"\n\n// \u2705 Safe pattern\n\"a+\"\n</code></pre>"},{"location":"PATTERN_DETECTION/#3-testing-strategy","title":"3. Testing Strategy","text":"<pre><code># 1. Unit test individual patterns\npytest tests/test_patterns.py::test_sql_injection_detection\n\n# 2. Integration test with real logs\npython -m src.pattern_detector --test-integration\n\n# 3. Performance test under load\npython -m src.load_test --pattern-stress-test\n\n# 4. False positive analysis\npython -m src.analytics --false-positive-report\n</code></pre>"},{"location":"PATTERN_DETECTION/#troubleshooting-pattern-issues","title":"\ud83c\udd98 Troubleshooting Pattern Issues","text":""},{"location":"PATTERN_DETECTION/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>Issue: Pattern not detecting attacks <pre><code># Debug pattern matching\npython -m src.pattern_detector --debug \\\n  --pattern sql_injection \\\n  --input \"test string here\"\n</code></pre></p> <p>Issue: Too many false positives <pre><code># Analyze false positives\npython -m src.analytics --false-positive-analysis \\\n  --pattern sql_injection --days 7\n</code></pre></p> <p>Issue: Poor performance <pre><code># Profile pattern performance\npython -m src.pattern_detector --profile \\\n  --config config/patterns.json\n</code></pre></p>"},{"location":"PATTERN_DETECTION/#related-documentation","title":"\ud83d\udcd6 Related Documentation","text":"<ul> <li>CONFIGURATION.md - Configuration guide</li> <li>ALERT_SYSTEMS.md - Alert configuration</li> <li>PLUGIN_DEVELOPMENT.md - Custom plugin development</li> <li>API_REFERENCE.md - API documentation</li> </ul>"},{"location":"PERFORMANCE_TUNING/","title":"Performance Tuning","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"PERFORMANCE_TUNING/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"PERFORMANCE_TUNING/#todo","title":"TODO","text":"<ul> <li> Add content for Performance Tuning</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"PERFORMANCE_TUNING/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"PLUGIN_DEVELOPMENT/","title":"\ud83d\udd0c Plugin Development Guide - NGINX Security Monitor","text":""},{"location":"PLUGIN_DEVELOPMENT/#overview","title":"\ud83c\udfaf Overview","text":"<p>The NGINX Security Monitor features a flexible plugin architecture that allows you to extend its capabilities with custom detection algorithms, mitigation strategies, and integration modules. This guide covers everything you need to know about developing, testing, and deploying custom plugins.</p>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-architecture","title":"\ud83c\udfd7\ufe0f Plugin Architecture","text":""},{"location":"PLUGIN_DEVELOPMENT/#plugin-types","title":"Plugin Types","text":"<p>The system supports several types of plugins:</p> Plugin Type Purpose Interface Detection Custom threat detection logic <code>DetectionPlugin</code> Mitigation Custom mitigation strategies <code>MitigationPlugin</code> Alert Custom notification channels <code>AlertPlugin</code> Parser Custom log format parsers <code>ParserPlugin</code> Integration External system integrations <code>IntegrationPlugin</code> Filter Request/response filtering <code>FilterPlugin</code>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-lifecycle","title":"Plugin Lifecycle","text":"<ol> <li>Discovery \u2192 Plugins are discovered in configured directories</li> <li>Loading \u2192 Plugin modules are imported and validated</li> <li>Registration \u2192 Plugins register their capabilities</li> <li>Initialization \u2192 Plugins are initialized with configuration</li> <li>Execution \u2192 Plugins are called during processing</li> <li>Cleanup \u2192 Plugins are properly shut down</li> </ol>"},{"location":"PLUGIN_DEVELOPMENT/#detection-plugins","title":"\ud83d\udd0d Detection Plugins","text":""},{"location":"PLUGIN_DEVELOPMENT/#basic-detection-plugin","title":"Basic Detection Plugin","text":"<p>Create a simple detection plugin:</p> <pre><code># plugins/custom_detector.py\nfrom src.plugin_system import DetectionPlugin\nfrom typing import Dict, List, Any\nimport re\n\nclass CustomThreatDetector(DetectionPlugin):\n    \"\"\"Custom threat detection plugin example.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        super().__init__(config)\n        self.name = \"custom_threat_detector\"\n        self.version = \"1.0.0\"\n        self.description = \"Detects custom threat patterns\"\n\n        # Load configuration\n        self.patterns = config.get('patterns', [])\n        self.severity = config.get('severity', 'medium')\n        self.confidence_threshold = config.get('confidence_threshold', 0.7)\n\n        # Compile regex patterns for performance\n        self.compiled_patterns = [\n            re.compile(pattern, re.IGNORECASE) \n            for pattern in self.patterns\n        ]\n\n    def detect(self, log_entry: Dict[str, Any]) -&gt; List[Dict[str, Any]]:\n        \"\"\"\n        Detect threats in log entry.\n\n        Args:\n            log_entry: Parsed log entry containing fields like:\n                - ip: source IP address\n                - url: requested URL\n                - method: HTTP method\n                - user_agent: user agent string\n                - headers: HTTP headers\n\n        Returns:\n            List of threat detections with metadata\n        \"\"\"\n        threats = []\n\n        # Extract relevant fields\n        url = log_entry.get('url', '')\n        user_agent = log_entry.get('user_agent', '')\n        method = log_entry.get('method', '')\n\n        # Check patterns against URL\n        for i, pattern in enumerate(self.compiled_patterns):\n            if pattern.search(url):\n                confidence = self._calculate_confidence(log_entry, pattern)\n\n                if confidence &gt;= self.confidence_threshold:\n                    threats.append({\n                        'threat_type': 'custom_threat',\n                        'severity': self.severity,\n                        'confidence': confidence,\n                        'description': f'Custom pattern {i+1} detected in URL',\n                        'matched_pattern': self.patterns[i],\n                        'matched_field': 'url',\n                        'matched_value': url,\n                        'metadata': {\n                            'pattern_index': i,\n                            'detection_method': 'regex',\n                            'plugin_name': self.name\n                        }\n                    })\n\n        # Additional detection logic for user agent\n        threats.extend(self._check_user_agent(log_entry))\n\n        return threats\n\n    def _calculate_confidence(self, log_entry: Dict[str, Any], pattern: re.Pattern) -&gt; float:\n        \"\"\"Calculate confidence score for detection.\"\"\"\n        confidence = 0.5  # Base confidence\n\n        # Increase confidence based on additional factors\n        if log_entry.get('status', 0) in [400, 401, 403, 404]:\n            confidence += 0.2\n\n        if 'bot' in log_entry.get('user_agent', '').lower():\n            confidence += 0.1\n\n        if log_entry.get('method') in ['POST', 'PUT', 'DELETE']:\n            confidence += 0.1\n\n        return min(confidence, 1.0)\n\n    def _check_user_agent(self, log_entry: Dict[str, Any]) -&gt; List[Dict[str, Any]]:\n        \"\"\"Check user agent for suspicious patterns.\"\"\"\n        threats = []\n        user_agent = log_entry.get('user_agent', '').lower()\n\n        suspicious_agents = ['sqlmap', 'nikto', 'nmap', 'masscan']\n\n        for agent in suspicious_agents:\n            if agent in user_agent:\n                threats.append({\n                    'threat_type': 'malicious_user_agent',\n                    'severity': 'high',\n                    'confidence': 0.9,\n                    'description': f'Malicious user agent detected: {agent}',\n                    'matched_pattern': agent,\n                    'matched_field': 'user_agent',\n                    'matched_value': log_entry.get('user_agent'),\n                    'metadata': {\n                        'detection_method': 'string_match',\n                        'plugin_name': self.name\n                    }\n                })\n\n        return threats\n\n    def get_info(self) -&gt; Dict[str, Any]:\n        \"\"\"Return plugin information.\"\"\"\n        return {\n            'name': self.name,\n            'version': self.version,\n            'description': self.description,\n            'type': 'detection',\n            'patterns_count': len(self.patterns),\n            'capabilities': ['url_analysis', 'user_agent_analysis']\n        }\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#advanced-detection-plugin","title":"Advanced Detection Plugin","text":"<p>More sophisticated detection with machine learning:</p> <pre><code># plugins/ml_detector.py\nfrom src.plugin_system import DetectionPlugin\nimport joblib\nimport numpy as np\nfrom typing import Dict, List, Any\n\nclass MLThreatDetector(DetectionPlugin):\n    \"\"\"Machine learning-based threat detection plugin.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        super().__init__(config)\n        self.name = \"ml_threat_detector\"\n        self.version = \"2.0.0\"\n\n        # Load pre-trained model\n        model_path = config.get('model_path', 'models/threat_detector.joblib')\n        self.model = joblib.load(model_path)\n\n        # Load feature extractor\n        self.feature_extractor = self._init_feature_extractor()\n\n        # Configuration\n        self.threshold = config.get('threshold', 0.8)\n\n    def detect(self, log_entry: Dict[str, Any]) -&gt; List[Dict[str, Any]]:\n        \"\"\"ML-based threat detection.\"\"\"\n        threats = []\n\n        try:\n            # Extract features\n            features = self.feature_extractor.extract(log_entry)\n\n            # Predict threat probability\n            threat_prob = self.model.predict_proba([features])[0][1]\n\n            if threat_prob &gt;= self.threshold:\n                # Get feature importance for explanation\n                feature_importance = self._get_feature_importance(features)\n\n                threats.append({\n                    'threat_type': 'ml_detected_threat',\n                    'severity': self._map_probability_to_severity(threat_prob),\n                    'confidence': threat_prob,\n                    'description': f'ML model detected threat (probability: {threat_prob:.3f})',\n                    'metadata': {\n                        'model_version': self.version,\n                        'feature_importance': feature_importance,\n                        'detection_method': 'machine_learning'\n                    }\n                })\n\n        except Exception as e:\n            # Log error but don't break the detection pipeline\n            self.logger.error(f\"ML detection error: {e}\")\n\n        return threats\n\n    def _init_feature_extractor(self):\n        \"\"\"Initialize feature extraction pipeline.\"\"\"\n        from sklearn.feature_extraction.text import TfidfVectorizer\n        from sklearn.preprocessing import StandardScaler\n\n        return FeatureExtractor()\n\n    def _map_probability_to_severity(self, prob: float) -&gt; str:\n        \"\"\"Map threat probability to severity level.\"\"\"\n        if prob &gt;= 0.95:\n            return 'critical'\n        elif prob &gt;= 0.9:\n            return 'high'\n        elif prob &gt;= 0.8:\n            return 'medium'\n        else:\n            return 'low'\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#mitigation-plugins","title":"\ud83d\udee1\ufe0f Mitigation Plugins","text":""},{"location":"PLUGIN_DEVELOPMENT/#basic-mitigation-plugin","title":"Basic Mitigation Plugin","text":"<pre><code># plugins/custom_mitigation.py\nfrom src.plugin_system import MitigationPlugin\nfrom typing import Dict, Any\nimport requests\nimport subprocess\n\nclass CustomMitigationPlugin(MitigationPlugin):\n    \"\"\"Custom mitigation strategy plugin.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        super().__init__(config)\n        self.name = \"custom_mitigation\"\n        self.version = \"1.0.0\"\n\n        # Configuration\n        self.api_endpoint = config.get('api_endpoint')\n        self.api_token = config.get('api_token')\n        self.timeout = config.get('timeout', 30)\n\n    def can_handle(self, threat: Dict[str, Any]) -&gt; bool:\n        \"\"\"Check if this plugin can handle the threat.\"\"\"\n        supported_types = ['custom_threat', 'brute_force', 'sql_injection']\n        return threat.get('threat_type') in supported_types\n\n    def mitigate(self, threat: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Execute mitigation strategy.\"\"\"\n        result = {\n            'action_taken': 'none',\n            'success': False,\n            'details': {},\n            'timestamp': self._get_timestamp()\n        }\n\n        try:\n            threat_type = threat.get('threat_type')\n            source_ip = threat.get('source_ip')\n            severity = threat.get('severity')\n\n            # Choose mitigation strategy based on threat type\n            if threat_type == 'brute_force':\n                result = self._handle_brute_force(threat)\n            elif threat_type == 'sql_injection':\n                result = self._handle_sql_injection(threat)\n            elif threat_type == 'custom_threat':\n                result = self._handle_custom_threat(threat)\n\n        except Exception as e:\n            result['details']['error'] = str(e)\n            self.logger.error(f\"Mitigation error: {e}\")\n\n        return result\n\n    def _handle_brute_force(self, threat: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Handle brute force attacks.\"\"\"\n        source_ip = threat.get('source_ip')\n\n        # Block IP for 1 hour\n        success = self._block_ip(source_ip, duration=3600)\n\n        return {\n            'action_taken': 'ip_block',\n            'success': success,\n            'details': {\n                'method': 'iptables',\n                'duration': 3600,\n                'target': source_ip\n            }\n        }\n\n    def _handle_sql_injection(self, threat: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Handle SQL injection attempts.\"\"\"\n        source_ip = threat.get('source_ip')\n\n        # Immediate permanent block for SQL injection\n        success = self._block_ip(source_ip, duration='permanent')\n\n        # Also notify external security system\n        external_response = self._notify_external_system(threat)\n\n        return {\n            'action_taken': 'permanent_block_and_notify',\n            'success': success,\n            'details': {\n                'method': 'iptables',\n                'duration': 'permanent',\n                'target': source_ip,\n                'external_notification': external_response\n            }\n        }\n\n    def _block_ip(self, ip: str, duration: int = 3600) -&gt; bool:\n        \"\"\"Block IP using iptables.\"\"\"\n        try:\n            if duration == 'permanent':\n                cmd = f\"iptables -I INPUT -s {ip} -j DROP\"\n            else:\n                # Use at command for temporary blocking\n                cmd = f\"echo 'iptables -D INPUT -s {ip} -j DROP' | at now + {duration} seconds\"\n                subprocess.run(f\"iptables -I INPUT -s {ip} -j DROP\", shell=True, check=True)\n\n            subprocess.run(cmd, shell=True, check=True)\n            return True\n        except subprocess.CalledProcessError as e:\n            self.logger.error(f\"Failed to block IP {ip}: {e}\")\n            return False\n\n    def _notify_external_system(self, threat: Dict[str, Any]) -&gt; bool:\n        \"\"\"Notify external security system.\"\"\"\n        if not self.api_endpoint:\n            return False\n\n        try:\n            response = requests.post(\n                f\"{self.api_endpoint}/threats\",\n                json=threat,\n                headers={'Authorization': f'Bearer {self.api_token}'},\n                timeout=self.timeout\n            )\n            return response.status_code == 200\n        except requests.RequestException as e:\n            self.logger.error(f\"Failed to notify external system: {e}\")\n            return False\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#alert-plugins","title":"\ud83d\udce7 Alert Plugins","text":""},{"location":"PLUGIN_DEVELOPMENT/#custom-alert-channel-plugin","title":"Custom Alert Channel Plugin","text":"<pre><code># plugins/custom_alert.py\nfrom src.plugin_system import AlertPlugin\nimport requests\nfrom typing import Dict, Any\n\nclass CustomAlertPlugin(AlertPlugin):\n    \"\"\"Custom alert channel plugin (e.g., for Microsoft Teams).\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        super().__init__(config)\n        self.name = \"teams_alert\"\n        self.webhook_url = config.get('webhook_url')\n        self.timeout = config.get('timeout', 30)\n\n    def send_alert(self, alert: Dict[str, Any]) -&gt; bool:\n        \"\"\"Send alert to Microsoft Teams.\"\"\"\n        try:\n            # Format message for Teams\n            teams_message = self._format_teams_message(alert)\n\n            response = requests.post(\n                self.webhook_url,\n                json=teams_message,\n                timeout=self.timeout\n            )\n\n            return response.status_code == 200\n\n        except Exception as e:\n            self.logger.error(f\"Teams alert failed: {e}\")\n            return False\n\n    def _format_teams_message(self, alert: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Format alert for Teams webhook.\"\"\"\n        severity_colors = {\n            'low': '28a745',      # Green\n            'medium': 'ffc107',   # Yellow\n            'high': 'fd7e14',     # Orange\n            'critical': 'dc3545'  # Red\n        }\n\n        color = severity_colors.get(alert.get('severity', 'medium'), 'ffc107')\n\n        return {\n            \"@type\": \"MessageCard\",\n            \"@context\": \"http://schema.org/extensions\",\n            \"themeColor\": color,\n            \"summary\": alert.get('title', 'Security Alert'),\n            \"sections\": [{\n                \"activityTitle\": alert.get('title', 'Security Alert'),\n                \"activitySubtitle\": f\"Severity: {alert.get('severity', 'Unknown')}\",\n                \"facts\": [\n                    {\"name\": \"Threat Type\", \"value\": alert.get('threat_type', 'Unknown')},\n                    {\"name\": \"Source IP\", \"value\": alert.get('source_ip', 'Unknown')},\n                    {\"name\": \"Time\", \"value\": alert.get('timestamp', 'Unknown')},\n                    {\"name\": \"Description\", \"value\": alert.get('message', 'No description')}\n                ],\n                \"markdown\": True\n            }],\n            \"potentialAction\": [{\n                \"@type\": \"OpenUri\",\n                \"name\": \"View Details\",\n                \"targets\": [{\n                    \"os\": \"default\",\n                    \"uri\": f\"https://security-dashboard.company.com/alert/{alert.get('alert_id', '')}\"\n                }]\n            }]\n        }\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#parser-plugins","title":"\ud83d\udcdd Parser Plugins","text":""},{"location":"PLUGIN_DEVELOPMENT/#custom-log-parser-plugin","title":"Custom Log Parser Plugin","text":"<pre><code># plugins/custom_parser.py\nfrom src.plugin_system import ParserPlugin\nimport re\nfrom datetime import datetime\nfrom typing import Dict, Any, Optional\n\nclass CustomLogParser(ParserPlugin):\n    \"\"\"Custom log format parser plugin.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        super().__init__(config)\n        self.name = \"custom_log_parser\"\n\n        # Custom log format pattern\n        self.log_pattern = re.compile(\n            r'(?P&lt;timestamp&gt;\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}) '\n            r'\\[(?P&lt;level&gt;\\w+)\\] '\n            r'(?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) '\n            r'\"(?P&lt;method&gt;\\w+) (?P&lt;url&gt;.*?) HTTP/.*?\" '\n            r'(?P&lt;status&gt;\\d+) '\n            r'(?P&lt;size&gt;\\d+|-) '\n            r'\"(?P&lt;referrer&gt;.*?)\" '\n            r'\"(?P&lt;user_agent&gt;.*?)\"'\n        )\n\n    def can_parse(self, log_line: str) -&gt; bool:\n        \"\"\"Check if this parser can handle the log line.\"\"\"\n        return bool(self.log_pattern.match(log_line))\n\n    def parse(self, log_line: str) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Parse log line into structured data.\"\"\"\n        match = self.log_pattern.match(log_line)\n\n        if not match:\n            return None\n\n        try:\n            parsed_data = match.groupdict()\n\n            # Convert and validate data types\n            return {\n                'timestamp': self._parse_timestamp(parsed_data['timestamp']),\n                'level': parsed_data['level'],\n                'ip': parsed_data['ip'],\n                'method': parsed_data['method'],\n                'url': parsed_data['url'],\n                'status': int(parsed_data['status']),\n                'size': self._parse_size(parsed_data['size']),\n                'referrer': parsed_data['referrer'] if parsed_data['referrer'] != '-' else None,\n                'user_agent': parsed_data['user_agent'],\n                'raw_line': log_line\n            }\n\n        except (ValueError, KeyError) as e:\n            self.logger.error(f\"Failed to parse log line: {e}\")\n            return None\n\n    def _parse_timestamp(self, timestamp_str: str) -&gt; datetime:\n        \"\"\"Parse timestamp string to datetime object.\"\"\"\n        return datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')\n\n    def _parse_size(self, size_str: str) -&gt; Optional[int]:\n        \"\"\"Parse response size.\"\"\"\n        return None if size_str == '-' else int(size_str)\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-configuration","title":"\ud83d\udd27 Plugin Configuration","text":""},{"location":"PLUGIN_DEVELOPMENT/#plugin-registry-configuration","title":"Plugin Registry Configuration","text":"<p>Configure plugins in <code>config/plugins.yaml</code>:</p> <pre><code>plugins:\n  # Global plugin settings\n  global:\n    plugin_directories:\n      - \"plugins/\"\n      - \"/etc/nginx-security/plugins/\"\n      - \"/usr/local/lib/nginx-security/plugins/\"\n\n    # Plugin loading settings\n    auto_discovery: true\n    lazy_loading: true\n    reload_on_change: true\n\n    # Security settings\n    sandbox_plugins: true\n    max_execution_time: 30\n    max_memory_usage: \"100MB\"\n\n  # Detection plugins\n  detection:\n    custom_threat_detector:\n      enabled: true\n      module: \"plugins.custom_detector\"\n      class: \"CustomThreatDetector\"\n      priority: 10  # Lower number = higher priority\n      config:\n        patterns:\n          - \"admin\\.php\"\n          - \"wp-admin\"\n          - \"phpmyadmin\"\n        severity: \"medium\"\n        confidence_threshold: 0.7\n\n    ml_threat_detector:\n      enabled: true\n      module: \"plugins.ml_detector\"\n      class: \"MLThreatDetector\"\n      priority: 5\n      config:\n        model_path: \"models/threat_detector.joblib\"\n        threshold: 0.8\n\n  # Mitigation plugins\n  mitigation:\n    custom_mitigation:\n      enabled: true\n      module: \"plugins.custom_mitigation\"\n      class: \"CustomMitigationPlugin\"\n      config:\n        api_endpoint: \"https://security-api.company.com\"\n        api_token: \"${SECURITY_API_TOKEN}\"\n        timeout: 30\n\n  # Alert plugins\n  alerts:\n    teams_alert:\n      enabled: true\n      module: \"plugins.custom_alert\"\n      class: \"CustomAlertPlugin\"\n      config:\n        webhook_url: \"${TEAMS_WEBHOOK_URL}\"\n        timeout: 30\n\n  # Parser plugins\n  parsers:\n    custom_log_parser:\n      enabled: true\n      module: \"plugins.custom_parser\"\n      class: \"CustomLogParser\"\n      priority: 5\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-testing","title":"\ud83e\uddea Plugin Testing","text":""},{"location":"PLUGIN_DEVELOPMENT/#unit-testing-framework","title":"Unit Testing Framework","text":"<p>Create comprehensive tests for your plugins:</p> <pre><code># tests/test_custom_detector.py\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom plugins.custom_detector import CustomThreatDetector\n\nclass TestCustomThreatDetector(unittest.TestCase):\n    \"\"\"Test custom threat detector plugin.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.config = {\n            'patterns': ['admin.php', 'wp-admin'],\n            'severity': 'medium',\n            'confidence_threshold': 0.7\n        }\n        self.detector = CustomThreatDetector(self.config)\n\n    def test_detect_admin_access(self):\n        \"\"\"Test detection of admin page access.\"\"\"\n        log_entry = {\n            'ip': '192.168.1.100',\n            'url': '/admin.php?action=login',\n            'method': 'POST',\n            'status': 200,\n            'user_agent': 'Mozilla/5.0'\n        }\n\n        threats = self.detector.detect(log_entry)\n\n        self.assertEqual(len(threats), 1)\n        self.assertEqual(threats[0]['threat_type'], 'custom_threat')\n        self.assertEqual(threats[0]['severity'], 'medium')\n        self.assertGreaterEqual(threats[0]['confidence'], 0.7)\n\n    def test_no_detection_normal_request(self):\n        \"\"\"Test no detection for normal requests.\"\"\"\n        log_entry = {\n            'ip': '192.168.1.100',\n            'url': '/index.html',\n            'method': 'GET',\n            'status': 200,\n            'user_agent': 'Mozilla/5.0'\n        }\n\n        threats = self.detector.detect(log_entry)\n\n        self.assertEqual(len(threats), 0)\n\n    def test_malicious_user_agent_detection(self):\n        \"\"\"Test detection of malicious user agents.\"\"\"\n        log_entry = {\n            'ip': '192.168.1.100',\n            'url': '/index.html',\n            'method': 'GET',\n            'status': 200,\n            'user_agent': 'sqlmap/1.4.9'\n        }\n\n        threats = self.detector.detect(log_entry)\n\n        self.assertEqual(len(threats), 1)\n        self.assertEqual(threats[0]['threat_type'], 'malicious_user_agent')\n        self.assertEqual(threats[0]['severity'], 'high')\n\n    def test_confidence_calculation(self):\n        \"\"\"Test confidence score calculation.\"\"\"\n        log_entry = {\n            'ip': '192.168.1.100',\n            'url': '/admin.php',\n            'method': 'POST',\n            'status': 401,\n            'user_agent': 'bot'\n        }\n\n        pattern = self.detector.compiled_patterns[0]\n        confidence = self.detector._calculate_confidence(log_entry, pattern)\n\n        # Should be high confidence due to 401 status, POST method, and bot user agent\n        self.assertGreater(confidence, 0.8)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#integration-testing","title":"Integration Testing","text":"<p>Test plugins within the full system:</p> <pre><code># tests/test_plugin_integration.py\nimport unittest\nfrom src.plugin_system import PluginManager\nfrom src.monitor_service import MonitorService\n\nclass TestPluginIntegration(unittest.TestCase):\n    \"\"\"Test plugin integration with main system.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.plugin_manager = PluginManager('tests/test_plugins/')\n        self.monitor = MonitorService('tests/test_config.yaml')\n\n    def test_plugin_loading(self):\n        \"\"\"Test plugin discovery and loading.\"\"\"\n        plugins = self.plugin_manager.discover_plugins()\n\n        self.assertGreater(len(plugins), 0)\n        self.assertIn('custom_threat_detector', plugins)\n\n    def test_detection_pipeline(self):\n        \"\"\"Test complete detection pipeline with plugins.\"\"\"\n        log_entry = {\n            'ip': '192.168.1.100',\n            'url': '/admin.php',\n            'method': 'POST',\n            'status': 401,\n            'user_agent': 'Mozilla/5.0'\n        }\n\n        # Process through detection pipeline\n        threats = self.monitor.process_log_entry(log_entry)\n\n        # Should detect threat using custom plugin\n        self.assertGreater(len(threats), 0)\n\n        # Check that plugin was involved\n        plugin_threats = [\n            t for t in threats \n            if t.get('metadata', {}).get('plugin_name') == 'custom_threat_detector'\n        ]\n        self.assertGreater(len(plugin_threats), 0)\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#performance-testing","title":"Performance Testing","text":"<p>Test plugin performance:</p> <pre><code># tests/test_plugin_performance.py\nimport time\nimport unittest\nfrom plugins.custom_detector import CustomThreatDetector\n\nclass TestPluginPerformance(unittest.TestCase):\n    \"\"\"Test plugin performance characteristics.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up performance test.\"\"\"\n        self.config = {\n            'patterns': ['admin.php'] * 100,  # Many patterns\n            'severity': 'medium',\n            'confidence_threshold': 0.7\n        }\n        self.detector = CustomThreatDetector(self.config)\n\n    def test_detection_performance(self):\n        \"\"\"Test detection performance with many patterns.\"\"\"\n        log_entry = {\n            'ip': '192.168.1.100',\n            'url': '/normal-page.html',\n            'method': 'GET',\n            'status': 200,\n            'user_agent': 'Mozilla/5.0'\n        }\n\n        # Time detection process\n        start_time = time.time()\n\n        for _ in range(1000):\n            threats = self.detector.detect(log_entry)\n\n        end_time = time.time()\n        avg_time = (end_time - start_time) / 1000\n\n        # Should complete detection in reasonable time\n        self.assertLess(avg_time, 0.001)  # &lt; 1ms average\n\n    def test_memory_usage(self):\n        \"\"\"Test plugin memory usage.\"\"\"\n        import psutil\n        import os\n\n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss\n\n        # Create many detector instances\n        detectors = []\n        for i in range(100):\n            detectors.append(CustomThreatDetector(self.config))\n\n        final_memory = process.memory_info().rss\n        memory_per_instance = (final_memory - initial_memory) / 100\n\n        # Should use reasonable memory per instance\n        self.assertLess(memory_per_instance, 1024 * 1024)  # &lt; 1MB per instance\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-packaging-and-distribution","title":"\ud83d\udce6 Plugin Packaging and Distribution","text":""},{"location":"PLUGIN_DEVELOPMENT/#plugin-package-structure","title":"Plugin Package Structure","text":"<p>Organize plugins for distribution:</p> <pre><code>my_security_plugin/\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 my_security_plugin/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 detector.py\n\u2502   \u251c\u2500\u2500 mitigation.py\n\u2502   \u2514\u2500\u2500 config/\n\u2502       \u2514\u2500\u2500 default_config.yaml\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_detector.py\n\u2502   \u2514\u2500\u2500 test_mitigation.py\n\u2514\u2500\u2500 docs/\n    \u251c\u2500\u2500 installation.md\n    \u2514\u2500\u2500 configuration.md\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-setup-script","title":"Plugin Setup Script","text":"<pre><code># setup.py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"my-security-plugin\",\n    version=\"1.0.0\",\n    description=\"Custom security detection and mitigation plugin\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    packages=find_packages(),\n    install_requires=[\n        \"nginx-security-monitor&gt;=2.0.0\",\n        \"requests&gt;=2.25.0\",\n        \"scikit-learn&gt;=1.0.0\"\n    ],\n    entry_points={\n        'nginx_security_plugins': [\n            'my_detector = my_security_plugin.detector:MyDetectorPlugin',\n            'my_mitigation = my_security_plugin.mitigation:MyMitigationPlugin'\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\"&gt;=3.8\",\n)\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-installation","title":"Plugin Installation","text":"<pre><code># Install from PyPI\npip install my-security-plugin\n\n# Install from source\ngit clone https://github.com/username/my-security-plugin.git\ncd my-security-plugin\npip install -e .\n\n# Install plugin dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-security","title":"\ud83d\udd12 Plugin Security","text":""},{"location":"PLUGIN_DEVELOPMENT/#plugin-sandboxing","title":"Plugin Sandboxing","text":"<p>Implement security measures for plugin execution:</p> <pre><code># src/plugin_security.py\nimport resource\nimport signal\nimport functools\nfrom typing import Any, Callable\n\nclass PluginSandbox:\n    \"\"\"Security sandbox for plugin execution.\"\"\"\n\n    def __init__(self, max_memory: int = 100 * 1024 * 1024, max_time: int = 30):\n        self.max_memory = max_memory  # 100MB\n        self.max_time = max_time      # 30 seconds\n\n    def timeout_handler(self, signum, frame):\n        \"\"\"Handle execution timeout.\"\"\"\n        raise TimeoutError(\"Plugin execution timed out\")\n\n    def limit_resources(self):\n        \"\"\"Set resource limits for plugin execution.\"\"\"\n        # Limit memory usage\n        resource.setrlimit(resource.RLIMIT_AS, (self.max_memory, self.max_memory))\n\n        # Limit CPU time\n        resource.setrlimit(resource.RLIMIT_CPU, (self.max_time, self.max_time))\n\n    def sandbox_execution(self, func: Callable) -&gt; Callable:\n        \"\"\"Decorator to sandbox plugin execution.\"\"\"\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # Set up timeout\n            signal.signal(signal.SIGALRM, self.timeout_handler)\n            signal.alarm(self.max_time)\n\n            try:\n                # Limit resources in subprocess would be better\n                # This is a simplified example\n                result = func(*args, **kwargs)\n                return result\n            except TimeoutError:\n                raise\n            except Exception as e:\n                # Log and re-raise\n                raise\n            finally:\n                signal.alarm(0)  # Cancel alarm\n\n        return wrapper\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-validation","title":"Plugin Validation","text":"<p>Validate plugins before loading:</p> <pre><code># src/plugin_validator.py\nimport ast\nimport importlib.util\nfrom typing import List, Dict, Any\n\nclass PluginValidator:\n    \"\"\"Validate plugin code for security issues.\"\"\"\n\n    DANGEROUS_IMPORTS = [\n        'os', 'subprocess', 'sys', 'importlib',\n        'exec', 'eval', '__import__'\n    ]\n\n    DANGEROUS_FUNCTIONS = [\n        'exec', 'eval', 'compile', '__import__',\n        'open', 'file', 'input', 'raw_input'\n    ]\n\n    def validate_plugin(self, plugin_path: str) -&gt; Dict[str, Any]:\n        \"\"\"Validate plugin for security issues.\"\"\"\n        result = {\n            'valid': True,\n            'warnings': [],\n            'errors': [],\n            'security_issues': []\n        }\n\n        try:\n            with open(plugin_path, 'r') as f:\n                code = f.read()\n\n            # Parse AST\n            tree = ast.parse(code)\n\n            # Check for dangerous imports\n            for node in ast.walk(tree):\n                if isinstance(node, ast.Import):\n                    for alias in node.names:\n                        if alias.name in self.DANGEROUS_IMPORTS:\n                            result['security_issues'].append(\n                                f\"Dangerous import: {alias.name}\"\n                            )\n\n                if isinstance(node, ast.Call):\n                    if hasattr(node.func, 'id') and node.func.id in self.DANGEROUS_FUNCTIONS:\n                        result['security_issues'].append(\n                            f\"Dangerous function call: {node.func.id}\"\n                        )\n\n            # Set validity based on security issues\n            if result['security_issues']:\n                result['valid'] = False\n\n        except Exception as e:\n            result['valid'] = False\n            result['errors'].append(f\"Validation error: {e}\")\n\n        return result\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#plugin-examples-repository","title":"\ud83d\udcda Plugin Examples Repository","text":""},{"location":"PLUGIN_DEVELOPMENT/#example-plugin-collection","title":"Example Plugin Collection","text":"<p>Create a collection of example plugins:</p> <pre><code>examples/\n\u251c\u2500\u2500 detectors/\n\u2502   \u251c\u2500\u2500 regex_detector.py          # Regex-based detection\n\u2502   \u251c\u2500\u2500 ml_detector.py             # Machine learning detection\n\u2502   \u251c\u2500\u2500 behavioral_detector.py     # Behavioral analysis\n\u2502   \u2514\u2500\u2500 geolocation_detector.py    # Geographic analysis\n\u251c\u2500\u2500 mitigations/\n\u2502   \u251c\u2500\u2500 iptables_mitigation.py     # iptables integration\n\u2502   \u251c\u2500\u2500 cloudflare_mitigation.py   # Cloudflare API integration\n\u2502   \u251c\u2500\u2500 aws_waf_mitigation.py      # AWS WAF integration\n\u2502   \u2514\u2500\u2500 rate_limit_mitigation.py   # Rate limiting\n\u251c\u2500\u2500 alerts/\n\u2502   \u251c\u2500\u2500 teams_alert.py             # Microsoft Teams\n\u2502   \u251c\u2500\u2500 pagerduty_alert.py         # PagerDuty integration\n\u2502   \u251c\u2500\u2500 opsgenie_alert.py          # Opsgenie integration\n\u2502   \u2514\u2500\u2500 webhook_alert.py           # Generic webhook\n\u2514\u2500\u2500 parsers/\n    \u251c\u2500\u2500 apache_parser.py           # Apache log format\n    \u251c\u2500\u2500 iis_parser.py              # IIS log format\n    \u251c\u2500\u2500 cloudflare_parser.py       # Cloudflare logs\n    \u2514\u2500\u2500 json_parser.py             # JSON log format\n</code></pre>"},{"location":"PLUGIN_DEVELOPMENT/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>API Reference - Plugin base classes and interfaces</li> <li>Configuration Guide - Plugin configuration options</li> <li>Pattern Detection - Detection pattern concepts</li> <li>Mitigation Strategies - Mitigation concepts</li> <li>Integration Cookbook - Integration examples</li> </ul> <p>This plugin development guide is part of the NGINX Security Monitor documentation. For updates and contributions, see CONTRIBUTING.md.</p>"},{"location":"QUICK_START_TUTORIAL/","title":"\ud83d\ude80 Quick Start Tutorial","text":"<p>Get NGINX Security Monitor up and running in 15 minutes with this step-by-step tutorial.</p>"},{"location":"QUICK_START_TUTORIAL/#what-youll-accomplish","title":"\ud83c\udfaf What You'll Accomplish","text":"<p>By the end of this tutorial, you'll have: - \u2705 NGINX Security Monitor installed and running - \u2705 Basic threat detection configured - \u2705 Email alerts set up - \u2705 Your first security event detected - \u2705 Understanding of next steps for customization</p>"},{"location":"QUICK_START_TUTORIAL/#time-required-15-minutes","title":"\u23f1\ufe0f Time Required: ~15 minutes","text":""},{"location":"QUICK_START_TUTORIAL/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before starting, ensure you have: - A system with NGINX running and generating logs - Python 3.8 or higher installed - Access to NGINX log files (usually in <code>/var/log/nginx/</code>) - An email account for receiving alerts</p>"},{"location":"QUICK_START_TUTORIAL/#step-1-quick-installation-3-minutes","title":"\ud83d\ude80 Step 1: Quick Installation (3 minutes)","text":""},{"location":"QUICK_START_TUTORIAL/#clone-and-setup","title":"Clone and Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/AccessiTech/nginx-security-monitor.git\ncd nginx-security-monitor\n\n# Create and activate virtual environment\npython3 -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# Windows users: .venv\\Scripts\\activate\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#install-dependencies","title":"Install Dependencies","text":"<pre><code># Install everything you need\npip install -r requirements.txt\n</code></pre> <p>Expected output: <pre><code>Successfully installed cryptography-45.0.5 psutil-7.0.0 pyyaml-6.0.2 pytest-8.4.1 ...\n</code></pre></p>"},{"location":"QUICK_START_TUTORIAL/#step-2-basic-configuration-5-minutes","title":"\u2699\ufe0f Step 2: Basic Configuration (5 minutes)","text":""},{"location":"QUICK_START_TUTORIAL/#configure-email-alerts","title":"Configure Email Alerts","text":"<pre><code># Copy the example configuration\ncp config/settings.yaml config/my-settings.yaml\n\n# Edit the configuration file\nnano config/my-settings.yaml  # or use your preferred editor\n</code></pre> <p>Update these essential settings: <pre><code># Edit these lines in config/my-settings.yaml\nemail_service:\n  smtp_server: \"smtp.gmail.com\"          # Change to your SMTP server\n  smtp_port: 587\n  username: \"your-email@gmail.com\"       # Your email\n  password: \"&lt;REPLACE_WITH_ENV_VARIABLE&gt;\"          # Your email password/app password\n  api_key: \"&lt;REPLACE_WITH_ENV_VARIABLE&gt;\"\n  from_address: \"your-email@gmail.com\"   # Your email\n  to_address: \"your-email@gmail.com\"     # Where to send alerts\n\n# Log file paths (update if different)\nlog_file_path: \"/var/log/nginx/access.log\"\nerror_log_file_path: \"/var/log/nginx/error.log\"\n</code></pre></p> <p>Alternative: Use service-settings.yaml for advanced features <pre><code># For more advanced configuration, copy the service template\ncp config/service-settings.yaml config/my-service-settings.yaml\n# Edit as needed for advanced features like security integrations\n</code></pre></p>"},{"location":"QUICK_START_TUTORIAL/#test-configuration","title":"Test Configuration","text":"<pre><code># Test if your configuration is valid\npython3 -c \"\nimport yaml\nwith open('config/my-settings.yaml') as f:\n    config = yaml.safe_load(f)\nprint('\u2705 Configuration is valid!')\n\"\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#environment-variables-setup","title":"Environment Variables Setup","text":""},{"location":"QUICK_START_TUTORIAL/#step-3-create-and-configure-env-file","title":"Step 3: Create and Configure .env File","text":"<pre><code># Create a .env file in the application directory\ncp config/.env.example .env\n\n# Edit the .env file\nnano .env  # or use your preferred editor\n</code></pre> <p>Example .env File: <pre><code># Application Secrets\nSECRET_KEY=your_secret_key\nDATABASE_URL=your_database_url\n\n# Email Service Configuration\nSMTP_SERVER=smtp.gmail.com\nSMTP_PORT=587\nEMAIL_USERNAME=your-email@gmail.com\nEMAIL_PASSWORD=your-email-password\nEMAIL_API_KEY=your-email-api-key\n\n# Log File Paths\nLOG_FILE_PATH=/var/log/nginx/access.log\nERROR_LOG_FILE_PATH=/var/log/nginx/error.log\n</code></pre></p>"},{"location":"QUICK_START_TUTORIAL/#usage","title":"Usage","text":"<p>The application automatically loads environment variables from the <code>.env</code> file. Ensure that sensitive information such as API keys, database URLs, and other credentials are stored securely in this file. Avoid committing the <code>.env</code> file to version control by adding it to <code>.gitignore</code>.</p>"},{"location":"QUICK_START_TUTORIAL/#step-3-test-basic-detection-2-minutes","title":"\ud83d\udd0d Step 3: Test Basic Detection (2 minutes)","text":""},{"location":"QUICK_START_TUTORIAL/#generate-some-test-traffic","title":"Generate Some Test Traffic","text":"<pre><code># Create a test log file to verify detection works\necho '127.0.0.1 - - [19/Jul/2025:10:30:45 +0000] \"GET /test?id=1%27%20OR%20%271%27=%271 HTTP/1.1\" 200 1234 \"-\" \"TestBot/1.0\"' &gt; test_access.log\n\n# Test the pattern detector directly\npython3 -c \"\nfrom src.pattern_detector import PatternDetector\nfrom src.log_parser import parse_logs\n\ndetector = PatternDetector()\nlogs = parse_logs('test_access.log')\nthreats = detector.detect_patterns(logs)\nprint(f'\u2705 Detected {len(threats)} potential threats!')\nfor threat in threats:\n    print(f'  - {threat.get(\\\"type\\\", \\\"Unknown\\\")} threat detected')\n\"\n</code></pre> <p>Expected Output: <pre><code>\u2705 Detected 1 potential threats!\n  - sql_injection threat detected\n</code></pre></p>"},{"location":"QUICK_START_TUTORIAL/#step-4-run-your-first-detection-3-minutes","title":"\ud83d\udea8 Step 4: Run Your First Detection (3 minutes)","text":""},{"location":"QUICK_START_TUTORIAL/#start-the-monitor","title":"Start the Monitor","text":"<pre><code># Run the monitor with your configuration\npython3 -m src.monitor_service config/my-settings.yaml\n</code></pre> <p>Expected output: <pre><code>\ud83d\ude80 NGINX Security Monitor Starting...\n\ud83d\udcca Loading configuration from config/my-settings.yaml\n\ud83d\udd0d Pattern detection enabled\n\ud83d\udce7 Email alerts configured\n\u2705 Monitor ready - watching /var/log/nginx/access.log\n</code></pre></p>"},{"location":"QUICK_START_TUTORIAL/#generate-a-test-alert","title":"Generate a Test Alert","text":"<p>Open another terminal and create a suspicious request: <pre><code># If you have NGINX running locally, create a malicious request\ncurl \"http://localhost/test?id=1' OR '1'='1\" 2&gt;/dev/null || echo \"SQL injection test sent\"\n\n# Or add directly to your NGINX access log (if you have write permission)\necho '127.0.0.1 - - [19/Jul/2025:10:30:45 +0000] \"GET /test?id=1%27%20OR%20%271%27=%271 HTTP/1.1\" 200 1234 \"-\" \"curl/7.68.0\"' | sudo tee -a /var/log/nginx/access.log\n</code></pre></p>"},{"location":"QUICK_START_TUTORIAL/#check-for-alert","title":"Check for Alert","text":"<p>You should see output like: <pre><code>\ud83d\udea8 THREAT DETECTED: SQL Injection attempt from 127.0.0.1\n\ud83d\udce7 Alert sent to your-email@gmail.com\n</code></pre></p>"},{"location":"QUICK_START_TUTORIAL/#step-5-verify-everything-works-2-minutes","title":"\u2705 Step 5: Verify Everything Works (2 minutes)","text":""},{"location":"QUICK_START_TUTORIAL/#check-alert-reception","title":"Check Alert Reception","text":"<ul> <li>Check your email for a security alert</li> <li>Subject should be: <code>NGINX Security Alert: sql_injection</code></li> </ul>"},{"location":"QUICK_START_TUTORIAL/#view-detection-logs","title":"View Detection Logs","text":"<pre><code># Check the monitor logs (if logging to file is configured)\ntail -f /var/log/nginx-security-monitor.log\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#test-different-attack-types","title":"Test Different Attack Types","text":"<pre><code># Test XSS detection\necho '127.0.0.1 - - [19/Jul/2025:10:31:00 +0000] \"GET /test?msg=%3Cscript%3Ealert(%27xss%27)%3C/script%3E HTTP/1.1\" 200 1234 \"-\" \"curl/7.68.0\"' | sudo tee -a /var/log/nginx/access.log\n\n# Test suspicious user agent\necho '127.0.0.1 - - [19/Jul/2025:10:31:15 +0000] \"GET / HTTP/1.1\" 200 1234 \"-\" \"sqlmap/1.0\"' | sudo tee -a /var/log/nginx/access.log\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#congratulations-youre-now-monitoring","title":"\ud83c\udf89 Congratulations! You're Now Monitoring","text":"<p>You now have NGINX Security Monitor: - \u2705 Detecting SQL injection attempts - \u2705 Identifying XSS attacks - \u2705 Spotting suspicious user agents - \u2705 Sending email alerts for threats - \u2705 Logging all security events</p>"},{"location":"QUICK_START_TUTORIAL/#next-steps-customize-your-setup","title":"\ud83d\udd27 Next Steps: Customize Your Setup","text":""},{"location":"QUICK_START_TUTORIAL/#1-add-more-detection-patterns","title":"1. Add More Detection Patterns","text":"<pre><code># Edit patterns configuration\nnano config/patterns.json\n\n# Add custom patterns for your application\n{\n  \"attack_patterns\": {\n    \"wordpress_attacks\": {\n      \"description\": \"WordPress-specific attacks\",\n      \"regex\": \"(/wp-admin/|/wp-login\\\\.php|/xmlrpc\\\\.php)\",\n      \"severity\": \"medium\"\n    }\n  }\n}\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#2-set-up-sms-alerts-optional","title":"2. Set Up SMS Alerts (Optional)","text":"<pre><code># Add to config/my-settings.yaml\nsms_service:\n  enabled: true\n  provider: \"twilio\"\n  api_key: \"your-twilio-auth-token\"\n  from_number: \"+1234567890\"\n  to_number: \"+1987654321\"\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#3-enable-production-deployment","title":"3. Enable Production Deployment","text":"<pre><code># For production use, install as system service\nsudo ./install.sh\n\n# Enable and start the service\nsudo systemctl enable nginx-security-monitor\nsudo systemctl start nginx-security-monitor\n\n# Check service status\nsudo systemctl status nginx-security-monitor\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#common-first-run-issues","title":"\ud83d\udd0d Common First-Run Issues","text":""},{"location":"QUICK_START_TUTORIAL/#issue-cant-read-nginx-logs","title":"Issue: Can't read NGINX logs","text":"<pre><code># Fix permissions - make sure you can read the log files\nsudo chmod 644 /var/log/nginx/access.log\n# Or run the monitor with appropriate permissions\nsudo python3 -m src.monitor_service config/my-settings.yaml\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#issue-email-alerts-not-working","title":"Issue: Email alerts not working","text":"<pre><code># Test email configuration\npython3 -c \"\nimport yaml\nfrom src.alerts.email_alert import send_email_alert\n\nwith open('config/my-settings.yaml') as f:\n    config = yaml.safe_load(f)\n\ntest_alert = {\n    'subject': 'Test Alert',\n    'body': 'This is a test email from NGINX Security Monitor',\n    'pattern': {'type': 'test', 'severity': 'info'}\n}\n\ntry:\n    send_email_alert(test_alert)\n    print('\u2705 Test email sent successfully')\nexcept Exception as e:\n    print(f'\u274c Email test failed: {e}')\n\"\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#issue-no-threats-detected","title":"Issue: No threats detected","text":"<pre><code># Verify pattern detection is working\npython3 -c \"\nfrom src.pattern_detector import PatternDetector\n\ndetector = PatternDetector()\ntest_log = {\n    'ip_address': '127.0.0.1',\n    'request': \\\"GET /test?id=1' OR '1'='1 HTTP/1.1\\\",\n    'status_code': '200'\n}\n\nthreats = detector.detect_patterns([test_log])\nprint(f'Pattern detection test: {len(threats)} threats found')\n\"\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#issue-configuration-errors","title":"Issue: Configuration errors","text":"<pre><code># Validate your configuration\npython3 -c \"\nimport yaml\ntry:\n    with open('config/my-settings.yaml') as f:\n        config = yaml.safe_load(f)\n    print('\u2705 Configuration is valid')\n\n    # Check required fields\n    required_fields = ['email_service', 'log_file_path']\n    for field in required_fields:\n        if field not in config:\n            print(f'\u26a0\ufe0f  Missing required field: {field}')\n        else:\n            print(f'\u2705 Found required field: {field}')\n\nexcept Exception as e:\n    print(f'\u274c Configuration error: {e}')\n\"\n</code></pre>"},{"location":"QUICK_START_TUTORIAL/#understanding-your-first-alert","title":"\ud83d\udcca Understanding Your First Alert","text":"<p>When you receive your first email alert, it will contain:</p> <p>Subject: <code>NGINX Security Alert: sql_injection</code></p> <p>Body: <pre><code>\ud83d\udea8 Security Threat Detected\n\nAttack Type: sql_injection\nSeverity: HIGH\nSource IP: 127.0.0.1\nTimestamp: 2025-07-19 10:30:45\nRequest: GET /test?id=1' OR '1'='1 HTTP/1.1\n\nPattern Matched: (' OR 1=1;|--|\\\\bSELECT\\\\b|\\\\bINSERT\\\\b|\\\\bUPDATE\\\\b|\\\\bDELETE\\\\b)\n\nMitigation Applied: Default threat mitigation\n\nRecommended Actions:\n1. Review the source IP for suspicious activity\n2. Consider blocking the IP if attacks continue\n3. Check application logs for related activities\n4. Review firewall rules and access controls\n</code></pre></p>"},{"location":"QUICK_START_TUTORIAL/#youre-ready-to-explore","title":"\ud83d\ude80 You're Ready to Explore","text":"<p>Now that you have the basics working, explore these advanced features:</p> <ul> <li>Pattern Detection Guide - Customize detection rules</li> <li>Alert Systems Guide - Advanced notification setup</li> <li>Security Integrations - Connect with fail2ban, OSSEC, etc.</li> <li>Plugin Development - Create custom detection plugins</li> </ul>"},{"location":"QUICK_START_TUTORIAL/#need-help","title":"\ud83c\udd98 Need Help?","text":"<ul> <li>Documentation: Check the specific guides in this repository</li> <li>Issues: Report problems on GitHub Issues</li> <li>Troubleshooting: See TROUBLESHOOTING.md</li> </ul>"},{"location":"QUICK_START_TUTORIAL/#whats-next","title":"\ud83d\udcc8 What's Next?","text":"<ol> <li>Run for 24 hours and observe the alerts you receive</li> <li>Tune the detection thresholds based on your traffic patterns</li> <li>Add custom patterns for your specific application</li> <li>Set up integrations with your existing security tools</li> <li>Consider production deployment with the full installation</li> </ol> <p>Happy monitoring! \ud83d\udee1\ufe0f</p>"},{"location":"SECURITY_FEATURES/","title":"Security Features Documentation","text":""},{"location":"SECURITY_FEATURES/#overview","title":"Overview","text":"<p>The NGINX Security Monitor includes advanced security features to protect your custom detection patterns and mitigation strategies from being exposed in the open-source codebase. This allows you to keep your specific security measures private while still benefiting from the open-source framework.</p>"},{"location":"SECURITY_FEATURES/#key-security-features","title":"Key Security Features","text":""},{"location":"SECURITY_FEATURES/#1-encrypted-pattern-storage","title":"1. Encrypted Pattern Storage","text":"<ul> <li>Store custom detection patterns in encrypted files</li> <li>Patterns are encrypted using AES-256 with PBKDF2 key derivation</li> <li>Only your system can decrypt and use your custom patterns</li> </ul>"},{"location":"SECURITY_FEATURES/#2-plugin-system-for-custom-mitigations","title":"2. Plugin System for Custom Mitigations","text":"<ul> <li>Keep your actual countermeasures private in custom plugins</li> <li>Plugin system loads your private mitigation strategies at runtime</li> <li>No need to expose your specific security responses in the public code</li> </ul>"},{"location":"SECURITY_FEATURES/#3-obfuscation-and-randomization","title":"3. Obfuscation and Randomization","text":"<ul> <li>Variable timing to avoid predictable detection patterns</li> <li>Randomized detection order to confuse attackers</li> <li>Decoy log entries to mask real analysis patterns</li> </ul>"},{"location":"SECURITY_FEATURES/#4-encrypted-configuration-sections","title":"4. Encrypted Configuration Sections","text":"<ul> <li>Encrypt sensitive configuration data (API keys, passwords, etc.)</li> <li>Configuration sections are decrypted at runtime only</li> </ul>"},{"location":"SECURITY_FEATURES/#setup-instructions","title":"Setup Instructions","text":""},{"location":"SECURITY_FEATURES/#1-install-cryptographic-dependencies","title":"1. Install Cryptographic Dependencies","text":"<pre><code>pip install cryptography\n</code></pre>"},{"location":"SECURITY_FEATURES/#2-generate-master-key","title":"2. Generate Master Key","text":"<pre><code># Generate a secure master key\npython3 encrypt_config.py interactive\n# or\nexport NGINX_MONITOR_KEY=$(python3 -c \"from src.crypto_utils import generate_master_key; print(generate_master_key())\")\n</code></pre> <p>Important: Save this key securely! You'll need it to decrypt your patterns.</p>"},{"location":"SECURITY_FEATURES/#3-create-encrypted-patterns","title":"3. Create Encrypted Patterns","text":"<p>Use the configuration utility to create encrypted pattern files:</p> <pre><code>python3 encrypt_config.py encrypt-patterns\n</code></pre> <p>This will interactively help you create: - Custom SQL injection patterns - Custom XSS detection rules - Custom attack signatures - Custom thresholds</p>"},{"location":"SECURITY_FEATURES/#4-create-custom-mitigation-plugins","title":"4. Create Custom Mitigation Plugins","text":"<pre><code>python3 encrypt_config.py create-plugin\n</code></pre> <p>This creates a template for your custom mitigation strategy. Edit the template to implement your specific countermeasures:</p> <pre><code>def mitigate(self, threat_info: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Your secret mitigation logic here\"\"\"\n    ip_address = threat_info.get('ip')\n\n    # Your custom mitigation code:\n    # - Block IP in your firewall\n    # - Call your WAF API\n    # - Update your threat intelligence database\n    # - Trigger custom alerting systems\n    # - etc.\n\n    return {\n        'status': 'success',\n        'action': 'custom_action_taken',\n        'method': 'your_secret_method'\n    }\n</code></pre>"},{"location":"SECURITY_FEATURES/#5-configure-the-service","title":"5. Configure the Service","text":"<p>Update your configuration file:</p> <pre><code># Enable security features\nsecurity:\n  encrypted_patterns_file: /etc/nginx-security-monitor/custom_patterns.enc\n  obfuscation:\n    enabled: true\n    timing_variance_percent: 20\n    add_decoy_entries: true\n    randomize_pattern_order: true\n\n# Plugin directories\nplugins:\n  directories:\n    - /etc/nginx-security-monitor/plugins\n    - /opt/nginx-security-monitor/custom_plugins\n</code></pre>"},{"location":"SECURITY_FEATURES/#security-benefits","title":"Security Benefits","text":""},{"location":"SECURITY_FEATURES/#for-open-source-projects","title":"For Open Source Projects","text":"<ol> <li>Pattern Privacy: Your specific detection rules remain secret</li> <li>Mitigation Privacy: Your countermeasures are not visible to attackers</li> <li>Configuration Security: Sensitive data is encrypted</li> <li>Timing Obfuscation: Makes reverse engineering detection logic harder</li> </ol>"},{"location":"SECURITY_FEATURES/#for-production-environments","title":"For Production Environments","text":"<ol> <li>Zero-Knowledge Architecture: The open-source code doesn't contain your secrets</li> <li>Pluggable Security: Easy to add custom mitigations without code changes</li> <li>Encrypted Storage: Patterns and configurations are encrypted at rest</li> <li>Runtime Security: Decryption only happens when needed</li> </ol>"},{"location":"SECURITY_FEATURES/#example-creating-secret-patterns","title":"Example: Creating Secret Patterns","text":"<pre><code># 1. Set your master key\nexport NGINX_MONITOR_KEY=\"your-secret-key-here\"\n\n# 2. Create encrypted patterns\npython3 encrypt_config.py encrypt-patterns\n\n# Example patterns you might add:\n# - Custom SQL injection signatures specific to your application\n# - Application-specific attack patterns\n# - Custom bot detection rules\n# - Proprietary threat intelligence indicators\n</code></pre>"},{"location":"SECURITY_FEATURES/#example-custom-plugin","title":"Example: Custom Plugin","text":"<pre><code># File: /etc/nginx-security-monitor/plugins/my_secret_plugin.py\n\nfrom plugin_system import MitigationPlugin\nimport requests\n\nclass MySecretMitigationPlugin(MitigationPlugin):\n    @property\n    def name(self):\n        return \"my_secret_mitigation\"\n\n    @property  \n    def threat_types(self):\n        return [\"SQL Injection\", \"XSS Attack\"]\n\n    def can_handle(self, threat_info):\n        return threat_info.get('severity') == 'HIGH'\n\n    def mitigate(self, threat_info):\n        ip = threat_info.get('ip')\n\n        # Your secret mitigation - could be:\n        # 1. Call to your proprietary WAF API\n        # 2. Custom firewall rules\n        # 3. Threat intelligence database updates\n        # 4. Custom notification systems\n\n        # Example: Block IP in cloud WAF\n        response = requests.post(\n            'https://your-waf-api.com/block',\n            headers={'Authorization': 'Bearer your-secret-token'},\n            json={'ip': ip, 'duration': 3600}\n        )\n\n        if response.status_code == 200:\n            return {\n                'status': 'success',\n                'action': 'cloud_waf_block',\n                'ip_address': ip\n            }\n        else:\n            return {\n                'status': 'error',\n                'error': 'WAF API call failed'\n            }\n</code></pre>"},{"location":"SECURITY_FEATURES/#best-practices","title":"Best Practices","text":""},{"location":"SECURITY_FEATURES/#1-key-management","title":"1. Key Management","text":"<ul> <li>Store master keys in environment variables or secure key management systems</li> <li>Use different keys for different environments (dev/staging/prod)</li> <li>Rotate keys periodically</li> </ul>"},{"location":"SECURITY_FEATURES/#2-plugin-security","title":"2. Plugin Security","text":"<ul> <li>Keep plugin files in secure directories with restricted permissions</li> <li>Don't commit plugin files to public repositories</li> <li>Use separate plugins for different threat types</li> </ul>"},{"location":"SECURITY_FEATURES/#3-pattern-management","title":"3. Pattern Management","text":"<ul> <li>Regularly update your encrypted patterns based on new threats</li> <li>Test patterns in a development environment first</li> <li>Keep backups of your encrypted pattern files</li> </ul>"},{"location":"SECURITY_FEATURES/#4-monitoring","title":"4. Monitoring","text":"<ul> <li>Monitor plugin execution for errors</li> <li>Log mitigation actions (without revealing strategies)</li> <li>Regular security audits of your custom patterns</li> </ul>"},{"location":"SECURITY_FEATURES/#troubleshooting","title":"Troubleshooting","text":""},{"location":"SECURITY_FEATURES/#common-issues","title":"Common Issues","text":"<ol> <li>\"Decryption failed\"</li> <li>Check that NGINX_MONITOR_KEY environment variable is set</li> <li>Verify the master key is correct</li> <li> <p>Ensure the encrypted file is not corrupted</p> </li> <li> <p>\"Plugin not found\"</p> </li> <li>Check plugin directory permissions</li> <li>Verify plugin file syntax</li> <li> <p>Check service logs for plugin loading errors</p> </li> <li> <p>\"Security features not available\"</p> </li> <li>Install cryptography: <code>pip install cryptography</code></li> <li>Restart the service after installation</li> </ol>"},{"location":"SECURITY_FEATURES/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to troubleshoot security features:</p> <pre><code>logging:\n  level: DEBUG\n</code></pre> <p>Then check logs: <pre><code>sudo journalctl -u nginx-security-monitor -f\n</code></pre></p>"},{"location":"SECURITY_FEATURES/#migration-from-basic-setup","title":"Migration from Basic Setup","text":"<p>If you're upgrading from the basic version:</p> <ol> <li>Install cryptography dependency</li> <li>Create master key</li> <li>Migrate existing patterns to encrypted format</li> <li>Create custom plugins for any manual mitigations</li> <li>Update configuration</li> <li>Restart service</li> </ol> <p>The system is backward compatible - if no encrypted patterns or plugins are found, it will use the default open-source detection methods.</p>"},{"location":"SECURITY_INTEGRATIONS/","title":"Security Framework Integrations","text":""},{"location":"SECURITY_INTEGRATIONS/#overview","title":"Overview","text":"<p>The NGINX Security Monitor now supports integration with popular security frameworks and tools, providing a comprehensive defense-in-depth approach. This allows you to leverage existing security infrastructure while enhancing detection and response capabilities.</p>"},{"location":"SECURITY_INTEGRATIONS/#supported-security-frameworks","title":"Supported Security Frameworks","text":""},{"location":"SECURITY_INTEGRATIONS/#fail2ban-integration","title":"\ud83d\udd25 fail2ban Integration","text":"<ul> <li>Purpose: IP blocking and jail management</li> <li>Features:</li> <li>Monitor fail2ban jail status and banned IPs</li> <li>Automatically ban IPs detected by NGINX Security Monitor</li> <li>Check jail configuration for security best practices</li> <li>Real-time jail status monitoring</li> </ul> <p>Setup Requirements: <pre><code># Install fail2ban\nsudo apt-get install fail2ban  # Ubuntu/Debian\nsudo yum install fail2ban      # CentOS/RHEL\n\n# Enable and start service\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n</code></pre></p> <p>Recommended NGINX Jails: - <code>nginx-http-auth</code> - Failed authentication attempts - <code>nginx-noscript</code> - Script injection attempts - <code>nginx-badbots</code> - Malicious bot detection - <code>nginx-noproxy</code> - Proxy abuse prevention</p>"},{"location":"SECURITY_INTEGRATIONS/#ossecwazuh-integration","title":"\ud83d\udee1\ufe0f OSSEC/Wazuh Integration","text":"<ul> <li>Purpose: Host Intrusion Detection System (HIDS)</li> <li>Features:</li> <li>Monitor OSSEC/Wazuh alerts and events</li> <li>Send custom events to Wazuh manager</li> <li>Parse alert logs for threat intelligence</li> <li>Custom rule integration</li> </ul> <p>Setup Requirements: <pre><code># Install Wazuh agent (example for Ubuntu)\ncurl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | sudo apt-key add -\necho \"deb https://packages.wazuh.com/4.x/apt/ stable main\" | sudo tee /etc/apt/sources.list.d/wazuh.list\nsudo apt-get update\nsudo apt-get install wazuh-agent\n</code></pre></p>"},{"location":"SECURITY_INTEGRATIONS/#suricata-integration","title":"\ud83d\udd75\ufe0f Suricata Integration","text":"<ul> <li>Purpose: Network Intrusion Detection/Prevention System (IDS/IPS)</li> <li>Features:</li> <li>Parse Suricata EVE JSON logs</li> <li>Monitor network-based attacks</li> <li>Custom rule integration</li> <li>Real-time alert processing</li> </ul> <p>Setup Requirements: <pre><code># Install Suricata\nsudo apt-get install suricata  # Ubuntu/Debian\nsudo yum install suricata      # CentOS/RHEL\n\n# Configure EVE JSON logging in /etc/suricata/suricata.yaml\n</code></pre></p>"},{"location":"SECURITY_INTEGRATIONS/#modsecurity-integration","title":"\ud83d\udd12 ModSecurity Integration","text":"<ul> <li>Purpose: Web Application Firewall (WAF)</li> <li>Features:</li> <li>Parse ModSecurity audit logs</li> <li>Monitor WAF blocks and alerts</li> <li>Custom rule integration</li> <li>Attack pattern analysis</li> </ul> <p>Setup Requirements: <pre><code># Install ModSecurity (with NGINX)\nsudo apt-get install libnginx-mod-security\n# Configure ModSecurity rules and audit logging\n</code></pre></p>"},{"location":"SECURITY_INTEGRATIONS/#configuration","title":"Configuration","text":""},{"location":"SECURITY_INTEGRATIONS/#basic-configuration","title":"Basic Configuration","text":"<p>Add to your <code>service-settings.yaml</code>:</p> <pre><code>security_integrations:\n  # fail2ban integration\n  fail2ban:\n    enabled: true\n    jail_files:\n      - /etc/fail2ban/jail.local\n      - /etc/fail2ban/jail.conf\n      - /etc/fail2ban/jail.d/\n\n  # OSSEC/Wazuh integration  \n  ossec:\n    enabled: true\n    ossec_dir: /var/ossec\n\n  # Suricata integration\n  suricata:\n    enabled: true\n    suricata_log: /var/log/suricata/eve.json\n    suricata_rules: /etc/suricata/rules/\n\n  # Wazuh SIEM integration\n  wazuh:\n    enabled: true\n    wazuh_dir: /var/ossec\n    api_url: \"https://your-wazuh-manager:55000\"  # Optional\n    api_user: \"api_user\"                         # Optional\n    api_password: \"&lt;REPLACE_WITH_ENV_VARIABLE&gt;\"                 # Optional\n\n  # ModSecurity integration\n  modsecurity:\n    enabled: true\n    audit_log: /var/log/modsec_audit.log\n    rules_dir: /etc/modsecurity/rules\n</code></pre>"},{"location":"SECURITY_INTEGRATIONS/#usage","title":"Usage","text":""},{"location":"SECURITY_INTEGRATIONS/#automatic-integration","title":"Automatic Integration","text":"<p>Once configured, the security integrations work automatically:</p> <ol> <li>Threat Detection: When NGINX Security Monitor detects a threat, it automatically:</li> <li>Bans the IP in appropriate fail2ban jails</li> <li>Sends events to OSSEC/Wazuh</li> <li> <p>Logs to integrated security tools</p> </li> <li> <p>Aggregated Monitoring: The system periodically checks all integrated tools for:</p> </li> <li>Recent alerts and blocks</li> <li>Active threats</li> <li> <p>Security tool status</p> </li> <li> <p>Unified Alerting: Threats from all sources are aggregated and reported in unified alerts</p> </li> </ol>"},{"location":"SECURITY_INTEGRATIONS/#manual-testing","title":"Manual Testing","text":"<p>Use the security integrations utility:</p> <pre><code># Check which integrations are available\npython3 security_integrations_util.py check\n\n# Test integration functionality\npython3 security_integrations_util.py test\n\n# Setup specific integrations\npython3 security_integrations_util.py setup-fail2ban\npython3 security_integrations_util.py setup-ossec\n</code></pre>"},{"location":"SECURITY_INTEGRATIONS/#integration-benefits","title":"Integration Benefits","text":""},{"location":"SECURITY_INTEGRATIONS/#1-unified-threat-intelligence","title":"1. Unified Threat Intelligence","text":"<ul> <li>Correlate threats across multiple security tools</li> <li>Single dashboard for all security events</li> <li>Comprehensive threat timeline</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#2-automated-response","title":"2. Automated Response","text":"<ul> <li>Automatic IP blocking via fail2ban</li> <li>Cross-system threat sharing</li> <li>Coordinated incident response</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#3-enhanced-detection","title":"3. Enhanced Detection","text":"<ul> <li>Network-level detection (Suricata)</li> <li>Host-level monitoring (OSSEC/Wazuh)</li> <li>Application-level protection (ModSecurity)</li> <li>Log analysis (NGINX Security Monitor)</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#4-compliance-and-reporting","title":"4. Compliance and Reporting","text":"<ul> <li>Centralized security event logging</li> <li>Audit trail across all tools</li> <li>Compliance reporting support</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#example-scenarios","title":"Example Scenarios","text":""},{"location":"SECURITY_INTEGRATIONS/#scenario-1-sql-injection-attack","title":"Scenario 1: SQL Injection Attack","text":"<ol> <li>ModSecurity blocks the initial request</li> <li>NGINX Security Monitor detects the pattern in logs</li> <li>fail2ban bans the source IP</li> <li>Wazuh receives the alert for SIEM correlation</li> <li>Unified alert sent to administrators</li> </ol>"},{"location":"SECURITY_INTEGRATIONS/#scenario-2-brute-force-attack","title":"Scenario 2: Brute Force Attack","text":"<ol> <li>NGINX Security Monitor detects failed login patterns</li> <li>fail2ban activates nginx-http-auth jail</li> <li>OSSEC monitors authentication logs</li> <li>Suricata detects network patterns</li> <li>Coordinated blocking across all layers</li> </ol>"},{"location":"SECURITY_INTEGRATIONS/#scenario-3-bot-attack","title":"Scenario 3: Bot Attack","text":"<ol> <li>Suricata detects suspicious network traffic</li> <li>NGINX Security Monitor identifies bot patterns</li> <li>ModSecurity blocks malicious requests</li> <li>fail2ban bans bot IP ranges</li> <li>Threat intelligence shared across tools</li> </ol>"},{"location":"SECURITY_INTEGRATIONS/#custom-rules-and-integration","title":"Custom Rules and Integration","text":""},{"location":"SECURITY_INTEGRATIONS/#fail2ban-custom-jail","title":"fail2ban Custom Jail","text":"<p>Create custom jails for NGINX Security Monitor:</p> <pre><code># /etc/fail2ban/jail.d/nginx-security-monitor.conf\n[nginx-security-monitor]\nenabled = true\nport = http,https\nfilter = nginx-security-monitor\nlogpath = /var/log/nginx-security-monitor.log\nmaxretry = 3\nbantime = 3600\nfindtime = 600\n</code></pre>"},{"location":"SECURITY_INTEGRATIONS/#ossec-custom-rules","title":"OSSEC Custom Rules","text":"<p>Add custom OSSEC rules for enhanced detection:</p> <pre><code>&lt;!-- /var/ossec/rules/nginx_security_rules.xml --&gt;\n&lt;group name=\"nginx_security\"&gt;\n  &lt;rule id=\"100001\" level=\"10\"&gt;\n    &lt;if_sid&gt;31151&lt;/if_sid&gt;\n    &lt;match&gt;NGINX_SECURITY_ALERT&lt;/match&gt;\n    &lt;description&gt;NGINX Security Monitor Alert&lt;/description&gt;\n    &lt;group&gt;web,attack,&lt;/group&gt;\n  &lt;/rule&gt;\n&lt;/group&gt;\n</code></pre>"},{"location":"SECURITY_INTEGRATIONS/#suricata-custom-rules","title":"Suricata Custom Rules","text":"<p>Create Suricata rules for specific threats:</p> <pre><code># /etc/suricata/rules/nginx-security.rules\nalert http any any -&gt; any any (msg:\"NGINX Security Monitor - SQL Injection\"; \n  content:\"UNION SELECT\"; nocase; sid:1000001; rev:1;)\n</code></pre>"},{"location":"SECURITY_INTEGRATIONS/#troubleshooting","title":"Troubleshooting","text":""},{"location":"SECURITY_INTEGRATIONS/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Integration Not Available <pre><code># Check if service is running\nsudo systemctl status fail2ban\nsudo systemctl status suricata\nsudo systemctl status wazuh-agent\n</code></pre></p> </li> <li> <p>Permission Issues <pre><code># Ensure nginx-monitor user can read log files\nsudo usermod -a -G adm nginx-monitor\nsudo chmod 644 /var/log/suricata/eve.json\n</code></pre></p> </li> <li> <p>Log File Locations</p> </li> <li>Check actual log file paths in your system</li> <li>Update configuration with correct paths</li> <li>Ensure log rotation doesn't break monitoring</li> </ol>"},{"location":"SECURITY_INTEGRATIONS/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging for integration troubleshooting:</p> <pre><code>logging:\n  level: DEBUG\n  handlers:\n    - type: file\n      filename: /var/log/nginx-security-monitor-debug.log\n</code></pre>"},{"location":"SECURITY_INTEGRATIONS/#security-considerations","title":"Security Considerations","text":""},{"location":"SECURITY_INTEGRATIONS/#1-log-file-security","title":"1. Log File Security","text":"<ul> <li>Restrict access to security tool logs</li> <li>Use proper file permissions (640 or 644)</li> <li>Regular log rotation and archival</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#2-api-security","title":"2. API Security","text":"<ul> <li>Use strong authentication for API integrations</li> <li>Encrypt API communications (TLS)</li> <li>Regular credential rotation</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#3-integration-monitoring","title":"3. Integration Monitoring","text":"<ul> <li>Monitor integration health</li> <li>Alert on integration failures</li> <li>Backup integration configurations</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#best-practices","title":"Best Practices","text":""},{"location":"SECURITY_INTEGRATIONS/#1-tool-coordination","title":"1. Tool Coordination","text":"<ul> <li>Avoid duplicate blocking rules</li> <li>Coordinate ban times across tools</li> <li>Use consistent IP whitelisting</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#2-performance","title":"2. Performance","text":"<ul> <li>Monitor resource usage of integrated tools</li> <li>Use appropriate check intervals</li> <li>Implement rate limiting for integrations</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#3-maintenance","title":"3. Maintenance","text":"<ul> <li>Regular updates of security tools</li> <li>Review and tune detection rules</li> <li>Monitor false positive rates</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#4-documentation","title":"4. Documentation","text":"<ul> <li>Document custom rules and configurations</li> <li>Maintain integration dependency maps</li> <li>Create runbooks for common scenarios</li> </ul>"},{"location":"SECURITY_INTEGRATIONS/#integration-roadmap","title":"Integration Roadmap","text":""},{"location":"SECURITY_INTEGRATIONS/#planned-integrations","title":"Planned Integrations","text":"<ul> <li>CrowdStrike Falcon: Endpoint protection</li> <li>Splunk: SIEM integration</li> <li>ELK Stack: Log analysis and visualization</li> <li>Snort: Additional IDS support</li> <li>pfSense: Firewall integration</li> </ul> <p>The security framework integrations provide a powerful foundation for comprehensive security monitoring, enabling your NGINX Security Monitor to work seamlessly with your existing security infrastructure while providing enhanced threat detection and response capabilities.</p>"},{"location":"SERVICE_PROTECTION/","title":"Service Protection and Hardening Guide","text":""},{"location":"SERVICE_PROTECTION/#overview","title":"Overview","text":"<p>The NGINX Security Monitor implements comprehensive self-protection mechanisms to defend against attacks targeting the monitoring service itself. Since security tools are high-value targets, we've implemented multiple layers of protection.</p>"},{"location":"SERVICE_PROTECTION/#self-protection-features","title":"Self-Protection Features","text":""},{"location":"SERVICE_PROTECTION/#file-integrity-monitoring","title":"\ud83d\udee1\ufe0f File Integrity Monitoring","text":"<ul> <li>Continuous monitoring of critical service files</li> <li>SHA-256 hash verification of source code and configuration</li> <li>Automatic detection of unauthorized modifications</li> <li>Emergency shutdown on critical file tampering</li> </ul>"},{"location":"SERVICE_PROTECTION/#process-integrity-monitoring","title":"\ud83d\udd0d Process Integrity Monitoring","text":"<ul> <li>Baseline process state verification</li> <li>Detection of process hijacking attempts</li> <li>Monitoring for suspicious child processes</li> <li>Protection against code injection</li> </ul>"},{"location":"SERVICE_PROTECTION/#resource-abuse-detection","title":"\ud83d\udcca Resource Abuse Detection","text":"<ul> <li>CPU, memory, and disk usage monitoring</li> <li>Detection of resource exhaustion attacks</li> <li>Network connection monitoring</li> <li>Rate limiting for service operations</li> </ul>"},{"location":"SERVICE_PROTECTION/#network-security-controls","title":"\ud83c\udf10 Network Security Controls","text":"<ul> <li>IP-based access control</li> <li>Firewall integration with automatic IP blocking</li> <li>Port security monitoring</li> <li>DNS query analysis for compromise indicators</li> </ul>"},{"location":"SERVICE_PROTECTION/#system-hardening","title":"\ud83d\udd10 System Hardening","text":"<ul> <li>File permission enforcement</li> <li>Environment variable security validation</li> <li>Service binding restrictions</li> <li>TLS/SSL configuration validation</li> </ul>"},{"location":"SERVICE_PROTECTION/#threat-response-mechanisms","title":"Threat Response Mechanisms","text":""},{"location":"SERVICE_PROTECTION/#critical-threats-emergency-shutdown","title":"Critical Threats (Emergency Shutdown)","text":"<ul> <li>File tampering of core service files</li> <li>Process hijacking detection</li> <li>Service compromise indicators</li> </ul>"},{"location":"SERVICE_PROTECTION/#high-threats-immediate-alerts","title":"High Threats (Immediate Alerts)","text":"<ul> <li>Suspicious child processes</li> <li>Firewall configuration issues</li> <li>High resource usage</li> <li>Permission violations</li> </ul>"},{"location":"SERVICE_PROTECTION/#mediumlow-threats-monitoring","title":"Medium/Low Threats (Monitoring)","text":"<ul> <li>Unexpected network connections</li> <li>DNS anomalies</li> <li>Configuration warnings</li> </ul>"},{"location":"SERVICE_PROTECTION/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"SERVICE_PROTECTION/#1-install-with-self-protection","title":"1. Install with Self-Protection","text":"<pre><code># Standard installation\nsudo ./install.sh\n\n# Apply additional hardening\nsudo ./harden.sh\n</code></pre>"},{"location":"SERVICE_PROTECTION/#2-configure-protection-settings","title":"2. Configure Protection Settings","text":"<p>Edit <code>/etc/nginx-security-monitor/settings.yaml</code>:</p> <pre><code># Self-protection configuration\nsecurity:\n  self_check_interval: 300  # Check every 5 minutes\n\nprotection:\n  resource_thresholds:\n    cpu_percent: 80.0\n    memory_percent: 80.0\n    disk_usage_percent: 90.0\n\n  emergency_shutdown:\n    file_tampering: true\n    process_hijacking: true\n\nnetwork_security:\n  allowed_ips:\n    - 127.0.0.1\n    - ::1\n    # Add your management IPs\n\n  allowed_ports:\n    - 22    # SSH\n    - 80    # HTTP\n    - 443   # HTTPS\n    - 587   # SMTP TLS\n</code></pre>"},{"location":"SERVICE_PROTECTION/#3-enable-additional-monitoring","title":"3. Enable Additional Monitoring","text":"<pre><code># Install system monitoring tools\nsudo apt-get install aide psutil\n\n# Setup integrity monitoring\nsudo aide --init\n</code></pre>"},{"location":"SERVICE_PROTECTION/#attack-scenarios-and-defenses","title":"Attack Scenarios and Defenses","text":""},{"location":"SERVICE_PROTECTION/#scenario-1-direct-file-tampering","title":"Scenario 1: Direct File Tampering","text":"<p>Attack: Attacker modifies service files to disable monitoring or inject malicious code.</p> <p>Defense: - File integrity monitoring detects changes immediately - Service performs emergency shutdown - Critical alert sent to administrators - System logs all file access attempts</p>"},{"location":"SERVICE_PROTECTION/#scenario-2-process-injectionhijacking","title":"Scenario 2: Process Injection/Hijacking","text":"<p>Attack: Attacker attempts to inject code into the running service process.</p> <p>Defense: - Process integrity checks detect baseline deviations - Monitoring for unexpected child processes - Emergency shutdown on process hijacking detection - Process memory protection via systemd hardening</p>"},{"location":"SERVICE_PROTECTION/#scenario-3-resource-exhaustion-dos","title":"Scenario 3: Resource Exhaustion (DoS)","text":"<p>Attack: Flood the service with requests to consume all system resources.</p> <p>Defense: - Rate limiting on service operations - Resource usage monitoring with automatic alerts - CPU/memory/disk threshold enforcement - Network connection monitoring and blocking</p>"},{"location":"SERVICE_PROTECTION/#scenario-4-network-based-attacks","title":"Scenario 4: Network-Based Attacks","text":"<p>Attack: Network scanning, unauthorized access attempts, or C2 communication.</p> <p>Defense: - IP-based access control with automatic blocking - Port security monitoring - Firewall integration with custom rules - DNS query analysis for compromise indicators</p>"},{"location":"SERVICE_PROTECTION/#scenario-5-configuration-attacks","title":"Scenario 5: Configuration Attacks","text":"<p>Attack: Modify configuration to disable security features or redirect alerts.</p> <p>Defense: - Configuration file integrity monitoring - Encrypted configuration sections - File permission enforcement - Backup and restoration capabilities</p>"},{"location":"SERVICE_PROTECTION/#scenario-6-privilege-escalation","title":"Scenario 6: Privilege Escalation","text":"<p>Attack: Attempt to escalate privileges from the service account.</p> <p>Defense: - Systemd security restrictions (NoNewPrivileges, CapabilityBoundingSet) - File system access restrictions - Network namespace isolation - System call filtering</p>"},{"location":"SERVICE_PROTECTION/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"SERVICE_PROTECTION/#self-protection-alerts","title":"Self-Protection Alerts","text":"<p>The service sends different types of alerts based on threat severity:</p>"},{"location":"SERVICE_PROTECTION/#emergency-alerts-critical-threats","title":"Emergency Alerts (Critical Threats)","text":"<p><pre><code>Subject: \ud83d\udea8 CRITICAL: Security Monitor Service Under Attack\n</code></pre> - Sent for file tampering, process hijacking - Triggers emergency shutdown procedures - Requires immediate investigation</p>"},{"location":"SERVICE_PROTECTION/#service-threat-alerts-high-threats","title":"Service Threat Alerts (High Threats)","text":"<p><pre><code>Subject: \u26a0\ufe0f Security Monitor Service Threats Detected  \n</code></pre> - Sent for high-severity threats - Service continues running but requires attention - Detailed threat information provided</p>"},{"location":"SERVICE_PROTECTION/#log-files","title":"Log Files","text":"<p>Monitor these logs for security events: - <code>/var/log/nginx-security-monitor.log</code> - Main service log - <code>/var/log/nginx-security-monitor/nginx-security-monitor-security.log</code> - Security events - <code>/var/log/auth.log</code> - System authentication attempts - <code>journalctl -u nginx-security-monitor</code> - Systemd service logs</p>"},{"location":"SERVICE_PROTECTION/#best-practices","title":"Best Practices","text":""},{"location":"SERVICE_PROTECTION/#1-regular-security-maintenance","title":"1. Regular Security Maintenance","text":"<pre><code># Weekly security checks\nsudo /usr/local/bin/nginx-security-monitor-security-check\n\n# Monthly integrity verification\nsudo aide --check\n\n# Update and restart service monthly\nsudo apt update &amp;&amp; sudo apt upgrade\nsudo systemctl restart nginx-security-monitor\n</code></pre>"},{"location":"SERVICE_PROTECTION/#2-network-isolation","title":"2. Network Isolation","text":"<ul> <li>Run service on isolated network segment if possible</li> <li>Use firewall rules to restrict unnecessary network access</li> <li>Monitor outbound connections for anomalies</li> </ul>"},{"location":"SERVICE_PROTECTION/#3-backup-and-recovery","title":"3. Backup and Recovery","text":"<pre><code># Backup configuration and patterns\nsudo cp -r /etc/nginx-security-monitor /backup/location/\n\n# Backup custom plugins\nsudo cp -r /opt/nginx-security-monitor/custom_plugins /backup/location/\n\n# Test restoration procedures regularly\n</code></pre>"},{"location":"SERVICE_PROTECTION/#4-access-control","title":"4. Access Control","text":"<ul> <li>Limit administrative access to service files</li> <li>Use strong authentication for system access</li> <li>Regularly audit user access and permissions</li> <li>Enable audit logging for file access</li> </ul>"},{"location":"SERVICE_PROTECTION/#5-monitoring-integration","title":"5. Monitoring Integration","text":"<ul> <li>Integrate alerts with your SIEM/monitoring system</li> <li>Set up automated response procedures</li> <li>Create runbooks for different threat scenarios</li> <li>Regular security assessments and penetration testing</li> </ul>"},{"location":"SERVICE_PROTECTION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"SERVICE_PROTECTION/#high-cpumemory-usage","title":"High CPU/Memory Usage","text":"<pre><code># Check resource usage\ntop -p $(pgrep -f monitor_service.py)\n\n# Adjust thresholds if needed\nsudo nano /etc/nginx-security-monitor/settings.yaml\n\n# Restart service\nsudo systemctl restart nginx-security-monitor\n</code></pre>"},{"location":"SERVICE_PROTECTION/#false-positive-alerts","title":"False Positive Alerts","text":"<pre><code># Check self-protection logs\nsudo grep -i \"self-protection\" /var/log/nginx-security-monitor.log\n\n# Adjust thresholds or whitelist IPs\nsudo nano /etc/nginx-security-monitor/settings.yaml\n\n# Update allowed IPs or ports as needed\n</code></pre>"},{"location":"SERVICE_PROTECTION/#emergency-shutdown-recovery","title":"Emergency Shutdown Recovery","text":"<pre><code># Check why service shut down\nsudo journalctl -u nginx-security-monitor --since \"1 hour ago\"\n\n# Verify file integrity\nsudo aide --check\n\n# If files are clean, restart service\nsudo systemctl start nginx-security-monitor\n</code></pre>"},{"location":"SERVICE_PROTECTION/#firewall-issues","title":"Firewall Issues","text":"<pre><code># Check firewall rules\nsudo iptables -L NGINX_MONITOR_CHAIN\n\n# Remove problematic rules if needed\nsudo iptables -D NGINX_MONITOR_CHAIN &lt;rule_number&gt;\n\n# Reset firewall rules\nsudo iptables -F NGINX_MONITOR_CHAIN\n</code></pre>"},{"location":"SERVICE_PROTECTION/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"SERVICE_PROTECTION/#custom-threat-response","title":"Custom Threat Response","text":"<p>Create custom response plugins for specific threats:</p> <pre><code># File: /etc/nginx-security-monitor/plugins/custom_response.py\nfrom plugin_system import MitigationPlugin\n\nclass CustomThreatResponsePlugin(MitigationPlugin):\n    def mitigate(self, threat_info):\n        if threat_info.get('type') == 'File Tampering':\n            # Custom response for file tampering\n            self.backup_system()\n            self.isolate_network()\n            self.notify_security_team()\n\n        return {'status': 'custom_response_applied'}\n</code></pre>"},{"location":"SERVICE_PROTECTION/#integration-with-external-security-tools","title":"Integration with External Security Tools","text":"<pre><code># Custom integrations\nintegrations:\n  siem:\n    enabled: true\n    endpoint: \"https://your-siem.com/api/alerts\"\n    api_key: \"encrypted_api_key_here\"\n\n  waf:\n    enabled: true\n    api_endpoint: \"https://your-waf.com/api/block\"\n    auto_block: true\n</code></pre> <p>This comprehensive self-protection system ensures that even if your NGINX Security Monitor is publicly available or the source code is known, the actual security measures and the service itself remain protected against sophisticated attacks.</p>"},{"location":"STYLE_GUIDE/","title":"\ud83d\udcdd Documentation Style Guide","text":"<p>This style guide provides guidelines for writing and maintaining documentation for the NGINX Security Monitor project.</p>"},{"location":"STYLE_GUIDE/#general-principles","title":"General Principles","text":"<ol> <li>Clarity First</li> <li>Write in clear, concise language</li> <li>One idea per sentence</li> <li>Use active voice</li> <li>Avoid jargon unless necessary</li> <li> <p>Define technical terms on first use</p> </li> <li> <p>Consistency</p> </li> <li>Use consistent terminology throughout</li> <li>Maintain consistent formatting</li> <li>Follow established patterns</li> <li>Use standard file naming conventions</li> </ol>"},{"location":"STYLE_GUIDE/#file-structure","title":"File Structure","text":""},{"location":"STYLE_GUIDE/#metadata-header","title":"Metadata Header","text":"<pre><code>---\nversion: 1.0.0\nlast_updated: YYYY-MM-DD\nchangelog:\n  - version: 1.0.0\n    date: YYYY-MM-DD\n    changes:\n      - Change description\nmaintainers:\n  - username\nreview_status: current|needs_review|outdated\napplies_to_versions: \"&gt;=X.Y.Z\"\n---\n</code></pre>"},{"location":"STYLE_GUIDE/#document-structure","title":"Document Structure","text":"<pre><code># Title (Level 1)\n\nBrief description (1-2 sentences)\n\n## Section (Level 2)\n\n### Subsection (Level 3)\n\n#### Detail (Level 4)\n</code></pre>"},{"location":"STYLE_GUIDE/#formatting-conventions","title":"Formatting Conventions","text":""},{"location":"STYLE_GUIDE/#code-blocks","title":"Code Blocks","text":"<ul> <li>Use triple backticks with language specification</li> <li>Include description before code blocks</li> <li>Keep code examples concise and focused</li> </ul> <pre><code># Good example\ndef validate_config():\n    \"\"\"Validate the configuration file.\"\"\"\n    return True\n</code></pre>"},{"location":"STYLE_GUIDE/#links","title":"Links","text":"<ul> <li>Use descriptive link text</li> <li>Prefer relative links for internal documentation</li> <li>Include link titles for external resources</li> </ul>"},{"location":"STYLE_GUIDE/#lists","title":"Lists","text":"<ul> <li>Use hyphen (-) for unordered lists</li> <li>Use numbers (1.) for ordered lists</li> <li>Maintain consistent indentation (2 spaces)</li> <li>Capitalize first word of each item</li> <li>End each item with appropriate punctuation</li> </ul>"},{"location":"STYLE_GUIDE/#file-naming","title":"File Naming","text":"<ul> <li>Use uppercase for root-level documentation: <code>README.md</code>, <code>CONTRIBUTING.md</code></li> <li>Use lowercase with hyphens for other files: <code>user-guide.md</code>, <code>api-reference.md</code></li> <li>Use descriptive, purpose-indicating names</li> </ul>"},{"location":"STYLE_GUIDE/#writing-style","title":"Writing Style","text":""},{"location":"STYLE_GUIDE/#voice-and-tone","title":"Voice and Tone","text":"<ul> <li>Use active voice</li> <li>Be direct and concise</li> <li>Maintain a professional, helpful tone</li> <li>Write in present tense</li> <li>Use second person (\"you\") for instructions</li> </ul>"},{"location":"STYLE_GUIDE/#code-references","title":"Code References","text":"<ul> <li>Use backticks for inline code: `variable_name`</li> <li>Use proper case for language keywords</li> <li>Include language identifier in code blocks</li> <li>Document return values and exceptions</li> </ul>"},{"location":"STYLE_GUIDE/#common-terms","title":"Common Terms","text":"<ul> <li>NGINX Security Monitor (not \"the monitor\" or \"NSM\")</li> <li>Configuration (not \"config\" or \"conf\")</li> <li>Documentation (not \"docs\" or \"doc\")</li> <li>Implementation (not \"impl\")</li> </ul>"},{"location":"STYLE_GUIDE/#images-and-diagrams","title":"Images and Diagrams","text":""},{"location":"STYLE_GUIDE/#screenshots","title":"Screenshots","text":"<ul> <li>Include descriptive alt text</li> <li>Use consistent resolution</li> <li>Highlight relevant areas</li> <li>Update when UI changes</li> </ul>"},{"location":"STYLE_GUIDE/#diagrams","title":"Diagrams","text":"<ul> <li>Use consistent styling</li> <li>Include legend when necessary</li> <li>Provide text description</li> <li>Save in both SVG and PNG formats</li> </ul>"},{"location":"STYLE_GUIDE/#versioning","title":"Versioning","text":""},{"location":"STYLE_GUIDE/#version-numbers","title":"Version Numbers","text":"<ul> <li>Follow semantic versioning</li> <li>Include in metadata header</li> <li>Reference specific versions in examples</li> <li>Document version-specific features</li> </ul>"},{"location":"STYLE_GUIDE/#compatibility-notes","title":"Compatibility Notes","text":"<ul> <li>Clearly mark deprecated features</li> <li>Include version ranges</li> <li>Note breaking changes</li> <li>Provide migration steps</li> </ul>"},{"location":"STYLE_GUIDE/#examples","title":"Examples","text":""},{"location":"STYLE_GUIDE/#good-example","title":"Good Example","text":"<pre><code>## Installing the Monitor\n\nTo install NGINX Security Monitor:\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/org/nginx-security-monitor.git\n   ```\n\n2. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n</code></pre>"},{"location":"STYLE_GUIDE/#bad-example","title":"Bad Example","text":"<pre><code>## Installation\n\nclone repo\nrun pip install\n</code></pre>"},{"location":"STYLE_GUIDE/#review-process","title":"Review Process","text":"<ol> <li>Self-Review Checklist</li> <li> Correct metadata header</li> <li> Proper formatting</li> <li> No spelling errors</li> <li> Links working</li> <li> Code examples tested</li> <li> <p> Images have alt text</p> </li> <li> <p>Peer Review Guidelines</p> </li> <li>Technical accuracy</li> <li>Clarity and completeness</li> <li>Style guide compliance</li> <li>Cross-reference verification</li> </ol>"},{"location":"STYLE_GUIDE/#tools-and-automation","title":"Tools and Automation","text":""},{"location":"STYLE_GUIDE/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>markdownlint for markdown validation</li> <li>Vale for style checking</li> <li>Prettier for formatting</li> <li>Local spell checker</li> <li>Link checker</li> </ul>"},{"location":"STYLE_GUIDE/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<ul> <li>Markdown lint</li> <li>Spell check</li> <li>Link validation</li> <li>Format check</li> </ul>"},{"location":"STYLE_GUIDE/#questions","title":"Questions?","text":"<p>If you have questions about the style guide: 1. Check existing documentation 2. Ask in the #documentation channel 3. Create an issue with the \"documentation\" label 4. Tag maintainers for clarification</p>"},{"location":"TESTING/","title":"Testing Guide","text":"<p>This document provides comprehensive information about testing the NGINX Security Monitor, including running tests, understanding coverage, and contributing new tests.</p>"},{"location":"TESTING/#prerequisites","title":"Prerequisites","text":""},{"location":"TESTING/#virtual-environment-setup-recommended","title":"Virtual Environment Setup (Recommended)","text":"<p>It's strongly recommended to use a virtual environment to avoid dependency conflicts:</p>"},{"location":"TESTING/#using-venv-built-in-recommended","title":"Using venv (Built-in, Recommended)","text":"<pre><code># Navigate to project directory\ncd /path/to/nginx-security-monitor\n\n# Create virtual environment\npython3 -m venv .venv\n\n# Activate virtual environment\nsource .venv/bin/activate  # Linux/macOS\n# or on Windows: .venv\\Scripts\\activate\n\n# Upgrade pip (recommended)\npip install --upgrade pip\n\n# Install dependencies\npip install -r requirements.txt\n\n# Install testing dependencies\npip install -r dev-requirements.txt\n\n# Install in development mode (for easier testing)\npip install -e .\n</code></pre>"},{"location":"TESTING/#alternative-using-virtualenv","title":"Alternative: Using virtualenv","text":"<pre><code># Install virtualenv if not already installed\npip install virtualenv\n\n# Create virtual environment\nvirtualenv .venv\n\n# Activate and install dependencies\nsource .venv/bin/activate\npip install -r requirements.txt\npip install -r dev-requirements.txt\npip install -e .\n</code></pre>"},{"location":"TESTING/#alternative-using-conda","title":"Alternative: Using conda","text":"<pre><code># Create conda environment\nconda create -n nginx-security-monitor python=3.8\n\n# Activate environment\nconda activate nginx-security-monitor\n\n# Install dependencies\npip install -r requirements.txt\npip install -r dev-requirements.txt\npip install -e .\n</code></pre> <p>Important: Always activate your virtual environment before running tests: <pre><code>source .venv/bin/activate  # Linux/macOS\n# or: .venv\\Scripts\\activate  # Windows\n</code></pre></p> <p>To deactivate when you're done: <pre><code>deactivate\n</code></pre></p>"},{"location":"TESTING/#requirements-files","title":"Requirements Files","text":"<p>The project uses separate requirements files for better dependency management:</p> <ul> <li><code>requirements.txt</code>: Core application dependencies (Flask, cryptography, etc.)</li> <li><code>dev-requirements.txt</code>: Testing and development tools (pytest, coverage, linters)</li> </ul> <p>For testing, install both. For production deployment, only <code>requirements.txt</code> is needed.</p>"},{"location":"TESTING/#quick-start","title":"Quick Start","text":"<pre><code># Ensure virtual environment is activated\nsource .venv/bin/activate  # Linux/macOS\n# or: .venv\\Scripts\\activate  # Windows\n\n# Install dependencies (if not already done)\npip install -r requirements.txt\npip install -r dev-requirements.txt\n\n# Run all tests\npytest\n\n# Run tests with coverage report\npytest --cov=src --cov-report=term-missing\n\n# Run specific test file\npytest tests/test_pattern_detector.py\n\n# Run specific test\npytest tests/test_pattern_detector.py::TestPatternDetector::test_sql_injection_detection\n</code></pre>"},{"location":"TESTING/#test-suite-overview","title":"Test Suite Overview","text":"<p>The project includes comprehensive test coverage across all major components:</p>"},{"location":"TESTING/#test-statistics","title":"Test Statistics","text":"<ul> <li>Total Tests: 394</li> <li>Test Coverage: 82%</li> <li>Test Files: 14</li> <li>All Tests Passing: \u2705</li> </ul>"},{"location":"TESTING/#current-coverage-breakdown","title":"Current Coverage Breakdown","text":"<ul> <li>\ud83d\udfe2 Perfect Coverage (100%): alert_manager, service_protection, threat_processor, plugin_system, log_parser</li> <li>\ud83d\udfe2 Excellent (95%+): security_integrations (99%), pattern_detector (97%), monitor_service (96%), network_security (96%)</li> <li>\ud83d\udfe2 High (90%+): crypto_utils (90%), mitigation (89%)</li> <li>\ud83d\udfe1 Good (80%+): email_alert (82%)</li> <li>\ud83d\udd34 Needs Improvement: config_manager (55%), security_coordinator (28%), sms_alert (15%), config_schema (42%)</li> </ul> <p>\ud83d\udcc8 Coverage Improvement Plan: See ELITE_TEST_COVERAGE_PLAN.md for detailed roadmap to 95%+ coverage.</p>"},{"location":"TESTING/#test-files-structure","title":"Test Files Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 test_alerts.py              # Email and SMS alerting (3 tests)\n\u251c\u2500\u2500 test_crypto_utils.py        # Encryption and obfuscation (12 tests)\n\u251c\u2500\u2500 test_log_parser.py          # Log parsing functionality (10 tests)\n\u251c\u2500\u2500 test_mitigation.py          # Threat mitigation strategies (22 tests)\n\u251c\u2500\u2500 test_monitor_service.py     # Main service orchestration (23 tests)\n\u251c\u2500\u2500 test_network_security.py    # Network-level security features (43 tests)\n\u251c\u2500\u2500 test_pattern_detector.py    # Attack pattern detection (16 tests)\n\u251c\u2500\u2500 test_plugin_system.py       # Plugin architecture (23 tests)\n\u251c\u2500\u2500 test_security_integrations.py # External security tools (13 tests)\n\u2514\u2500\u2500 test_service_protection.py  # Service self-protection (21 tests)\n</code></pre>"},{"location":"TESTING/#component-coverage","title":"Component Coverage","text":""},{"location":"TESTING/#high-coverage-components-70","title":"\ud83d\udfe2 High Coverage Components (70%+)","text":"<ul> <li>Log Parser: 100% coverage - Core log parsing functionality</li> <li>Pattern Detector: 95% coverage - Attack pattern detection algorithms</li> <li>Plugin System: 95% coverage - Plugin architecture and management</li> <li>Mitigation: 100% coverage - Threat mitigation strategies</li> <li>Network Security: 100% coverage - Network-level security features</li> <li>Service Protection: 80% coverage - Self-protection mechanisms</li> <li>Crypto Utils: 76% coverage - Encryption, decryption, and obfuscation</li> <li>SMS Alerts: 100% coverage - SMS notification system</li> </ul>"},{"location":"TESTING/#medium-coverage-components-50-70","title":"\ufffd Medium Coverage Components (50-70%)","text":"<ul> <li>Email Alerts: 68% coverage - Email notification system</li> <li>Security Integrations: 61% coverage - External tool integrations</li> <li>Monitor Service: 55% coverage - Main service orchestration</li> </ul>"},{"location":"TESTING/#low-coverage-components-50","title":"\ud83d\udd34 Low Coverage Components (&lt;50%)","text":"<ul> <li>None remaining! All components now have good test coverage.</li> </ul>"},{"location":"TESTING/#running-tests","title":"Running Tests","text":""},{"location":"TESTING/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\npytest\n\n# Run with verbose output\npytest -v\n\n# Run tests in parallel (faster)\npytest -n auto\n</code></pre>"},{"location":"TESTING/#coverage-reports","title":"Coverage Reports","text":"<pre><code># Terminal coverage report\npytest --cov=src --cov-report=term-missing\n\n# HTML coverage report (opens in browser)\npytest --cov=src --cov-report=html\nopen htmlcov/index.html  # macOS\n# or navigate to htmlcov/index.html in your browser\n\n# Generate coverage badge\ncoverage-badge -o coverage.svg\n</code></pre>"},{"location":"TESTING/#filtering-tests","title":"Filtering Tests","text":"<pre><code># Run tests by pattern\npytest -k \"test_sql_injection\"\npytest -k \"pattern_detector\"\n\n# Run tests by marker\npytest -m \"slow\"\npytest -m \"integration\"\n\n# Run specific test categories\npytest tests/test_pattern_detector.py  # Pattern detection tests\npytest tests/test_alerts.py           # Alert system tests\npytest tests/test_crypto_utils.py     # Cryptography tests\n</code></pre>"},{"location":"TESTING/#test-output-options","title":"Test Output Options","text":"<pre><code># Quiet mode (minimal output)\npytest -q\n\n# Show local variables on failure\npytest -l\n\n# Stop on first failure\npytest -x\n\n# Show test durations\npytest --durations=10\n</code></pre>"},{"location":"TESTING/#test-architecture","title":"Test Architecture","text":""},{"location":"TESTING/#mocking-strategy","title":"Mocking Strategy","text":"<p>Our tests use extensive mocking to ensure: - Independence: Tests don't depend on external services - Reliability: Consistent results across environments - Speed: Fast execution without network calls - Safety: No side effects on the system</p> <pre><code># Example: Mocking external commands\n@patch('subprocess.run')\ndef test_fail2ban_integration(self, mock_run):\n    mock_run.return_value = Mock(returncode=0, stdout=\"pong\")\n    # Test implementation\n</code></pre>"},{"location":"TESTING/#test-categories","title":"Test Categories","text":""},{"location":"TESTING/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test individual functions and methods</li> <li>Use mocks for external dependencies</li> <li>Fast execution (&lt; 1 second each)</li> </ul>"},{"location":"TESTING/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test component interactions</li> <li>Mock external services but test internal integration</li> <li>Medium execution time (1-5 seconds each)</li> </ul>"},{"location":"TESTING/#configuration-tests","title":"Configuration Tests","text":"<ul> <li>Test various configuration scenarios</li> <li>Ensure proper error handling</li> <li>Test edge cases and invalid inputs</li> </ul>"},{"location":"TESTING/#adding-new-tests","title":"Adding New Tests","text":""},{"location":"TESTING/#test-file-structure","title":"Test File Structure","text":"<pre><code>import unittest\nfrom unittest.mock import Mock, patch\nfrom src.your_module import YourClass\n\nclass TestYourClass(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up test fixtures before each test method.\"\"\"\n        self.instance = YourClass()\n\n    def test_basic_functionality(self):\n        \"\"\"Test description following conventions.\"\"\"\n        # Arrange\n        input_data = \"test_input\"\n        expected = \"expected_output\"\n\n        # Act\n        result = self.instance.method(input_data)\n\n        # Assert\n        self.assertEqual(result, expected)\n\n    @patch('external.dependency')\n    def test_with_mocking(self, mock_dependency):\n        \"\"\"Test with external dependency mocking.\"\"\"\n        # Configure mock\n        mock_dependency.return_value = \"mocked_result\"\n\n        # Test implementation\n        result = self.instance.method_using_dependency()\n\n        # Verify mock was called\n        mock_dependency.assert_called_once()\n        self.assertEqual(result, \"expected_with_mock\")\n</code></pre>"},{"location":"TESTING/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Test files: <code>test_&lt;module_name&gt;.py</code></li> <li>Test classes: <code>Test&lt;ClassName&gt;</code></li> <li>Test methods: <code>test_&lt;functionality_being_tested&gt;</code></li> <li>Descriptive names: Use clear, descriptive names that explain what is being tested</li> </ul>"},{"location":"TESTING/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Arrange-Act-Assert Pattern <pre><code>def test_example(self):\n    # Arrange: Set up test data\n    input_data = \"test\"\n\n    # Act: Execute the code under test\n    result = function_under_test(input_data)\n\n    # Assert: Verify the results\n    self.assertEqual(result, expected_value)\n</code></pre></p> </li> <li> <p>Use Descriptive Test Names <pre><code># Good\ndef test_detect_sql_injection_with_union_select(self):\n\n# Bad\ndef test_sql(self):\n</code></pre></p> </li> <li> <p>Test Edge Cases</p> </li> <li>Empty inputs</li> <li>Invalid inputs</li> <li>Boundary conditions</li> <li> <p>Error conditions</p> </li> <li> <p>Mock External Dependencies <pre><code>@patch('requests.get')\n@patch('smtplib.SMTP')\ndef test_external_service_integration(self, mock_smtp, mock_requests):\n    # Configure mocks\n    mock_requests.return_value.status_code = 200\n    mock_smtp.return_value.__enter__.return_value = Mock()\n\n    # Test implementation\n</code></pre></p> </li> </ol>"},{"location":"TESTING/#continuous-integration","title":"Continuous Integration","text":""},{"location":"TESTING/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># Install pre-commit hooks\npip install pre-commit\npre-commit install\n\n# Run manually\npre-commit run --all-files\n</code></pre>"},{"location":"TESTING/#test-automation","title":"Test Automation","text":"<p>The project includes GitHub Actions workflows for: - Running tests on multiple Python versions - Generating coverage reports - Code quality checks - Security scanning</p>"},{"location":"TESTING/#troubleshooting","title":"Troubleshooting","text":""},{"location":"TESTING/#common-issues","title":"Common Issues","text":""},{"location":"TESTING/#virtual-environment-dependencies","title":"Virtual Environment &amp; Dependencies","text":"<pre><code># If you can't activate the virtual environment\nchmod +x .venv/bin/activate  # Linux/macOS\n\n# If wrong Python version or need to recreate\npython3 -m venv --clear .venv  # Recreate virtual environment\nsource .venv/bin/activate\npip install -r requirements.txt\npip install -r dev-requirements.txt\n\n# If you have dependency conflicts\npip uninstall pytest pytest-cov pytest-mock\npip install -r dev-requirements.txt\npip check  # Check for remaining conflicts\n\n# If Python can't find modules (import errors)\npip install -e .  # Install project in development mode\n</code></pre>"},{"location":"TESTING/#test-execution-issues","title":"Test Execution Issues","text":"<pre><code># Clean coverage data and re-run\ncoverage erase\npytest --cov=src --cov-report=term-missing\n\n# Debug test failures\npytest --pdb  # Run with Python debugger\npytest -v --tb=long  # Verbose output with full tracebacks\n\n# Check specific test issues\npytest tests/test_specific.py::TestClass::test_method -v\n</code></pre>"},{"location":"TESTING/#mock-related-failures","title":"Mock-related Failures","text":"<ul> <li>Ensure mocks match the actual API signatures</li> <li>Use <code>patch</code> decorators in the correct order</li> <li>Verify mock return values match expected types</li> </ul>"},{"location":"TESTING/#debugging-tests","title":"Debugging Tests","text":"<pre><code># Run with Python debugger\npytest --pdb\n\n# Show detailed output for failures\npytest -v --tb=long\n\n# Add temporary debug output (remove before commit)\ndef test_debug_example(self):\n    result = function_under_test()\n    print(f\"Debug: result = {result}\")\n    self.assertEqual(result, expected)\n</code></pre>"},{"location":"TESTING/#performance-testing","title":"Performance Testing","text":""},{"location":"TESTING/#benchmark-tests","title":"Benchmark Tests","text":"<pre><code># Install pytest-benchmark\npip install pytest-benchmark\n\n# Run benchmark tests\npytest --benchmark-only\n</code></pre>"},{"location":"TESTING/#memory-profiling","title":"Memory Profiling","text":"<pre><code># Install memory profiler\npip install memory-profiler\n\n# Profile specific test\npytest --profile\n</code></pre>"},{"location":"TESTING/#contributing-tests","title":"Contributing Tests","text":""},{"location":"TESTING/#before-submitting","title":"Before Submitting","text":"<ol> <li> <p>Run the full test suite <pre><code>pytest --cov=src --cov-report=term-missing\n</code></pre></p> </li> <li> <p>Ensure no regressions</p> </li> <li>All existing tests must pass</li> <li> <p>New tests should follow established patterns</p> </li> <li> <p>Update documentation</p> </li> <li>Add docstrings to new test methods</li> <li>Update this file if adding new test categories</li> </ol>"},{"location":"TESTING/#test-review-checklist","title":"Test Review Checklist","text":"<ul> <li> Tests follow naming conventions</li> <li> Appropriate use of mocks</li> <li> Edge cases covered</li> <li> Clear and descriptive test names</li> <li> No external dependencies in tests</li> <li> Tests are deterministic</li> <li> Performance considerations addressed</li> </ul>"},{"location":"TESTING/#resources","title":"Resources","text":"<ul> <li>pytest Documentation</li> <li>unittest.mock Documentation</li> <li>Coverage.py Documentation</li> <li>Testing Best Practices</li> </ul>"},{"location":"TESTING_KEYS/","title":"Testing Keys and Development Setup","text":""},{"location":"TESTING_KEYS/#overview","title":"Overview","text":"<p>This guide provides information about test master keys and setup for development and testing of the NGINX Security Monitor encryption utilities.</p>"},{"location":"TESTING_KEYS/#test-master-keys","title":"Test Master Keys","text":""},{"location":"TESTING_KEYS/#quick-setup","title":"Quick Setup","text":"<p>For development and testing, use the standard test key:</p> <pre><code>export NGINX_MONITOR_KEY=\"test_key\"\n</code></pre>"},{"location":"TESTING_KEYS/#available-test-keys","title":"Available Test Keys","text":"Key Usage Description <code>test_key</code> Most Common Used throughout test suite, recommended for development <code>default_test_key_for_testing_only</code> Fallback Built-in fallback in <code>crypto_utils.py</code> when no env var is set <code>test_key_1234567890123456</code> Extended 16+ character version for specific encryption tests"},{"location":"TESTING_KEYS/#when-prompted-by-utilities","title":"When Prompted by Utilities","text":""},{"location":"TESTING_KEYS/#encrypt_configpy","title":"encrypt_config.py","text":"<p>When the utility prompts for a master key: <pre><code>Enter your master key: test_key\n</code></pre></p>"},{"location":"TESTING_KEYS/#development-scripts","title":"Development Scripts","text":"<p>Set environment variable before running: <pre><code>export NGINX_MONITOR_KEY=\"test_key\"\npython encrypt_config.py encrypt-patterns\n</code></pre></p>"},{"location":"TESTING_KEYS/#testing","title":"Testing","text":"<p>All automated tests use mocked keys via patching - no manual setup needed: <pre><code>pytest tests/test_encrypt_config_util.py\npytest tests/test_crypto_utils_advanced.py\n</code></pre></p>"},{"location":"TESTING_KEYS/#utility-coverage-status","title":"Utility Coverage Status","text":""},{"location":"TESTING_KEYS/#encrypt_configpy-91-coverage","title":"\u2705 encrypt_config.py (91% Coverage)","text":"<ul> <li>Test Suite: 23 comprehensive test cases</li> <li>Coverage: 205 statements, 18 missing (91%)</li> <li>Master Key: Required - use <code>test_key</code></li> <li>Features Tested: Pattern encryption, config sections, plugin generation, CLI actions</li> </ul>"},{"location":"TESTING_KEYS/#security_integrations_utilpy-91-coverage","title":"\u2705 security_integrations_util.py (91% Coverage)","text":"<ul> <li>Test Suite: 16 comprehensive test cases  </li> <li>Coverage: 202 statements, 19 missing (91%)</li> <li>Master Key: Not required</li> <li>Features Tested: Fail2ban setup, OSSEC integration, service detection, configuration</li> </ul>"},{"location":"TESTING_KEYS/#security-notes","title":"Security Notes","text":"<p>\u26a0\ufe0f Important: These keys are for development and testing only!</p> <ul> <li>\u2705 Safe for: Local development, automated testing, CI/CD pipelines</li> <li>\u274c Not for: Production deployments, live security monitoring</li> <li>\ud83d\udd12 Production: Use <code>generate_master_key()</code> function to create secure keys</li> </ul>"},{"location":"TESTING_KEYS/#integration-with-test-suite","title":"Integration with Test Suite","text":"<p>The test suite automatically handles key management:</p> <pre><code># In tests - keys are automatically mocked\n@patch(\"os.environ.get\", return_value=\"test_key\")\ndef test_encryption_feature(self, mock_env):\n    # Test logic here - uses mocked key\n    pass\n</code></pre>"},{"location":"TESTING_KEYS/#troubleshooting","title":"Troubleshooting","text":""},{"location":"TESTING_KEYS/#common-issues","title":"Common Issues","text":"<ol> <li> <p>\"No master key set\" error:    <pre><code>export NGINX_MONITOR_KEY=\"test_key\"\n</code></pre></p> </li> <li> <p>Permission denied on key file:    <pre><code>chmod 600 ~/.nginx-monitor/master.key\n</code></pre></p> </li> <li> <p>Test failures with crypto errors:</p> </li> <li>Ensure <code>cryptography</code> package is installed</li> <li>Verify test environment has proper Python version (3.8+)</li> </ol>"},{"location":"TESTING_KEYS/#verification-commands","title":"Verification Commands","text":"<p>Test that encryption is working: <pre><code># Quick test\npython -c \"\nimport os\nos.environ['NGINX_MONITOR_KEY'] = 'test_key'\nfrom src.crypto_utils import CryptoUtils\ncrypto = CryptoUtils()\ntest_data = 'Hello, World!'\nencrypted = crypto.encrypt_data(test_data)\ndecrypted = crypto.decrypt_data(encrypted)\nprint(f'Success: {test_data == decrypted}')\n\"\n</code></pre></p>"},{"location":"TESTING_KEYS/#next-steps","title":"Next Steps","text":"<ol> <li>For Contributors: Use <code>test_key</code> for all development work</li> <li>For Testing: Run <code>pytest tests/test_*_util.py</code> to verify utility coverage</li> <li>For Production: Generate secure keys with <code>encrypt_config.py</code> utility</li> <li>For Documentation: Update this guide when adding new utilities</li> </ol> <p>Last Updated: Coverage finalization - utility scripts now at 91% coverage each Test Suite Status: 39 utility tests passing, comprehensive coverage achieved</p>"},{"location":"TROUBLESHOOTING/","title":"\ud83d\udd27 Troubleshooting Guide - NGINX Security Monitor","text":""},{"location":"TROUBLESHOOTING/#overview","title":"\ud83c\udfaf Overview","text":"<p>This comprehensive troubleshooting guide helps you diagnose and resolve common issues with the NGINX Security Monitor. It includes step-by-step diagnostic procedures, solutions for typical problems, and guidance for when to escalate issues.</p>"},{"location":"TROUBLESHOOTING/#quick-diagnostic-checklist","title":"\ud83d\udea8 Quick Diagnostic Checklist","text":"<p>When experiencing issues, start with this quick checklist:</p> <pre><code># 1. Check service status\nsudo systemctl status nginx-security-monitor\n\n# 2. Check recent logs\nsudo journalctl -u nginx-security-monitor --lines=50\n\n# 3. Verify configuration\npython3 -m src.config_validator /etc/nginx-security/settings.yaml\n\n# 4. Check resource usage\nps aux | grep nginx-security\nfree -h\ndf -h /var/log/nginx-security\n\n# 5. Test API connectivity\ncurl -I http://localhost:8080/health\n\n# 6. Check file permissions\nls -la /etc/nginx-security/\nls -la /var/log/nginx-security/\n</code></pre>"},{"location":"TROUBLESHOOTING/#service-issues","title":"\ud83d\udd0d Service Issues","text":""},{"location":"TROUBLESHOOTING/#service-wont-start","title":"Service Won't Start","text":""},{"location":"TROUBLESHOOTING/#symptoms","title":"Symptoms:","text":"<ul> <li><code>systemctl start nginx-security-monitor</code> fails</li> <li>Service shows \"failed\" status</li> <li>No processes visible</li> </ul>"},{"location":"TROUBLESHOOTING/#diagnostic-steps","title":"Diagnostic Steps:","text":"<pre><code># Check detailed status\nsudo systemctl status nginx-security-monitor -l\n\n# Check service logs\nsudo journalctl -u nginx-security-monitor --since \"10 minutes ago\"\n\n# Check systemd service file\nsudo systemctl cat nginx-security-monitor\n\n# Test manual start\ncd /opt/nginx-security-monitor\nsudo -u nginx-security python3 -m src.monitor_service --config /etc/nginx-security/settings.yaml --debug\n</code></pre>"},{"location":"TROUBLESHOOTING/#common-causes-and-solutions","title":"Common Causes and Solutions:","text":""},{"location":"TROUBLESHOOTING/#1-configuration-errors","title":"1. Configuration Errors","text":"<pre><code># Validate configuration\npython3 -m src.config_validator /etc/nginx-security/settings.yaml\n\n# Common configuration issues:\n# - Invalid YAML syntax\n# - Missing required fields\n# - Incorrect file paths\n# - Invalid log format specifications\n</code></pre> <p>Solution: <pre><code># Check for YAML syntax errors\npython3 -c \"import yaml; yaml.safe_load(open('/etc/nginx-security/settings.yaml'))\"\n\n# Use configuration template\ncp /opt/nginx-security-monitor/config/settings.yaml.example /etc/nginx-security/settings.yaml\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#2-permission-issues","title":"2. Permission Issues","text":"<pre><code># Check file ownership\nls -la /etc/nginx-security/\nls -la /var/log/nginx-security/\nls -la /var/lib/nginx-security/\n\n# Expected ownership: nginx-security:nginx-security\n</code></pre> <p>Solution: <pre><code># Fix ownership\nsudo chown -R nginx-security:nginx-security /etc/nginx-security/\nsudo chown -R nginx-security:nginx-security /var/log/nginx-security/\nsudo chown -R nginx-security:nginx-security /var/lib/nginx-security/\n\n# Fix permissions\nsudo chmod 755 /var/log/nginx-security/\nsudo chmod 640 /etc/nginx-security/*.yaml\nsudo chmod 600 /etc/nginx-security/keys/* 2&gt;/dev/null || true\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#3-missing-dependencies","title":"3. Missing Dependencies","text":"<pre><code># Check Python dependencies\npip3 list | grep -E \"(PyYAML|requests|cryptography)\"\n\n# Check system dependencies\nwhich python3\npython3 --version\n</code></pre> <p>Solution: <pre><code># Install missing dependencies\npip3 install -r /opt/nginx-security-monitor/requirements.txt\n\n# For system packages\nsudo apt-get update\nsudo apt-get install python3 python3-pip python3-yaml\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#4-port-already-in-use","title":"4. Port Already in Use","text":"<pre><code># Check if port is already in use\nsudo netstat -tlnp | grep :8080\nsudo lsof -i :8080\n</code></pre> <p>Solution: <pre><code># Change port in configuration\nsudo nano /etc/nginx-security/settings.yaml\n# Update web_interface: port: 8081\n\n# Or stop conflicting service\nsudo systemctl stop &lt;conflicting-service&gt;\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#service-crashes-frequently","title":"Service Crashes Frequently","text":""},{"location":"TROUBLESHOOTING/#symptoms_1","title":"Symptoms:","text":"<ul> <li>Service starts but stops after a short time</li> <li>Frequent restart messages in logs</li> <li>High memory usage before crashes</li> </ul>"},{"location":"TROUBLESHOOTING/#diagnostic-steps_1","title":"Diagnostic Steps:","text":"<pre><code># Check crash logs\nsudo journalctl -u nginx-security-monitor --since \"1 hour ago\" | grep -E \"(failed|error|crash|killed)\"\n\n# Check system resources\nfree -h\ndf -h\nsudo dmesg | tail -20\n\n# Monitor service in real-time\nsudo journalctl -u nginx-security-monitor -f\n</code></pre>"},{"location":"TROUBLESHOOTING/#common-causes-and-solutions_1","title":"Common Causes and Solutions:","text":""},{"location":"TROUBLESHOOTING/#1-memory-leaks","title":"1. Memory Leaks","text":"<pre><code># Monitor memory usage\nwatch -n 5 'ps aux | grep nginx-security'\n\n# Check for large log files\ndu -sh /var/log/nginx-security/*\n</code></pre> <p>Solution: <pre><code># Implement log rotation\nsudo logrotate /etc/logrotate.d/nginx-security-monitor\n\n# Adjust memory limits in systemd\nsudo systemctl edit nginx-security-monitor\n# Add:\n# [Service]\n# MemoryMax=512M\n# MemoryAccounting=yes\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#2-unhandled-exceptions","title":"2. Unhandled Exceptions","text":"<pre><code># Enable debug logging\nsudo nano /etc/nginx-security/settings.yaml\n# Set: logging: level: DEBUG\n\n# Check detailed error logs\nsudo tail -f /var/log/nginx-security/error.log\n</code></pre> <p>Solution: <pre><code># Update to latest version\nsudo /opt/nginx-security-monitor/scripts/upgrade.sh latest\n\n# Report bug with logs\n# Submit issue to GitHub with error details\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#performance-issues","title":"\ud83d\udcca Performance Issues","text":""},{"location":"TROUBLESHOOTING/#high-cpu-usage","title":"High CPU Usage","text":""},{"location":"TROUBLESHOOTING/#symptoms_2","title":"Symptoms:","text":"<ul> <li>System load average consistently high</li> <li>NGINX Security Monitor processes consuming excessive CPU</li> <li>Slow response times</li> </ul>"},{"location":"TROUBLESHOOTING/#diagnostic-steps_2","title":"Diagnostic Steps:","text":"<pre><code># Check CPU usage by process\ntop -p $(pgrep -d',' -f nginx-security)\n\n# Profile CPU usage\nsudo perf top -p $(pgrep nginx-security-monitor)\n\n# Check for CPU-intensive patterns\nsudo strace -p $(pgrep nginx-security-monitor) -c -f\n</code></pre>"},{"location":"TROUBLESHOOTING/#solutions","title":"Solutions:","text":""},{"location":"TROUBLESHOOTING/#1-optimize-pattern-detection","title":"1. Optimize Pattern Detection","text":"<pre><code># /etc/nginx-security/settings.yaml\npattern_detection:\n  # Reduce pattern complexity\n  max_patterns_per_check: 50\n\n  # Enable pattern caching\n  pattern_cache:\n    enabled: true\n    max_size: 1000\n    ttl: 300\n\n  # Batch processing\n  batch_size: 100\n  batch_timeout: 5\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-reduce-log-processing-load","title":"2. Reduce Log Processing Load","text":"<pre><code># Implement sampling for high-volume logs\nlog_processing:\n  sampling:\n    enabled: true\n    rate: 0.1  # Process 10% of logs\n\n  # Parallel processing\n  workers: 4\n  queue_size: 1000\n</code></pre>"},{"location":"TROUBLESHOOTING/#3-optimize-regular-expressions","title":"3. Optimize Regular Expressions","text":"<pre><code># scripts/optimize_patterns.py\n#!/usr/bin/env python3\n\"\"\"Optimize regex patterns for better performance.\"\"\"\n\nimport re\nimport json\nimport time\nfrom typing import List, Dict, Any\n\ndef benchmark_pattern(pattern: str, test_strings: List[str], iterations: int = 1000) -&gt; float:\n    \"\"\"Benchmark regex pattern performance.\"\"\"\n    compiled_pattern = re.compile(pattern, re.IGNORECASE)\n\n    start_time = time.time()\n    for _ in range(iterations):\n        for test_string in test_strings:\n            compiled_pattern.search(test_string)\n    end_time = time.time()\n\n    return (end_time - start_time) / iterations\n\ndef optimize_patterns():\n    \"\"\"Identify and optimize slow patterns.\"\"\"\n    with open('/etc/nginx-security/patterns.json', 'r') as f:\n        patterns = json.load(f)\n\n    test_urls = [\n        \"/index.html\",\n        \"/admin/login.php\",\n        \"/search?q=test\",\n        \"/api/users/1\",\n        \"/../../../etc/passwd\"\n    ]\n\n    slow_patterns = []\n\n    for pattern_name, pattern_data in patterns.items():\n        pattern = pattern_data.get('pattern', '')\n        if pattern:\n            execution_time = benchmark_pattern(pattern, test_urls)\n\n            if execution_time &gt; 0.001:  # 1ms threshold\n                slow_patterns.append({\n                    'name': pattern_name,\n                    'pattern': pattern,\n                    'execution_time': execution_time\n                })\n\n    # Sort by execution time\n    slow_patterns.sort(key=lambda x: x['execution_time'], reverse=True)\n\n    print(\"Slow patterns detected:\")\n    for pattern in slow_patterns[:10]:\n        print(f\"- {pattern['name']}: {pattern['execution_time']:.4f}s\")\n        print(f\"  Pattern: {pattern['pattern'][:100]}\")\n\nif __name__ == \"__main__\":\n    optimize_patterns()\n</code></pre>"},{"location":"TROUBLESHOOTING/#high-memory-usage","title":"High Memory Usage","text":""},{"location":"TROUBLESHOOTING/#symptoms_3","title":"Symptoms:","text":"<ul> <li>Increasing memory consumption over time</li> <li>System running out of memory</li> <li>OOM (Out of Memory) kills</li> </ul>"},{"location":"TROUBLESHOOTING/#diagnostic-steps_3","title":"Diagnostic Steps:","text":"<pre><code># Monitor memory usage\nsudo pmap -x $(pgrep nginx-security-monitor)\n\n# Check for memory leaks\nvalgrind --leak-check=full python3 -m src.monitor_service\n\n# Memory profiling\npython3 -m memory_profiler /opt/nginx-security-monitor/src/monitor_service.py\n</code></pre>"},{"location":"TROUBLESHOOTING/#solutions_1","title":"Solutions:","text":""},{"location":"TROUBLESHOOTING/#1-configure-memory-limits","title":"1. Configure Memory Limits","text":"<pre><code># /etc/nginx-security/settings.yaml\nperformance:\n  memory:\n    max_cache_size: \"256MB\"\n    log_buffer_size: \"64MB\"\n    pattern_cache_size: \"32MB\"\n\n  # Enable garbage collection\n  garbage_collection:\n    enabled: true\n    threshold: 1000\n    interval: 300\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-implement-memory-monitoring","title":"2. Implement Memory Monitoring","text":"<pre><code># scripts/memory_monitor.py\n#!/usr/bin/env python3\n\"\"\"Monitor memory usage and detect leaks.\"\"\"\n\nimport psutil\nimport time\nimport gc\nfrom collections import deque\n\nclass MemoryMonitor:\n    def __init__(self, process_name: str = \"nginx-security-monitor\"):\n        self.process_name = process_name\n        self.memory_history = deque(maxlen=100)\n\n    def monitor_memory(self, duration: int = 300):\n        \"\"\"Monitor memory usage for specified duration.\"\"\"\n        for process in psutil.process_iter(['pid', 'name', 'memory_info']):\n            if self.process_name in process.info['name']:\n                pid = process.info['pid']\n\n                for _ in range(duration):\n                    try:\n                        proc = psutil.Process(pid)\n                        memory_mb = proc.memory_info().rss / 1024 / 1024\n                        self.memory_history.append({\n                            'timestamp': time.time(),\n                            'memory_mb': memory_mb\n                        })\n\n                        # Check for memory leak\n                        if len(self.memory_history) &gt;= 10:\n                            recent_avg = sum(m['memory_mb'] for m in list(self.memory_history)[-10:]) / 10\n                            old_avg = sum(m['memory_mb'] for m in list(self.memory_history)[:10]) / 10\n\n                            if recent_avg &gt; old_avg * 1.5:  # 50% increase\n                                print(f\"WARNING: Potential memory leak detected!\")\n                                print(f\"Old average: {old_avg:.2f}MB\")\n                                print(f\"Recent average: {recent_avg:.2f}MB\")\n\n                        time.sleep(1)\n\n                    except psutil.NoSuchProcess:\n                        break\n\nif __name__ == \"__main__\":\n    monitor = MemoryMonitor()\n    monitor.monitor_memory(300)  # Monitor for 5 minutes\n</code></pre>"},{"location":"TROUBLESHOOTING/#configuration-issues","title":"\ud83d\udd27 Configuration Issues","text":""},{"location":"TROUBLESHOOTING/#invalid-configuration","title":"Invalid Configuration","text":""},{"location":"TROUBLESHOOTING/#symptoms_4","title":"Symptoms:","text":"<ul> <li>Service fails to start with configuration errors</li> <li>Warning messages about configuration</li> <li>Features not working as expected</li> </ul>"},{"location":"TROUBLESHOOTING/#diagnostic-script","title":"Diagnostic Script:","text":"<pre><code># scripts/config_diagnostics.py\n#!/usr/bin/env python3\n\"\"\"Comprehensive configuration diagnostics.\"\"\"\n\nimport yaml\nimport os\nimport json\nimport jsonschema\nfrom typing import Dict, Any, List\n\nclass ConfigDiagnostics:\n    def __init__(self, config_path: str):\n        self.config_path = config_path\n\n    def validate_yaml_syntax(self) -&gt; Dict[str, Any]:\n        \"\"\"Validate YAML syntax.\"\"\"\n        try:\n            with open(self.config_path, 'r') as f:\n                yaml.safe_load(f)\n            return {'valid': True, 'message': 'YAML syntax is valid'}\n        except yaml.YAMLError as e:\n            return {'valid': False, 'message': f'YAML syntax error: {e}'}\n        except FileNotFoundError:\n            return {'valid': False, 'message': f'Configuration file not found: {self.config_path}'}\n\n    def validate_schema(self) -&gt; Dict[str, Any]:\n        \"\"\"Validate configuration against schema.\"\"\"\n        schema = {\n            \"type\": \"object\",\n            \"required\": [\"logging\", \"monitoring\", \"patterns\"],\n            \"properties\": {\n                \"logging\": {\n                    \"type\": \"object\",\n                    \"required\": [\"level\", \"file\"],\n                    \"properties\": {\n                        \"level\": {\"type\": \"string\", \"enum\": [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]},\n                        \"file\": {\"type\": \"string\"}\n                    }\n                },\n                \"monitoring\": {\n                    \"type\": \"object\",\n                    \"required\": [\"log_files\"],\n                    \"properties\": {\n                        \"log_files\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}\n                    }\n                },\n                \"patterns\": {\n                    \"type\": \"object\",\n                    \"required\": [\"file\"],\n                    \"properties\": {\n                        \"file\": {\"type\": \"string\"}\n                    }\n                }\n            }\n        }\n\n        try:\n            with open(self.config_path, 'r') as f:\n                config = yaml.safe_load(f)\n\n            jsonschema.validate(config, schema)\n            return {'valid': True, 'message': 'Configuration schema is valid'}\n        except jsonschema.ValidationError as e:\n            return {'valid': False, 'message': f'Schema validation error: {e.message}'}\n        except Exception as e:\n            return {'valid': False, 'message': f'Validation error: {e}'}\n\n    def check_file_paths(self) -&gt; Dict[str, Any]:\n        \"\"\"Check if referenced files exist.\"\"\"\n        try:\n            with open(self.config_path, 'r') as f:\n                config = yaml.safe_load(f)\n        except Exception as e:\n            return {'valid': False, 'message': f'Cannot load config: {e}'}\n\n        issues = []\n\n        # Check log files\n        log_files = config.get('monitoring', {}).get('log_files', [])\n        for log_file in log_files:\n            if not os.path.exists(log_file):\n                issues.append(f'Log file not found: {log_file}')\n\n        # Check patterns file\n        patterns_file = config.get('patterns', {}).get('file', '')\n        if patterns_file and not os.path.exists(patterns_file):\n            issues.append(f'Patterns file not found: {patterns_file}')\n\n        # Check SSL certificates\n        ssl_config = config.get('web_interface', {}).get('ssl', {})\n        if ssl_config.get('enabled'):\n            cert_file = ssl_config.get('cert_file')\n            key_file = ssl_config.get('key_file')\n\n            if cert_file and not os.path.exists(cert_file):\n                issues.append(f'SSL certificate not found: {cert_file}')\n            if key_file and not os.path.exists(key_file):\n                issues.append(f'SSL key file not found: {key_file}')\n\n        return {\n            'valid': len(issues) == 0,\n            'issues': issues,\n            'message': f'Found {len(issues)} file path issues' if issues else 'All file paths are valid'\n        }\n\n    def check_permissions(self) -&gt; Dict[str, Any]:\n        \"\"\"Check file permissions.\"\"\"\n        try:\n            with open(self.config_path, 'r') as f:\n                config = yaml.safe_load(f)\n        except Exception as e:\n            return {'valid': False, 'message': f'Cannot load config: {e}'}\n\n        issues = []\n\n        # Check log directory permissions\n        log_files = config.get('monitoring', {}).get('log_files', [])\n        for log_file in log_files:\n            log_dir = os.path.dirname(log_file)\n            if os.path.exists(log_dir):\n                stat = os.stat(log_dir)\n                if not (stat.st_mode &amp; 0o200):  # Check write permission\n                    issues.append(f'No write permission for log directory: {log_dir}')\n\n        # Check patterns file permissions\n        patterns_file = config.get('patterns', {}).get('file', '')\n        if patterns_file and os.path.exists(patterns_file):\n            stat = os.stat(patterns_file)\n            if not (stat.st_mode &amp; 0o400):  # Check read permission\n                issues.append(f'No read permission for patterns file: {patterns_file}')\n\n        return {\n            'valid': len(issues) == 0,\n            'issues': issues,\n            'message': f'Found {len(issues)} permission issues' if issues else 'All permissions are correct'\n        }\n\n    def run_full_diagnostics(self) -&gt; Dict[str, Any]:\n        \"\"\"Run all diagnostic checks.\"\"\"\n        results = {\n            'config_file': self.config_path,\n            'checks': {\n                'yaml_syntax': self.validate_yaml_syntax(),\n                'schema_validation': self.validate_schema(),\n                'file_paths': self.check_file_paths(),\n                'permissions': self.check_permissions()\n            }\n        }\n\n        # Overall status\n        all_valid = all(check['valid'] for check in results['checks'].values())\n        results['overall_status'] = 'valid' if all_valid else 'invalid'\n\n        return results\n\nif __name__ == \"__main__\":\n    import sys\n\n    config_file = sys.argv[1] if len(sys.argv) &gt; 1 else '/etc/nginx-security/settings.yaml'\n\n    diagnostics = ConfigDiagnostics(config_file)\n    results = diagnostics.run_full_diagnostics()\n\n    print(json.dumps(results, indent=2))\n\n    if results['overall_status'] != 'valid':\n        sys.exit(1)\n</code></pre>"},{"location":"TROUBLESHOOTING/#pattern-detection-issues","title":"Pattern Detection Issues","text":""},{"location":"TROUBLESHOOTING/#symptoms_5","title":"Symptoms:","text":"<ul> <li>Threats not being detected</li> <li>False positives</li> <li>Pattern loading errors</li> </ul>"},{"location":"TROUBLESHOOTING/#diagnostic-steps_4","title":"Diagnostic Steps:","text":"<pre><code># Test pattern loading\npython3 -c \"\nfrom src.pattern_detector import PatternDetector\ndetector = PatternDetector('/etc/nginx-security/patterns.json')\nprint('Patterns loaded successfully')\nprint(f'Total patterns: {len(detector.patterns)}')\n\"\n\n# Test specific pattern\npython3 -c \"\nfrom src.pattern_detector import PatternDetector\ndetector = PatternDetector('/etc/nginx-security/patterns.json')\ntest_entry = {\n    'ip': '192.168.1.100',\n    'url': '/admin.php',\n    'method': 'GET',\n    'status': 200\n}\nthreats = detector.detect_threats(test_entry)\nprint(f'Detected threats: {len(threats)}')\nfor threat in threats:\n    print(f'- {threat[\\\"threat_type\\\"]}: {threat[\\\"description\\\"]}')\n\"\n</code></pre>"},{"location":"TROUBLESHOOTING/#pattern-testing-tool","title":"Pattern Testing Tool:","text":"<pre><code># scripts/test_patterns.py\n#!/usr/bin/env python3\n\"\"\"Test pattern detection with sample data.\"\"\"\n\nimport json\nimport sys\nfrom src.pattern_detector import PatternDetector\n\ndef test_patterns():\n    \"\"\"Test patterns with various input scenarios.\"\"\"\n\n    # Load pattern detector\n    try:\n        detector = PatternDetector('/etc/nginx-security/patterns.json')\n        print(f\"Loaded {len(detector.patterns)} patterns\")\n    except Exception as e:\n        print(f\"Error loading patterns: {e}\")\n        return False\n\n    # Test cases\n    test_cases = [\n        {\n            'name': 'SQL Injection',\n            'log_entry': {\n                'ip': '192.168.1.100',\n                'url': '/search?q=1\\' OR \\'1\\'=\\'1',\n                'method': 'GET',\n                'status': 200,\n                'user_agent': 'Mozilla/5.0'\n            },\n            'expected_threats': ['sql_injection']\n        },\n        {\n            'name': 'Admin Access',\n            'log_entry': {\n                'ip': '192.168.1.101',\n                'url': '/admin/login.php',\n                'method': 'POST',\n                'status': 200,\n                'user_agent': 'Mozilla/5.0'\n            },\n            'expected_threats': ['admin_access']\n        },\n        {\n            'name': 'Directory Traversal',\n            'log_entry': {\n                'ip': '192.168.1.102',\n                'url': '/../../../etc/passwd',\n                'method': 'GET',\n                'status': 404,\n                'user_agent': 'curl/7.68.0'\n            },\n            'expected_threats': ['directory_traversal']\n        },\n        {\n            'name': 'Normal Request',\n            'log_entry': {\n                'ip': '192.168.1.103',\n                'url': '/index.html',\n                'method': 'GET',\n                'status': 200,\n                'user_agent': 'Mozilla/5.0'\n            },\n            'expected_threats': []\n        }\n    ]\n\n    results = []\n\n    for test_case in test_cases:\n        try:\n            threats = detector.detect_threats(test_case['log_entry'])\n            detected_types = [threat['threat_type'] for threat in threats]\n\n            # Check if expected threats were detected\n            expected = set(test_case['expected_threats'])\n            detected = set(detected_types)\n\n            success = expected == detected\n\n            results.append({\n                'test_name': test_case['name'],\n                'success': success,\n                'expected': list(expected),\n                'detected': list(detected),\n                'threats': threats\n            })\n\n            status = \"PASS\" if success else \"FAIL\"\n            print(f\"{status}: {test_case['name']}\")\n            if not success:\n                print(f\"  Expected: {expected}\")\n                print(f\"  Detected: {detected}\")\n\n        except Exception as e:\n            print(f\"ERROR: {test_case['name']} - {e}\")\n            results.append({\n                'test_name': test_case['name'],\n                'success': False,\n                'error': str(e)\n            })\n\n    # Summary\n    passed = sum(1 for r in results if r.get('success', False))\n    total = len(results)\n    print(f\"\\nTest Results: {passed}/{total} passed\")\n\n    return passed == total\n\nif __name__ == \"__main__\":\n    success = test_patterns()\n    sys.exit(0 if success else 1)\n</code></pre>"},{"location":"TROUBLESHOOTING/#network-and-connectivity-issues","title":"\ud83c\udf10 Network and Connectivity Issues","text":""},{"location":"TROUBLESHOOTING/#api-not-responding","title":"API Not Responding","text":""},{"location":"TROUBLESHOOTING/#symptoms_6","title":"Symptoms:","text":"<ul> <li>Web interface not accessible</li> <li>API endpoints timing out</li> <li>Connection refused errors</li> </ul>"},{"location":"TROUBLESHOOTING/#diagnostic-steps_5","title":"Diagnostic Steps:","text":"<pre><code># Check if service is listening\nsudo netstat -tlnp | grep :8080\nsudo ss -tlnp | grep :8080\n\n# Test local connectivity\ncurl -v http://localhost:8080/health\ncurl -v http://127.0.0.1:8080/health\n\n# Check firewall rules\nsudo iptables -L | grep 8080\nsudo ufw status | grep 8080\n\n# Test from external host\ntelnet your-server-ip 8080\n</code></pre>"},{"location":"TROUBLESHOOTING/#solutions_2","title":"Solutions:","text":""},{"location":"TROUBLESHOOTING/#1-firewall-configuration","title":"1. Firewall Configuration","text":"<pre><code># Allow traffic on the configured port\nsudo ufw allow 8080/tcp\nsudo iptables -A INPUT -p tcp --dport 8080 -j ACCEPT\n\n# For systemd-resolved issues\nsudo systemctl restart systemd-resolved\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-binding-issues","title":"2. Binding Issues","text":"<pre><code># /etc/nginx-security/settings.yaml\nweb_interface:\n  host: \"0.0.0.0\"  # Listen on all interfaces\n  port: 8080\n\n  # Or bind to specific interface\n  # host: \"192.168.1.100\"\n</code></pre>"},{"location":"TROUBLESHOOTING/#3-ssltls-issues","title":"3. SSL/TLS Issues","text":"<pre><code># Test SSL configuration\nopenssl s_client -connect localhost:8443 -servername localhost\n\n# Check certificate validity\nopenssl x509 -in /etc/nginx-security/ssl/cert.pem -text -noout\n\n# Verify certificate chain\nopenssl verify -CAfile /etc/nginx-security/ssl/ca.pem /etc/nginx-security/ssl/cert.pem\n</code></pre>"},{"location":"TROUBLESHOOTING/#log-file-access-issues","title":"Log File Access Issues","text":""},{"location":"TROUBLESHOOTING/#symptoms_7","title":"Symptoms:","text":"<ul> <li>\"Permission denied\" errors in logs</li> <li>No threat detection activity</li> <li>Log parsing errors</li> </ul>"},{"location":"TROUBLESHOOTING/#diagnostic-steps_6","title":"Diagnostic Steps:","text":"<pre><code># Check log file permissions\nls -la /var/log/nginx/access.log\nls -la /var/log/nginx/error.log\n\n# Test read access as service user\nsudo -u nginx-security cat /var/log/nginx/access.log | head -5\n\n# Check if log files are being written\nsudo tail -f /var/log/nginx/access.log\n\n# Verify log format\nsudo tail -5 /var/log/nginx/access.log\n</code></pre>"},{"location":"TROUBLESHOOTING/#solutions_3","title":"Solutions:","text":"<pre><code># Add nginx-security user to adm group (for log access)\nsudo usermod -a -G adm nginx-security\n\n# Or create specific log sharing\nsudo chmod 644 /var/log/nginx/access.log\nsudo chmod 644 /var/log/nginx/error.log\n\n# Set up log rotation with proper permissions\nsudo nano /etc/logrotate.d/nginx\n# Add: create 644 www-data adm\n</code></pre>"},{"location":"TROUBLESHOOTING/#alert-and-integration-issues","title":"\ud83d\udce7 Alert and Integration Issues","text":""},{"location":"TROUBLESHOOTING/#email-alerts-not-working","title":"Email Alerts Not Working","text":""},{"location":"TROUBLESHOOTING/#diagnostic-steps_7","title":"Diagnostic Steps:","text":"<pre><code># Test SMTP configuration\npython3 -c \"\nimport smtplib\nfrom email.mime.text import MimeText\n\n# Test SMTP connection\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login('your-email@gmail.com', 'your-password')\nprint('SMTP connection successful')\nserver.quit()\n\"\n\n# Test email sending\npython3 -m src.alerts.email_alert test --config /etc/nginx-security/settings.yaml\n</code></pre>"},{"location":"TROUBLESHOOTING/#common-issues-and-solutions","title":"Common Issues and Solutions:","text":""},{"location":"TROUBLESHOOTING/#1-authentication-errors","title":"1. Authentication Errors","text":"<pre><code># For Gmail, use app passwords instead of regular password\n# Go to Google Account \u2192 Security \u2192 App passwords\n\n# Update configuration\nsudo nano /etc/nginx-security/settings.yaml\n# alerts:\n#   email:\n#     password: \"your-app-password\"  # Not regular password\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-smtp-server-issues","title":"2. SMTP Server Issues","text":"<pre><code># /etc/nginx-security/settings.yaml\nalerts:\n  email:\n    smtp_server: \"smtp.gmail.com\"\n    smtp_port: 587\n    use_tls: true\n    use_ssl: false  # Don't use both TLS and SSL\n    timeout: 30\n</code></pre>"},{"location":"TROUBLESHOOTING/#3-corporate-firewall","title":"3. Corporate Firewall","text":"<pre><code># Test SMTP connectivity\ntelnet smtp.gmail.com 587\ntelnet smtp.gmail.com 465\n\n# Check proxy settings\necho $HTTP_PROXY\necho $HTTPS_PROXY\n\n# Configure proxy if needed\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\n</code></pre>"},{"location":"TROUBLESHOOTING/#integration-failures","title":"Integration Failures","text":""},{"location":"TROUBLESHOOTING/#fail2ban-integration-issues","title":"fail2ban Integration Issues","text":"<pre><code># Check fail2ban status\nsudo systemctl status fail2ban\n\n# Test fail2ban communication\nsudo fail2ban-client status\nsudo fail2ban-client status nginx-security\n\n# Check fail2ban logs\nsudo journalctl -u fail2ban --since \"1 hour ago\"\n\n# Test manual ban\nsudo fail2ban-client set nginx-security banip 192.168.1.100\nsudo fail2ban-client set nginx-security unbanip 192.168.1.100\n</code></pre>"},{"location":"TROUBLESHOOTING/#siem-integration-issues","title":"SIEM Integration Issues","text":"<pre><code># Test Splunk HEC endpoint\ncurl -k \"https://splunk-server:8088/services/collector/event\" \\\n     -H \"Authorization: Splunk your-hec-token\" \\\n     -d '{\"event\": \"test\"}'\n\n# Test syslog forwarding\nlogger -p local0.info \"Test message from nginx-security-monitor\"\n\n# Check rsyslog configuration\nsudo systemctl status rsyslog\nsudo tail /var/log/syslog | grep nginx-security\n</code></pre>"},{"location":"TROUBLESHOOTING/#debug-mode-and-detailed-logging","title":"\ud83d\udd27 Debug Mode and Detailed Logging","text":""},{"location":"TROUBLESHOOTING/#enable-debug-mode","title":"Enable Debug Mode","text":"<pre><code># /etc/nginx-security/settings.yaml\nlogging:\n  level: \"DEBUG\"\n  file: \"/var/log/nginx-security/debug.log\"\n\n  # Detailed component logging\n  components:\n    pattern_detector: \"DEBUG\"\n    alert_manager: \"DEBUG\"\n    mitigation_engine: \"DEBUG\"\n    log_processor: \"DEBUG\"\n</code></pre>"},{"location":"TROUBLESHOOTING/#debug-logging-script","title":"Debug Logging Script","text":"<pre><code># scripts/debug_logging.py\n#!/usr/bin/env python3\n\"\"\"Enable comprehensive debug logging.\"\"\"\n\nimport logging\nimport sys\nimport time\nfrom src.monitor_service import MonitorService\n\ndef setup_debug_logging():\n    \"\"\"Configure detailed debug logging.\"\"\"\n\n    # Create debug logger\n    debug_logger = logging.getLogger('nginx_security_debug')\n    debug_logger.setLevel(logging.DEBUG)\n\n    # Create detailed formatter\n    formatter = logging.Formatter(\n        '%(asctime)s | %(levelname)8s | %(name)20s | %(funcName)15s:%(lineno)3d | %(message)s'\n    )\n\n    # File handler for debug logs\n    file_handler = logging.FileHandler('/var/log/nginx-security/debug.log')\n    file_handler.setLevel(logging.DEBUG)\n    file_handler.setFormatter(formatter)\n\n    # Console handler for immediate feedback\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.setLevel(logging.INFO)\n    console_handler.setFormatter(formatter)\n\n    debug_logger.addHandler(file_handler)\n    debug_logger.addHandler(console_handler)\n\n    return debug_logger\n\ndef trace_execution():\n    \"\"\"Trace execution flow for debugging.\"\"\"\n    import trace\n\n    # Create tracer\n    tracer = trace.Trace(\n        count=False, \n        trace=True,\n        ignoredirs=['/usr/lib/python3']\n    )\n\n    # Run monitor service with tracing\n    tracer.run('monitor = MonitorService(\"/etc/nginx-security/settings.yaml\"); monitor.start()')\n\nif __name__ == \"__main__\":\n    logger = setup_debug_logging()\n\n    if len(sys.argv) &gt; 1 and sys.argv[1] == 'trace':\n        trace_execution()\n    else:\n        # Start with debug logging\n        logger.info(\"Starting debug session\")\n\n        try:\n            monitor = MonitorService(\"/etc/nginx-security/settings.yaml\")\n            monitor.start()\n        except Exception as e:\n            logger.exception(f\"Error during execution: {e}\")\n</code></pre>"},{"location":"TROUBLESHOOTING/#getting-help-and-support","title":"\ud83d\udcde Getting Help and Support","text":""},{"location":"TROUBLESHOOTING/#information-to-gather-before-seeking-help","title":"Information to Gather Before Seeking Help","text":"<pre><code>#!/bin/bash\n# scripts/gather_support_info.sh\n\necho \"NGINX Security Monitor Support Information\"\necho \"========================================\"\n\n# System information\necho \"System Information:\"\necho \"- OS: $(lsb_release -d | cut -f2)\"\necho \"- Kernel: $(uname -r)\"\necho \"- Architecture: $(uname -m)\"\necho \"- Python: $(python3 --version)\"\n\n# Service information\necho -e \"\\nService Status:\"\nsystemctl status nginx-security-monitor --no-pager\n\n# Version information\necho -e \"\\nVersion Information:\"\ncat /opt/nginx-security-monitor/VERSION 2&gt;/dev/null || echo \"Version file not found\"\n\n# Configuration validation\necho -e \"\\nConfiguration Status:\"\npython3 -m src.config_validator /etc/nginx-security/settings.yaml\n\n# Recent logs\necho -e \"\\nRecent Logs (last 20 lines):\"\ntail -20 /var/log/nginx-security/error.log 2&gt;/dev/null || echo \"Error log not found\"\n\n# Resource usage\necho -e \"\\nResource Usage:\"\nps aux | grep nginx-security | grep -v grep\nfree -h\ndf -h /var/log/nginx-security\n\n# Network status\necho -e \"\\nNetwork Status:\"\nnetstat -tlnp | grep nginx-security\n\necho -e \"\\nSupport information gathered. Please provide this output when requesting help.\"\n</code></pre>"},{"location":"TROUBLESHOOTING/#community-resources","title":"Community Resources","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Documentation: Comprehensive guides and API reference</li> <li>Stack Overflow: Tag questions with <code>nginx-security-monitor</code></li> <li>Community Forum: Discussion and Q&amp;A</li> </ul>"},{"location":"TROUBLESHOOTING/#professional-support","title":"Professional Support","text":"<p>For production environments requiring guaranteed response times:</p> <ul> <li>Enterprise Support: 24/7 support with SLA</li> <li>Consulting Services: Implementation and optimization</li> <li>Training: Team training and best practices</li> </ul>"},{"location":"TROUBLESHOOTING/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Operations Guide - Day-to-day operations</li> <li>Performance Tuning - Optimization strategies</li> <li>Configuration Guide - Configuration options</li> <li>Installation Guide - Setup and installation</li> <li>Integration Cookbook - Integration examples</li> </ul> <p>This troubleshooting guide is part of the NGINX Security Monitor documentation. For updates and contributions, see CONTRIBUTING.md.</p>"},{"location":"USE_CASES/","title":"\ud83c\udfaf Use Cases Guide - NGINX Security Monitor","text":""},{"location":"USE_CASES/#overview","title":"\ud83d\udccb Overview","text":"<p>This guide presents real-world implementation scenarios for NGINX Security Monitor across different organization types, scales, and requirements. Each use case includes detailed configuration examples, deployment strategies, and best practices tailored to specific environments.</p>"},{"location":"USE_CASES/#use-case-1-small-business-e-commerce-site","title":"\ud83c\udfe2 Use Case 1: Small Business E-commerce Site","text":""},{"location":"USE_CASES/#scenario","title":"Scenario","text":"<p>A small online retailer with a WordPress-based e-commerce site running on a single server, handling ~1,000 visitors per day. Limited IT resources, needs simple but effective security monitoring.</p>"},{"location":"USE_CASES/#requirements","title":"Requirements","text":"<ul> <li>Basic attack detection (SQL injection, XSS, brute force)</li> <li>Email alerts to business owner</li> <li>Simple deployment and maintenance</li> <li>Cost-effective solution</li> </ul>"},{"location":"USE_CASES/#configuration","title":"Configuration","text":""},{"location":"USE_CASES/#basic-setup","title":"Basic Setup","text":"<pre><code># config/small-business-settings.yaml\nmonitoring:\n  check_interval: 30  # Check every 30 seconds (moderate frequency)\n  batch_size: 500\n\nlogs:\n  access_log: \"/var/log/nginx/access.log\"\n  error_log: \"/var/log/nginx/error.log\"\n\n# Essential detection patterns for e-commerce\ndetection:\n  enabled_patterns:\n    - sql_injection       # Protect customer data\n    - xss_attacks         # Protect user sessions\n    - brute_force         # Protect admin login\n    - directory_traversal # Protect system files\n    - wordpress_attacks   # WordPress-specific protection\n\n  thresholds:\n    failed_requests_per_minute: 20\n    requests_per_ip_per_minute: 60\n    error_rate_threshold: 0.15\n\n# Simple email alerting\nalerts:\n  email:\n    enabled: true\n    smtp_server: \"smtp.gmail.com\"\n    smtp_port: 587\n    use_tls: true\n    username: \"alerts@yourbusiness.com\"\n    password: \"${EMAIL_APP_PASSWORD}\"\n    from_address: \"security@yourbusiness.com\"\n    to_addresses:\n      - \"owner@yourbusiness.com\"\n      - \"admin@yourbusiness.com\"\n\n# Basic mitigation\nmitigation:\n  enabled: true\n  auto_mitigation: false  # Manual review for small business\n  strategies:\n    ip_blocking:\n      enabled: true\n      duration: 1800  # 30 minutes\n</code></pre>"},{"location":"USE_CASES/#wordpress-specific-patterns","title":"WordPress-Specific Patterns","text":"<pre><code>{\n  \"custom_patterns\": {\n    \"wordpress_attacks\": {\n      \"enabled\": true,\n      \"severity\": \"medium\",\n      \"description\": \"WordPress-specific attacks\",\n      \"patterns\": [\n        \"/wp-admin/admin-ajax.php\",\n        \"/wp-login.php.*force\",\n        \"/xmlrpc.php\",\n        \"wp-config.php\",\n        \"/wp-content/plugins/.*\\\\.php\"\n      ],\n      \"threshold\": 5,\n      \"window\": 300\n    },\n\n    \"ecommerce_attacks\": {\n      \"enabled\": true,\n      \"severity\": \"high\",\n      \"description\": \"E-commerce specific attacks\",\n      \"patterns\": [\n        \"/checkout.*script\",\n        \"/payment.*union\",\n        \"/cart.*drop.*table\",\n        \"credit.*card.*number\"\n      ],\n      \"threshold\": 1,\n      \"window\": 60\n    }\n  }\n}\n</code></pre>"},{"location":"USE_CASES/#deployment-strategy","title":"Deployment Strategy","text":"<pre><code># Simple single-server deployment\nsudo ./install.sh\nsudo systemctl enable nginx-security-monitor\nsudo systemctl start nginx-security-monitor\n\n# Setup log rotation for cost efficiency\nsudo tee /etc/logrotate.d/nginx-security-small-business &lt;&lt; EOF\n/var/log/nginx-security-monitor/*.log {\n    weekly\n    rotate 4\n    compress\n    delaycompress\n    missingok\n    notifempty\n}\nEOF\n</code></pre>"},{"location":"USE_CASES/#use-case-2-enterprise-multi-site-deployment","title":"\ud83c\udfe2 Use Case 2: Enterprise Multi-Site Deployment","text":""},{"location":"USE_CASES/#scenario_1","title":"Scenario","text":"<p>Large corporation with 50+ web applications across multiple data centers. Requires centralized security monitoring, compliance reporting, and integration with existing security infrastructure.</p>"},{"location":"USE_CASES/#requirements_1","title":"Requirements","text":"<ul> <li>Centralized monitoring and alerting</li> <li>Integration with SIEM (Splunk/ELK)</li> <li>Compliance reporting (SOX, PCI-DSS)</li> <li>High availability and scalability</li> <li>Advanced threat detection</li> </ul>"},{"location":"USE_CASES/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Central Security Operations             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502    SIEM     \u2502 \u2502   Splunk    \u2502 \u2502   Incident Response \u2502   \u2502\n\u2502  \u2502  Dashboard  \u2502 \u2502   Server    \u2502 \u2502     Platform        \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502                 \u2502                 \u2502\n\u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n\u2502 Site A \u2502     \u2502   Site B    \u2502     \u2502 Site C \u2502\n\u2502        \u2502     \u2502             \u2502     \u2502        \u2502\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502     \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502     \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502Monitor\u2502\u2502     \u2502\u2502 Monitor  \u2502 \u2502     \u2502\u2502Monitor\u2502\u2502\n\u2502\u2502 Node \u2502\u2502     \u2502\u2502  Node    \u2502 \u2502     \u2502\u2502 Node \u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"USE_CASES/#configuration_1","title":"Configuration","text":""},{"location":"USE_CASES/#central-configuration-template","title":"Central Configuration Template","text":"<pre><code># config/enterprise-settings.yaml\nmonitoring:\n  check_interval: 5  # High frequency for enterprise\n  batch_size: 2000\n  worker_threads: 4\n\nlogs:\n  access_log: \"/var/log/nginx/access.log\"\n  error_log: \"/var/log/nginx/error.log\"\n  format: \"json\"  # Structured logging for SIEM\n\n# Comprehensive threat detection\ndetection:\n  enabled_patterns:\n    - sql_injection\n    - xss_attacks\n    - ddos_detection\n    - brute_force\n    - directory_traversal\n    - suspicious_user_agents\n    - api_abuse\n    - file_upload_attacks\n\n  thresholds:\n    failed_requests_per_minute: 100\n    requests_per_ip_per_minute: 500\n    error_rate_threshold: 0.05\n\n# Multi-channel alerting\nalerts:\n  enabled: true\n  channels:\n    - email\n    - sms\n    - webhook\n    - syslog\n\n  email:\n    enabled: true\n    smtp_server: \"smtp.enterprise.com\"\n    from_address: \"security-monitor@enterprise.com\"\n    to_addresses:\n      - \"soc@enterprise.com\"\n      - \"security-team@enterprise.com\"\n\n  webhook:\n    enabled: true\n    endpoints:\n      - name: \"splunk_hec\"\n        url: \"https://splunk.enterprise.com:8088/services/collector/event\"\n        headers:\n          Authorization: \"Splunk ${SPLUNK_HEC_TOKEN}\"\n      - name: \"incident_management\"\n        url: \"https://incidents.enterprise.com/api/alerts\"\n        headers:\n          X-API-Key: \"${INCIDENT_API_KEY}\"\n\n# Advanced mitigation with enterprise tools\nmitigation:\n  enabled: true\n  auto_mitigation: true\n  strategies:\n    ip_blocking:\n      enabled: true\n      duration: 3600\n\n    firewall_integration:\n      enabled: true\n      endpoint: \"https://firewall-api.enterprise.com\"\n\n    load_balancer_integration:\n      enabled: true\n      endpoint: \"https://lb-api.enterprise.com\"\n\n# Security framework integrations\nsecurity_integrations:\n  fail2ban:\n    enabled: true\n\n  ossec:\n    enabled: true\n    ossec_dir: \"/var/ossec\"\n\n  splunk:\n    enabled: true\n    hec_endpoint: \"https://splunk.enterprise.com:8088/services/collector\"\n    index: \"security_events\"\n\n# Enhanced security features\nsecurity:\n  encryption:\n    enabled: true\n    key_file: \"/etc/nginx-security-monitor/enterprise.key\"\n\n  obfuscation:\n    enabled: true\n    timing_variance_percent: 30\n\n  plugin_security:\n    enabled: true\n    signature_verification: true\n\n# Compliance and auditing\ncompliance:\n  enabled: true\n  standards:\n    - pci_dss\n    - sox\n    - iso27001\n\n  reporting:\n    generate_reports: true\n    report_frequency: \"daily\"\n    retention_days: 2555  # 7 years for compliance\n</code></pre>"},{"location":"USE_CASES/#site-specific-configurations","title":"Site-Specific Configurations","text":"<pre><code># config/site-a-overrides.yaml\nsite_identification:\n  site_name: \"production-east\"\n  environment: \"production\"\n  datacenter: \"us-east-1\"\n\ndetection:\n  thresholds:\n    # Higher thresholds for high-traffic production site\n    failed_requests_per_minute: 200\n    requests_per_ip_per_minute: 1000\n\n# Site-specific patterns for customer-facing apps\ncustom_patterns:\n  customer_portal_attacks:\n    patterns:\n      - \"/customer/account.*script\"\n      - \"/api/customer.*injection\"\n    severity: \"critical\"\n</code></pre>"},{"location":"USE_CASES/#deployment-with-configuration-management","title":"Deployment with Configuration Management","text":"<pre><code># Ansible deployment playbook excerpt\n- name: Deploy NGINX Security Monitor\n  hosts: web_servers\n  vars:\n    monitor_version: \"{{ enterprise_monitor_version }}\"\n    config_template: \"enterprise-settings.yaml.j2\"\n\n  tasks:\n    - name: Install monitor\n      include_role:\n        name: nginx_security_monitor\n      vars:\n        environment: \"{{ site_environment }}\"\n        datacenter: \"{{ ansible_datacenter }}\"\n\n    - name: Configure site-specific settings\n      template:\n        src: \"{{ config_template }}\"\n        dest: \"/etc/nginx-security-monitor/settings.yaml\"\n      notify: restart_monitor\n</code></pre>"},{"location":"USE_CASES/#use-case-3-cloud-native-microservices-architecture","title":"\u2601\ufe0f Use Case 3: Cloud-Native Microservices Architecture","text":""},{"location":"USE_CASES/#scenario_2","title":"Scenario","text":"<p>Tech startup running microservices on Kubernetes with containerized applications. Multiple API gateways, service meshes, and dynamic scaling requirements.</p>"},{"location":"USE_CASES/#requirements_2","title":"Requirements","text":"<ul> <li>Container-native deployment</li> <li>Integration with Kubernetes monitoring</li> <li>API gateway protection</li> <li>Microservice-specific threat detection</li> <li>Auto-scaling compatibility</li> </ul>"},{"location":"USE_CASES/#architecture_1","title":"Architecture","text":"<pre><code># kubernetes/nginx-security-monitor-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-security-monitor\n  namespace: security\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx-security-monitor\n  template:\n    metadata:\n      labels:\n        app: nginx-security-monitor\n    spec:\n      containers:\n      - name: monitor\n        image: nginx-security-monitor:latest\n        env:\n        - name: CONFIG_PATH\n          value: \"/config/cloud-native-settings.yaml\"\n        - name: NGINX_MONITOR_KEY\n          valueFrom:\n            secretKeyRef:\n              name: monitor-secrets\n              key: encryption-key\n        volumeMounts:\n        - name: config\n          mountPath: /config\n        - name: nginx-logs\n          mountPath: /var/log/nginx\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n      volumes:\n      - name: config\n        configMap:\n          name: monitor-config\n      - name: nginx-logs\n        persistentVolumeClaim:\n          claimName: nginx-logs-pvc\n</code></pre>"},{"location":"USE_CASES/#configuration_2","title":"Configuration","text":""},{"location":"USE_CASES/#cloud-native-settings","title":"Cloud-Native Settings","text":"<pre><code># config/cloud-native-settings.yaml\nmonitoring:\n  check_interval: 10\n  batch_size: 1000\n\nlogs:\n  access_log: \"/var/log/nginx/access.log\"\n  error_log: \"/var/log/nginx/error.log\"\n  format: \"json\"  # JSON for structured logging\n\n# Microservices-specific detection\ndetection:\n  enabled_patterns:\n    - api_abuse\n    - rate_limiting_bypass\n    - jwt_attacks\n    - graphql_attacks\n    - container_escape_attempts\n\n  # Microservices patterns\n  custom_patterns:\n    api_gateway_attacks:\n      patterns:\n        - \"/api/v[0-9]+/.*union.*select\"\n        - \"Authorization:.*script\"\n        - \"/graphql.*query.*{.*admin\"\n      severity: \"high\"\n\n    service_mesh_attacks:\n      patterns:\n        - \"X-Forwarded-For:.*127.0.0.1\"\n        - \"X-Real-IP:.*localhost\"\n      severity: \"medium\"\n\n# Cloud-native alerting\nalerts:\n  webhook:\n    enabled: true\n    endpoints:\n      - name: \"prometheus_alertmanager\"\n        url: \"http://alertmanager.monitoring.svc.cluster.local:9093/api/v1/alerts\"\n      - name: \"slack_webhook\"\n        url: \"${SLACK_WEBHOOK_URL}\"\n\n# Kubernetes integration\nkubernetes:\n  enabled: true\n  namespace: \"security\"\n  pod_name: \"${HOSTNAME}\"\n\n  # Service discovery\n  service_discovery:\n    enabled: true\n    label_selector: \"app=nginx\"\n\n  # Resource monitoring\n  resource_monitoring:\n    enabled: true\n    metrics_endpoint: \":8080/metrics\"\n\n# Observability\nobservability:\n  metrics:\n    enabled: true\n    prometheus_endpoint: \":9090/metrics\"\n\n  tracing:\n    enabled: true\n    jaeger_endpoint: \"http://jaeger.tracing.svc.cluster.local:14268/api/traces\"\n\n  logging:\n    structured: true\n    format: \"json\"\n    level: \"info\"\n</code></pre>"},{"location":"USE_CASES/#service-monitor-for-prometheus","title":"Service Monitor for Prometheus","text":"<pre><code># kubernetes/service-monitor.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: nginx-security-monitor\n  namespace: security\nspec:\n  selector:\n    matchLabels:\n      app: nginx-security-monitor\n  endpoints:\n  - port: metrics\n    interval: 30s\n    path: /metrics\n</code></pre>"},{"location":"USE_CASES/#use-case-4-governmentcompliance-heavy-environment","title":"\ud83c\udfdb\ufe0f Use Case 4: Government/Compliance-Heavy Environment","text":""},{"location":"USE_CASES/#scenario_3","title":"Scenario","text":"<p>Government agency with strict compliance requirements (FedRAMP, FISMA), air-gapped networks, and extensive audit trails needed.</p>"},{"location":"USE_CASES/#requirements_3","title":"Requirements","text":"<ul> <li>FIPS 140-2 Level 2 compliance</li> <li>Extensive audit logging</li> <li>Air-gapped deployment capability</li> <li>Multi-level security classifications</li> <li>Immutable audit trails</li> </ul>"},{"location":"USE_CASES/#configuration_3","title":"Configuration","text":""},{"location":"USE_CASES/#high-security-configuration","title":"High-Security Configuration","text":"<pre><code># config/government-settings.yaml\n# CLASSIFICATION: CONTROLLED UNCLASSIFIED INFORMATION (CUI)\n\nmonitoring:\n  check_interval: 5  # Frequent monitoring for security\n  batch_size: 1000\n\nsecurity:\n  # FIPS compliance\n  fips_mode: true\n  encryption:\n    enabled: true\n    algorithm: \"AES-256-GCM\"\n    key_derivation: \"PBKDF2-SHA256\"\n    key_file: \"/etc/nginx-security-monitor/fips-key\"\n\n  # Enhanced integrity checking\n  integrity:\n    enabled: true\n    hash_algorithm: \"SHA-256\"\n    verify_frequency: 300  # Every 5 minutes\n\n  # Audit trail configuration\n  audit:\n    enabled: true\n    immutable_logs: true\n    digital_signatures: true\n    retention_years: 7\n\n# Comprehensive threat detection\ndetection:\n  enabled_patterns:\n    - all_standard_patterns\n    - advanced_persistent_threats\n    - insider_threats\n    - data_exfiltration\n    - privilege_escalation\n\n  thresholds:\n    # Strict thresholds for government security\n    failed_requests_per_minute: 10\n    requests_per_ip_per_minute: 100\n    error_rate_threshold: 0.01\n\n# Multi-level alerting\nalerts:\n  classification_aware: true\n\n  email:\n    enabled: true\n    encryption: \"PGP\"\n    classification_header: true\n    security_labels:\n      - \"CUI\"\n      - \"CONFIDENTIAL\"\n\n  syslog:\n    enabled: true\n    facility: \"LOG_AUTHPRIV\"\n    severity_mapping:\n      low: \"LOG_INFO\"\n      medium: \"LOG_WARNING\"\n      high: \"LOG_ERR\"\n      critical: \"LOG_CRIT\"\n\n# Government-specific compliance\ncompliance:\n  enabled: true\n  frameworks:\n    - fisma\n    - fedramp\n    - nist_800_53\n    - cis_controls\n\n  reporting:\n    automated: true\n    formats:\n      - \"SCAP\"\n      - \"STIG\"\n      - \"CIS-CAT\"\n\n  audit_requirements:\n    log_integrity: true\n    chain_of_custody: true\n    time_synchronization: \"ntp\"\n    access_control: \"mandatory\"\n\n# Air-gapped deployment settings\nair_gapped:\n  enabled: true\n  offline_updates: true\n  pattern_updates:\n    method: \"manual\"\n    verification: \"digital_signature\"\n</code></pre>"},{"location":"USE_CASES/#stig-compliance-script","title":"STIG Compliance Script","text":"<pre><code>#!/bin/bash\n# Apply STIG compliance for NGINX Security Monitor\n\n# File permissions (RHEL-08-010590)\nchmod 640 /etc/nginx-security-monitor/*.yaml\nchown nginx-monitor:nginx-monitor /etc/nginx-security-monitor/*.yaml\n\n# Audit logging (RHEL-08-030010)\necho \"nginx-security-monitor\" &gt;&gt; /etc/audit/rules.d/nginx-security.rules\n\n# SELinux policy (RHEL-08-010370)\nsetsebool -P httpd_can_network_connect 1\nsemanage fcontext -a -t admin_home_t \"/etc/nginx-security-monitor(/.*)?\"\nrestorecon -R /etc/nginx-security-monitor\n\n# FIPS mode verification (RHEL-08-010020)\nif [ ! -f /proc/sys/crypto/fips_enabled ] || [ \"$(cat /proc/sys/crypto/fips_enabled)\" != \"1\" ]; then\n    echo \"WARNING: FIPS mode not enabled\"\nfi\n</code></pre>"},{"location":"USE_CASES/#use-case-5-multi-region-cdn-with-edge-security","title":"\ud83c\udf10 Use Case 5: Multi-Region CDN with Edge Security","text":""},{"location":"USE_CASES/#scenario_4","title":"Scenario","text":"<p>Global media company with CDN infrastructure across 15 regions, handling millions of requests daily with edge computing requirements.</p>"},{"location":"USE_CASES/#requirements_4","title":"Requirements","text":"<ul> <li>Edge-deployed security monitoring</li> <li>Global threat intelligence sharing</li> <li>Regional compliance variations</li> <li>High-performance edge processing</li> <li>Centralized threat correlation</li> </ul>"},{"location":"USE_CASES/#architecture_2","title":"Architecture","text":"<pre><code>Global Threat Intelligence Center\n            \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502       \u2502       \u2502\n\u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u25bc\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2510\n\u2502US-East\u2502 \u2502EU \u2502 \u2502APAC \u2502\n\u2502       \u2502 \u2502   \u2502 \u2502     \u2502\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u250c\u2500\u2500\u2510\u2502 \u2502\u250c\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502Edge \u2502\u2502 \u2502\u2502  \u2502\u2502 \u2502\u2502   \u2502\u2502\n\u2502\u2502Nodes\u2502\u2502 \u2502\u2502  \u2502\u2502 \u2502\u2502   \u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502\u2514\u2500\u2500\u2518\u2502 \u2502\u2514\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"USE_CASES/#configuration_4","title":"Configuration","text":""},{"location":"USE_CASES/#edge-node-configuration","title":"Edge Node Configuration","text":"<pre><code># config/edge-settings.yaml\nmonitoring:\n  check_interval: 1  # Very frequent for edge\n  batch_size: 5000   # Large batches for performance\n  edge_mode: true\n\nperformance:\n  # Optimized for edge deployment\n  memory_limit: \"512MB\"\n  cpu_limit: \"1.0\"\n  cache_size: 10000\n\n  # Async processing for performance\n  async_processing: true\n  queue_size: 50000\n\n# Edge-specific detection\ndetection:\n  enabled_patterns:\n    - ddos_detection    # Critical for CDN\n    - bot_detection     # Prevent bot abuse\n    - api_abuse        # Protect API endpoints\n    - cache_poisoning  # CDN-specific attack\n\n  # Performance-optimized thresholds\n  thresholds:\n    failed_requests_per_minute: 1000  # High volume tolerance\n    requests_per_ip_per_minute: 10000\n    error_rate_threshold: 0.02\n\n# Regional threat intelligence\nthreat_intelligence:\n  enabled: true\n\n  sources:\n    - name: \"global_intel\"\n      endpoint: \"https://threat-intel.company.com/api/v1/indicators\"\n      region: \"global\"\n\n    - name: \"regional_intel\"\n      endpoint: \"https://threat-intel-${REGION}.company.com/api/v1/indicators\"\n      region: \"${REGION}\"\n\n  sharing:\n    enabled: true\n    share_detected_threats: true\n    anonymize_data: true\n\n# Edge alerting (lightweight)\nalerts:\n  # Local alerting for immediate response\n  local:\n    enabled: true\n    threshold_based: true\n\n  # Central reporting (batched)\n  central:\n    enabled: true\n    batch_interval: 300  # 5 minutes\n    endpoint: \"https://central-soc.company.com/api/alerts\"\n\n# Geographical compliance\ncompliance:\n  region: \"${REGION}\"\n  gdpr: true  # EU regions\n  ccpa: true  # California\n  local_data_residency: true\n</code></pre>"},{"location":"USE_CASES/#central-correlation-engine","title":"Central Correlation Engine","text":"<pre><code># config/central-correlation-settings.yaml\ncorrelation:\n  enabled: true\n\n  # Global threat pattern correlation\n  pattern_correlation:\n    time_window: 3600  # 1 hour correlation window\n    min_nodes: 3       # Minimum nodes reporting same pattern\n    confidence_threshold: 0.8\n\n  # Cross-region attack detection\n  global_patterns:\n    distributed_attack:\n      description: \"Coordinated attack across regions\"\n      criteria:\n        - same_attack_signature: true\n        - multiple_regions: \"&gt;= 3\"\n        - time_window: 1800\n\n    campaign_tracking:\n      description: \"Sustained campaign tracking\"\n      criteria:\n        - similar_patterns: true\n        - duration: \"&gt;= 7200\"\n        - escalation: true\n\n# Machine learning enhancement\nmachine_learning:\n  enabled: true\n\n  models:\n    - name: \"anomaly_detection\"\n      type: \"isolation_forest\"\n      training_data: \"7_days\"\n\n    - name: \"attack_classification\"\n      type: \"random_forest\"\n      features:\n        - request_patterns\n        - timing_analysis\n        - geolocation_data\n</code></pre>"},{"location":"USE_CASES/#use-case-6-healthcare-hipaa-compliant-environment","title":"\ud83c\udfe5 Use Case 6: Healthcare HIPAA-Compliant Environment","text":""},{"location":"USE_CASES/#scenario_5","title":"Scenario","text":"<p>Healthcare provider with patient portal, EHR systems, and strict HIPAA compliance requirements for protecting PHI (Protected Health Information).</p>"},{"location":"USE_CASES/#requirements_5","title":"Requirements","text":"<ul> <li>HIPAA compliance for all security monitoring</li> <li>PHI data protection and anonymization</li> <li>Audit trails for compliance reporting</li> <li>Integration with healthcare security frameworks</li> <li>Patient data breach prevention</li> </ul>"},{"location":"USE_CASES/#configuration_5","title":"Configuration","text":""},{"location":"USE_CASES/#hipaa-compliant-settings","title":"HIPAA-Compliant Settings","text":"<pre><code># config/healthcare-settings.yaml\n# HIPAA Compliance Configuration\n\nmonitoring:\n  check_interval: 10\n  batch_size: 1000\n\n# HIPAA-specific security\nsecurity:\n  hipaa_mode: true\n\n  # Data anonymization\n  data_anonymization:\n    enabled: true\n    anonymize_phi: true\n    hash_identifiers: true\n\n  # Encryption at rest and in transit\n  encryption:\n    enabled: true\n    algorithm: \"AES-256-GCM\"\n    transit_encryption: \"TLS-1.3\"\n\n  # Access controls\n  access_control:\n    role_based: true\n    minimum_necessary: true\n    audit_access: true\n\n# Healthcare-specific threat detection\ndetection:\n  enabled_patterns:\n    - phi_exposure       # Detect PHI in logs\n    - hipaa_violations   # HIPAA-specific attacks\n    - medical_record_access  # Unauthorized access\n    - patient_data_exfiltration\n\n  # Custom healthcare patterns\n  custom_patterns:\n    phi_detection:\n      patterns:\n        - \"\\\\b\\\\d{3}-\\\\d{2}-\\\\d{4}\\\\b\"  # SSN\n        - \"\\\\b\\\\d{10}\\\\b\"               # Patient ID\n        - \"DOB.*\\\\d{2}/\\\\d{2}/\\\\d{4}\"   # Date of birth\n      severity: \"critical\"\n      action: \"immediate_alert\"\n\n    ehr_attacks:\n      patterns:\n        - \"/ehr/patient.*union.*select\"\n        - \"/portal/records.*script\"\n        - \"/api/patient.*drop.*table\"\n      severity: \"high\"\n\n# HIPAA audit requirements\naudit:\n  enabled: true\n  hipaa_compliant: true\n\n  requirements:\n    - access_logs: true\n    - modification_logs: true\n    - disclosure_tracking: true\n    - breach_documentation: true\n\n  retention:\n    audit_logs: \"6_years\"    # HIPAA requirement\n    security_logs: \"6_years\"\n    incident_reports: \"6_years\"\n\n# Healthcare alerting\nalerts:\n  email:\n    enabled: true\n    encryption: \"required\"\n    phi_scrubbing: true\n\n  incident_management:\n    enabled: true\n    breach_notification: true\n    notification_timeline: \"60_seconds\"  # HIPAA breach notification\n\n  compliance_reporting:\n    enabled: true\n    automated_reports: true\n    regulatory_notifications: true\n\n# Business Associate Agreement (BAA) compliance\nbaa_compliance:\n  enabled: true\n  data_processing_agreement: true\n  subcontractor_agreements: true\n  breach_notification_procedures: true\n</code></pre>"},{"location":"USE_CASES/#use-case-comparison-matrix","title":"\ud83d\udcca Use Case Comparison Matrix","text":"Feature Small Business Enterprise Cloud-Native Government CDN/Edge Healthcare Deployment Complexity Low High Medium High High Medium Security Level Basic Advanced Medium Maximum High High Compliance None SOX/PCI GDPR FISMA/FedRAMP Regional HIPAA Scalability Single Node Multi-Site Auto-Scale Fixed Global Medium Integration Minimal Extensive Cloud-Native Air-Gapped CDN-Specific Healthcare Alerting Email Multi-Channel Webhooks Classified Edge/Central Encrypted Resource Usage Low High Variable Medium Optimized Medium"},{"location":"USE_CASES/#implementation-guides","title":"\ud83d\udd27 Implementation Guides","text":""},{"location":"USE_CASES/#quick-deployment-script","title":"Quick Deployment Script","text":"<pre><code>#!/bin/bash\n# Universal deployment script with use case selection\n\nread -p \"Select use case [1-6]: \n1) Small Business\n2) Enterprise  \n3) Cloud-Native\n4) Government\n5) CDN/Edge\n6) Healthcare\nChoice: \" use_case\n\ncase $use_case in\n    1) CONFIG_TEMPLATE=\"small-business-settings.yaml\" ;;\n    2) CONFIG_TEMPLATE=\"enterprise-settings.yaml\" ;;\n    3) CONFIG_TEMPLATE=\"cloud-native-settings.yaml\" ;;\n    4) CONFIG_TEMPLATE=\"government-settings.yaml\" ;;\n    5) CONFIG_TEMPLATE=\"edge-settings.yaml\" ;;\n    6) CONFIG_TEMPLATE=\"healthcare-settings.yaml\" ;;\n    *) echo \"Invalid choice\"; exit 1 ;;\nesac\n\necho \"Deploying with $CONFIG_TEMPLATE...\"\ncp \"config/templates/$CONFIG_TEMPLATE\" \"config/settings.yaml\"\nsudo ./install.sh\n</code></pre>"},{"location":"USE_CASES/#migration-between-use-cases","title":"Migration Between Use Cases","text":"<pre><code>#!/bin/bash\n# Migration script for changing use cases\n\nOLD_CONFIG=\"$1\"\nNEW_CONFIG=\"$2\"\n\n# Backup current configuration\ncp \"$OLD_CONFIG\" \"$OLD_CONFIG.backup.$(date +%Y%m%d_%H%M%S)\"\n\n# Migrate essential settings\npython3 scripts/migrate_config.py --from \"$OLD_CONFIG\" --to \"$NEW_CONFIG\"\n\n# Validate new configuration\npython3 -m src.monitor_service --check-config \"$NEW_CONFIG\"\n\necho \"Migration complete. Review $NEW_CONFIG before applying.\"\n</code></pre>"},{"location":"USE_CASES/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Installation Guide - Detailed installation procedures</li> <li>Configuration Guide - Complete configuration reference</li> <li>Security Features - Advanced security capabilities</li> <li>Operations Guide - Day-to-day operations</li> <li>Troubleshooting - Common issues and solutions</li> </ul> <p>This use cases guide provides practical implementation examples for NGINX Security Monitor across various organizational contexts. Each use case includes production-ready configurations and deployment strategies.</p>"},{"location":"_template/","title":"Document Title","text":"<p>[Document content goes here]</p>"},{"location":"getting-started/","title":"Getting Started for Developers","text":"<p>Welcome to the Nginx Security Monitor development environment! This guide will help you set up your development environment, understand the codebase, and make your first contribution.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>Text editor or IDE (VS Code recommended)</li> <li>Basic knowledge of Python and security concepts</li> </ul>"},{"location":"getting-started/#quick-setup","title":"Quick Setup","text":""},{"location":"getting-started/#1-clone-and-setup-environment","title":"1. Clone and Setup Environment","text":"<pre><code># Clone the repository\ngit clone https://github.com/your-org/nginx-security-monitor.git\ncd nginx-security-monitor\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install development dependencies\npip install -r dev-requirements.txt\npip install -e .\n</code></pre>"},{"location":"getting-started/#2-verify-installation","title":"2. Verify Installation","text":"<pre><code># Run basic tests\npython -m pytest tests/ -v\n\n# Test the main module\npython -c \"import nginx_security_monitor; print('Installation successful!')\"\n</code></pre>"},{"location":"getting-started/#3-configuration-setup","title":"3. Configuration Setup","text":"<pre><code># Copy example configuration\ncp config/settings.yaml.example config/settings.yaml\n\n# Generate encryption key for secure pattern storage\npython encrypt_config.py --generate-key\n</code></pre>"},{"location":"getting-started/#development-workflow","title":"Development Workflow","text":""},{"location":"getting-started/#1-understanding-the-architecture","title":"1. Understanding the Architecture","text":"<p>The project follows a modular architecture:</p> <pre><code>src/\n\u251c\u2500\u2500 nginx_security_monitor/\n\u2502   \u251c\u2500\u2500 core/           # Core monitoring engine\n\u2502   \u251c\u2500\u2500 detection/      # Threat detection modules\n\u2502   \u251c\u2500\u2500 mitigation/     # Response strategies\n\u2502   \u251c\u2500\u2500 integrations/   # External tool integrations\n\u2502   \u2514\u2500\u2500 plugins/        # Plugin system\n</code></pre> <p>Key Components: - Core Engine: Main monitoring loop and log processing - Pattern Detection: Rule-based threat identification - Mitigation System: Automated response mechanisms - Integration Layer: External security tool connectivity - Plugin System: Extensible custom rule engine</p>"},{"location":"getting-started/#2-making-changes","title":"2. Making Changes","text":"<pre><code># Create feature branch\ngit checkout -b feature/your-feature-name\n\n# Make your changes\n# Edit files in src/, tests/, or docs/\n\n# Run tests\npython -m pytest tests/ -v\n\n# Run linting\nflake8 src/ tests/\nblack src/ tests/\n\n# Run security checks\nbandit -r src/\n</code></pre>"},{"location":"getting-started/#3-testing-your-changes","title":"3. Testing Your Changes","text":"<pre><code># Unit tests\npython -m pytest tests/unit/ -v\n\n# Integration tests\npython -m pytest tests/integration/ -v\n\n# Coverage report\npython -m pytest --cov=src/nginx_security_monitor tests/\n\n# Test specific component\npython -m pytest tests/test_detection.py -v\n</code></pre>"},{"location":"getting-started/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"getting-started/#adding-new-threat-patterns","title":"Adding New Threat Patterns","text":"<ol> <li> <p>Edit <code>config/patterns.json</code>: <pre><code>{\n  \"sql_injection\": {\n    \"patterns\": [\"(?i)(union.*select|select.*from)\", \"(?i)(drop.*table|delete.*from)\"],\n    \"severity\": \"high\",\n    \"description\": \"SQL injection attempt detected\"\n  }\n}\n</code></pre></p> </li> <li> <p>Add corresponding tests in <code>tests/test_patterns.py</code></p> </li> <li>Update documentation in <code>docs/PATTERN_DETECTION.md</code></li> </ol>"},{"location":"getting-started/#creating-new-integrations","title":"Creating New Integrations","text":"<ol> <li>Create new file in <code>src/nginx_security_monitor/integrations/</code></li> <li>Implement the integration interface</li> <li>Add configuration to <code>config/settings.yaml</code></li> <li>Write tests in <code>tests/integration/</code></li> <li>Document in <code>docs/SECURITY_INTEGRATIONS.md</code></li> </ol>"},{"location":"getting-started/#developing-plugins","title":"Developing Plugins","text":"<p>See our comprehensive Plugin Development Guide for detailed instructions.</p>"},{"location":"getting-started/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":""},{"location":"getting-started/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Set environment variable\nexport NGINX_MONITOR_LOG_LEVEL=DEBUG\n\n# Or modify config/settings.yaml\nlogging:\n  level: DEBUG\n  file: /var/log/nginx-security-monitor.log\n</code></pre>"},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<ol> <li>Import Errors: Ensure you've installed in development mode with <code>pip install -e .</code></li> <li>Permission Errors: Check file permissions on log files and config directories</li> <li>Test Failures: Verify all dependencies are installed with <code>pip install -r dev-requirements.txt</code></li> </ol>"},{"location":"getting-started/#debug-tools","title":"Debug Tools","text":"<pre><code># Check configuration\npython -c \"from nginx_security_monitor.config import load_config; print(load_config())\"\n\n# Test pattern matching\npython scripts/test_patterns.py --input-file sample.log\n\n# Validate integrations\npython scripts/validate_integrations.py\n</code></pre>"},{"location":"getting-started/#code-style-and-standards","title":"Code Style and Standards","text":"<p>We follow PEP 8 with some modifications. Key points:</p> <ul> <li>Line length: 88 characters (Black default)</li> <li>Use type hints for all public functions</li> <li>Docstrings in Google style</li> <li>Import order: standard library, third-party, local</li> </ul>"},{"location":"getting-started/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># Install pre-commit hooks\npre-commit install\n\n# Run manually\npre-commit run --all-files\n</code></pre>"},{"location":"getting-started/#documentation","title":"Documentation","text":"<ul> <li>All public APIs must be documented</li> <li>Include code examples in docstrings</li> <li>Update relevant documentation files</li> <li>Add entries to the changelog</li> </ul> <p>See our Style Guide for detailed documentation standards.</p>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during development:</p> <ol> <li>Check the troubleshooting guide</li> <li>Review existing GitHub issues</li> <li>Join our community discussions</li> <li>Consult the operations guide for deployment issues</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ol> <li>Explore the Codebase: Start with <code>src/nginx_security_monitor/core/</code></li> <li>Run Examples: Check out <code>examples/</code> directory</li> <li>Read Documentation: Review ARCHITECTURE.md</li> <li>Join Development: See CONTRIBUTING.md</li> </ol> <p>Happy coding! \ud83d\ude80</p> <p>Related Documentation: - Installation Guide - Configuration Guide - Testing Guide - Plugin Development - Contributing Guidelines</p>"},{"location":"api/","title":"API Reference","text":"<p>Auto-generated API documentation for Nginx Security Monitor.</p> <p>Last updated: 2025-07-20 15:44:27</p>"},{"location":"api/#modules","title":"Modules","text":"<ul> <li> <p>alert_manager   Alert Manager Module</p> </li> <li> <p>alerts.email_alert</p> </li> <li> <p>alerts.sms_alert</p> </li> <li> <p>config_manager   ConfigManager for NGINX Security Monitor</p> </li> <li> <p>config_schema   Configuration Schema for NGINX Security Monitor</p> </li> <li> <p>crypto_utils   Cryptographic utilities for securing custom patterns and configurations.</p> </li> <li> <p>log_parser</p> </li> <li> <p>log_processor   Log Processor Module</p> </li> <li> <p>mitigation</p> </li> <li> <p>monitor_service   NGINX Security Monitor Service</p> </li> <li> <p>network_security   Network Security and Access Control for NGINX Security Monitor</p> </li> <li> <p>pattern_detector</p> </li> <li> <p>plugin_system   Plugin system for custom mitigation strategies.</p> </li> <li> <p>security_coordinator   Security Coordinator Module</p> </li> <li> <p>security_integrations   Security Framework Integrations for NGINX Security Monitor</p> </li> <li> <p>service_protection   Self-Protection Module for NGINX Security Monitor</p> </li> <li> <p>threat_processor   Threat Processor Module</p> </li> </ul>"},{"location":"api/#statistics","title":"Statistics","text":"<ul> <li>Total modules: 17</li> <li>Total classes: 23</li> <li>Total functions: 119</li> </ul>"},{"location":"api/alert_manager/","title":"alert_manager","text":"<p>Alert Manager Module Handles all alert generation and sending logic for the NGINX Security Monitor.</p>"},{"location":"api/alert_manager/#classes","title":"Classes","text":""},{"location":"api/alert_manager/#alertmanager","title":"AlertManager","text":"<p>Manages all alert generation and sending functionality.</p>"},{"location":"api/alert_manager/#methods","title":"Methods","text":""},{"location":"api/alert_manager/#send_threat_alertpattern-mitigation_results","title":"send_threat_alert(pattern, mitigation_results)","text":"<p>Send alerts for detected threats.</p> <p>Args:     pattern: The detected threat pattern     mitigation_results: List of mitigation results</p> <p>Parameters:</p> <ul> <li>pattern</li> <li>mitigation_results</li> </ul>"},{"location":"api/alert_manager/#send_emergency_alertcritical_threats","title":"send_emergency_alert(critical_threats)","text":"<p>Send emergency alert for critical service threats.</p> <p>Args:     critical_threats: List of critical threat objects</p> <p>Parameters:</p> <ul> <li>critical_threats</li> </ul>"},{"location":"api/alert_manager/#send_service_threat_alerthigh_threats","title":"send_service_threat_alert(high_threats)","text":"<p>Send alert for high-severity service threats.</p> <p>Args:     high_threats: List of high-severity threat objects</p> <p>Parameters:</p> <ul> <li>high_threats</li> </ul>"},{"location":"api/alert_manager/#send_integration_alertthreats","title":"send_integration_alert(threats)","text":"<p>Send alert for threats detected by security integrations.</p> <p>Args:     threats: List of threat objects from security integrations</p> <p>Parameters:</p> <ul> <li>threats</li> </ul>"},{"location":"api/alert_manager/#functions","title":"Functions","text":""},{"location":"api/alert_manager/#send_threat_alertself-pattern-mitigation_results","title":"send_threat_alert(self, pattern, mitigation_results)","text":"<p>Send alerts for detected threats.</p> <p>Args:     pattern: The detected threat pattern     mitigation_results: List of mitigation results</p> <p>Parameters:</p> <ul> <li>self</li> <li>pattern</li> <li>mitigation_results</li> </ul>"},{"location":"api/alert_manager/#send_emergency_alertself-critical_threats","title":"send_emergency_alert(self, critical_threats)","text":"<p>Send emergency alert for critical service threats.</p> <p>Args:     critical_threats: List of critical threat objects</p> <p>Parameters:</p> <ul> <li>self</li> <li>critical_threats</li> </ul>"},{"location":"api/alert_manager/#send_service_threat_alertself-high_threats","title":"send_service_threat_alert(self, high_threats)","text":"<p>Send alert for high-severity service threats.</p> <p>Args:     high_threats: List of high-severity threat objects</p> <p>Parameters:</p> <ul> <li>self</li> <li>high_threats</li> </ul>"},{"location":"api/alert_manager/#send_integration_alertself-threats","title":"send_integration_alert(self, threats)","text":"<p>Send alert for threats detected by security integrations.</p> <p>Args:     threats: List of threat objects from security integrations</p> <p>Parameters:</p> <ul> <li>self</li> <li>threats</li> </ul>"},{"location":"api/config_manager/","title":"config_manager","text":"<p>ConfigManager for NGINX Security Monitor</p> <p>This module implements a secure configuration management system for the NGINX Security Monitor. It provides centralized access to configuration with security hardening features.</p>"},{"location":"api/config_manager/#classes","title":"Classes","text":""},{"location":"api/config_manager/#securestring","title":"SecureString","text":"<p>A string class that protects its contents in memory as much as possible.</p>"},{"location":"api/config_manager/#methods","title":"Methods","text":""},{"location":"api/config_manager/#get_value-str","title":"get_value() -&gt; str","text":"<p>Return the actual string value.</p> <p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/config_manager/#clear","title":"clear()","text":"<p>Securely clear the string value from memory.</p>"},{"location":"api/config_manager/#configmanager","title":"ConfigManager","text":"<p>A centralized configuration manager for the NGINX Security Monitor with security hardening.</p> <p>This class handles loading, validating, and accessing configuration from: - Default schema values - Configuration files (YAML) - Environment variables</p> <p>Features: - Schema-based validation - Type conversion - Environment variable override - Nested configuration access - Configuration reload - Security hardening - Configuration integrity verification - Protection against injection attacks</p>"},{"location":"api/config_manager/#attributes","title":"Attributes","text":"<ul> <li>_instance (NoneType)</li> </ul>"},{"location":"api/config_manager/#methods_1","title":"Methods","text":""},{"location":"api/config_manager/#get_instancecls-schema_path-none-config_path-none-lockdown_mode-false","title":"get_instance(cls, schema_path = None, config_path = None, lockdown_mode = False)","text":"<p>Get or create the singleton instance of ConfigManager.</p> <p>Parameters:</p> <ul> <li>cls</li> <li>schema_path = None</li> <li>config_path = None</li> <li>lockdown_mode = False</li> </ul>"},{"location":"api/config_manager/#create_config_signaturefile_path-str","title":"create_config_signature(file_path: str)","text":"<p>Create a signature file for configuration integrity verification.</p> <p>Args:     file_path: Path to the configuration file</p> <p>Parameters:</p> <ul> <li>file_path (str)</li> </ul>"},{"location":"api/config_manager/#getpath-str-default-any-none-any","title":"get(path: str, default: Any = None) -&gt; Any","text":"<p>Get configuration value by dot-notation path with secure handling.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')     default: Default value to return if path not found</p> <p>Returns:     Configuration value or default</p> <p>Parameters:</p> <ul> <li>path (str)</li> <li>default (Any) = None</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/config_manager/#get_rawpath-str-default-any-none-any","title":"get_raw(path: str, default: Any = None) -&gt; Any","text":"<p>Get raw configuration value without secure wrapping. Only use when the actual value is needed for operations.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')     default: Default value to return if path not found</p> <p>Returns:     Raw configuration value or default</p> <p>Parameters:</p> <ul> <li>path (str)</li> <li>default (Any) = None</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/config_manager/#setpath-str-value-any","title":"set(path: str, value: Any)","text":"<p>Set configuration value by dot-notation path with audit logging.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')     value: Value to set</p> <p>Parameters:</p> <ul> <li>path (str)</li> <li>value (Any)</li> </ul>"},{"location":"api/config_manager/#reload","title":"reload()","text":"<p>Reload configuration from file and reapply environment overrides.</p>"},{"location":"api/config_manager/#savefile_path-str-none","title":"save(file_path: str = None)","text":"<p>Save current configuration to file.</p> <p>Args:     file_path: Path to save configuration to (defaults to self.config_path)</p> <p>Parameters:</p> <ul> <li>file_path (str) = None</li> </ul>"},{"location":"api/config_manager/#get_schema_infopath-str-dict","title":"get_schema_info(path: str) -&gt; Dict","text":"<p>Get schema information for a configuration path.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')</p> <p>Returns:     Schema information (type, default, description, etc.)</p> <p>Parameters:</p> <ul> <li>path (str)</li> </ul> <p>Returns:</p> <ul> <li>Dict</li> </ul>"},{"location":"api/config_manager/#to_dict-dict","title":"to_dict() -&gt; Dict","text":"<p>Return the complete configuration as a dictionary.</p> <p>Sensitive values are masked in the returned dictionary.</p> <p>Returns:</p> <ul> <li>Dict</li> </ul>"},{"location":"api/config_manager/#get_env_var_namepath-str-str","title":"get_env_var_name(path: str) -&gt; str","text":"<p>Get the corresponding environment variable name for a config path.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')</p> <p>Returns:     Environment variable name or None if not defined</p> <p>Parameters:</p> <ul> <li>path (str)</li> </ul> <p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/config_manager/#self_monitor-dict","title":"self_monitor() -&gt; Dict","text":"<p>Monitor the configuration system for security issues.</p> <p>Returns:     Dict with monitoring results</p> <p>Returns:</p> <ul> <li>Dict</li> </ul>"},{"location":"api/config_manager/#reload_config","title":"reload_config()","text":"<p>Reload configuration from the config file.</p>"},{"location":"api/config_manager/#functions","title":"Functions","text":""},{"location":"api/config_manager/#get_valueself-str","title":"get_value(self) -&gt; str","text":"<p>Return the actual string value.</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/config_manager/#clearself","title":"clear(self)","text":"<p>Securely clear the string value from memory.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/config_manager/#get_instancecls-schema_path-none-config_path-none-lockdown_mode-false_1","title":"get_instance(cls, schema_path = None, config_path = None, lockdown_mode = False)","text":"<p>Get or create the singleton instance of ConfigManager.</p> <p>Parameters:</p> <ul> <li>cls</li> <li>schema_path = None</li> <li>config_path = None</li> <li>lockdown_mode = False</li> </ul>"},{"location":"api/config_manager/#create_config_signatureself-file_path-str","title":"create_config_signature(self, file_path: str)","text":"<p>Create a signature file for configuration integrity verification.</p> <p>Args:     file_path: Path to the configuration file</p> <p>Parameters:</p> <ul> <li>self</li> <li>file_path (str)</li> </ul>"},{"location":"api/config_manager/#getself-path-str-default-any-none-any","title":"get(self, path: str, default: Any = None) -&gt; Any","text":"<p>Get configuration value by dot-notation path with secure handling.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')     default: Default value to return if path not found</p> <p>Returns:     Configuration value or default</p> <p>Parameters:</p> <ul> <li>self</li> <li>path (str)</li> <li>default (Any) = None</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/config_manager/#get_rawself-path-str-default-any-none-any","title":"get_raw(self, path: str, default: Any = None) -&gt; Any","text":"<p>Get raw configuration value without secure wrapping. Only use when the actual value is needed for operations.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')     default: Default value to return if path not found</p> <p>Returns:     Raw configuration value or default</p> <p>Parameters:</p> <ul> <li>self</li> <li>path (str)</li> <li>default (Any) = None</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/config_manager/#setself-path-str-value-any","title":"set(self, path: str, value: Any)","text":"<p>Set configuration value by dot-notation path with audit logging.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')     value: Value to set</p> <p>Parameters:</p> <ul> <li>self</li> <li>path (str)</li> <li>value (Any)</li> </ul>"},{"location":"api/config_manager/#reloadself","title":"reload(self)","text":"<p>Reload configuration from file and reapply environment overrides.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/config_manager/#saveself-file_path-str-none","title":"save(self, file_path: str = None)","text":"<p>Save current configuration to file.</p> <p>Args:     file_path: Path to save configuration to (defaults to self.config_path)</p> <p>Parameters:</p> <ul> <li>self</li> <li>file_path (str) = None</li> </ul>"},{"location":"api/config_manager/#get_schema_infoself-path-str-dict","title":"get_schema_info(self, path: str) -&gt; Dict","text":"<p>Get schema information for a configuration path.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')</p> <p>Returns:     Schema information (type, default, description, etc.)</p> <p>Parameters:</p> <ul> <li>self</li> <li>path (str)</li> </ul> <p>Returns:</p> <ul> <li>Dict</li> </ul>"},{"location":"api/config_manager/#to_dictself-dict","title":"to_dict(self) -&gt; Dict","text":"<p>Return the complete configuration as a dictionary.</p> <p>Sensitive values are masked in the returned dictionary.</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Dict</li> </ul>"},{"location":"api/config_manager/#get_env_var_nameself-path-str-str","title":"get_env_var_name(self, path: str) -&gt; str","text":"<p>Get the corresponding environment variable name for a config path.</p> <p>Args:     path: Path to the configuration value (e.g., 'service.check_interval')</p> <p>Returns:     Environment variable name or None if not defined</p> <p>Parameters:</p> <ul> <li>self</li> <li>path (str)</li> </ul> <p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/config_manager/#self_monitorself-dict","title":"self_monitor(self) -&gt; Dict","text":"<p>Monitor the configuration system for security issues.</p> <p>Returns:     Dict with monitoring results</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Dict</li> </ul>"},{"location":"api/config_manager/#reload_configself","title":"reload_config(self)","text":"<p>Reload configuration from the config file.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/config_manager/#scan_schemaschema-path","title":"scan_schema(schema, path = '')","text":"<p>Parameters:</p> <ul> <li>schema</li> <li>path = ''</li> </ul>"},{"location":"api/config_schema/","title":"config_schema","text":"<p>Configuration Schema for NGINX Security Monitor</p> <p>This file defines the schema for all configurable options in the NGINX Security Monitor. It is used by the ConfigManager for validation, type conversion, and documentation.</p>"},{"location":"api/config_schema/#constants","title":"Constants","text":""},{"location":"api/config_schema/#schema","title":"SCHEMA","text":"<p>Value: <code>{'service': {'config_path': {'__type': 'string', '__default': '/etc/nginx-security-monitor/settings.yaml', '__description': 'Path to the configuration file', '__env': 'NGINX_MONITOR_CONFIG_PATH'}, 'check_interval': {'__type': 'integer', '__default': 60, '__range': [1, 3600], '__description': 'Interval between security checks in seconds', '__env': 'NGINX_MONITOR_CHECK_INTERVAL'}, 'log_file_path': {'__type': 'string', '__default': '/var/log/nginx/access.log', '__description': 'Path to the NGINX access log file', '__env': 'NGINX_MONITOR_LOG_FILE_PATH'}, 'error_log_file_path': {'__type': 'string', '__default': '/var/log/nginx/error.log', '__description': 'Path to the NGINX error log file', '__env': 'NGINX_MONITOR_ERROR_LOG_FILE_PATH'}}, 'log_processing': {'log_format_pattern': {'__type': 'string', '__default': '^(\\\\S+) \\\\S+ \\\\S+ \\\\[([^:]+):(\\\\d+:\\\\d+:\\\\d+) ([^\\\\]]+)\\\\] \"(\\\\S+) (.*?) (\\\\S+)\" (\\\\d+) (\\\\d+) \"([^\"]*)\" \"([^\"]*)\"$', '__description': 'Regular expression pattern for parsing log entries', '__env': 'NGINX_MONITOR_LOG_FORMAT_PATTERN'}, 'field_mappings': {'__type': 'object', '__description': 'Mapping of field names to position in the log format pattern', 'ip_address': {'__type': 'integer', '__default': 1}, 'date': {'__type': 'integer', '__default': 2}, 'time': {'__type': 'integer', '__default': 3}, 'timezone': {'__type': 'integer', '__default': 4}, 'method': {'__type': 'integer', '__default': 5}, 'path': {'__type': 'integer', '__default': 6}, 'protocol': {'__type': 'integer', '__default': 7}, 'status_code': {'__type': 'integer', '__default': 8}, 'response_size': {'__type': 'integer', '__default': 9}, 'referrer': {'__type': 'integer', '__default': 10}, 'user_agent': {'__type': 'integer', '__default': 11}}, 'min_fields_required': {'__type': 'integer', '__default': 10, '__range': [5, 20], '__description': 'Minimum number of fields required for a valid log entry', '__env': 'NGINX_MONITOR_MIN_LOG_FIELDS'}}, 'pattern_detection': {'thresholds': {'requests_per_ip_per_minute': {'__type': 'integer', '__default': 100, '__range': [10, 10000], '__description': 'Maximum number of requests per IP address per minute', '__security_critical': True, '__min_secure': 30, '__env': 'NGINX_MONITOR_MAX_REQUESTS_PER_IP'}, 'failed_requests_per_minute': {'__type': 'integer', '__default': 50, '__range': [5, 5000], '__description': 'Maximum number of failed requests per minute', '__security_critical': True, '__min_secure': 20, '__env': 'NGINX_MONITOR_MAX_FAILED_REQUESTS'}, 'error_rate_threshold': {'__type': 'number', '__default': 0.1, '__range': [0.01, 1.0], '__description': 'Threshold for suspicious error rate', '__security_critical': True, '__min_secure': 0.05, '__env': 'NGINX_MONITOR_ERROR_RATE_THRESHOLD'}, 'brute_force': {'max_attempts': {'__type': 'integer', '__default': 10, '__range': [3, 100], '__description': 'Maximum number of failed login attempts before triggering brute force detection', '__security_critical': True, '__min_secure': 5, '__env': 'NGINX_MONITOR_BRUTE_FORCE_MAX_ATTEMPTS'}, 'time_window_seconds': {'__type': 'integer', '__default': 300, '__range': [60, 3600], '__description': 'Time window in seconds for brute force detection', '__security_critical': True, '__min_secure': 300, '__env': 'NGINX_MONITOR_BRUTE_FORCE_TIME_WINDOW'}}}, 'sql_injection_patterns': {'__type': 'array', '__default': ['(\\x08union\\x08.*\\x08select\\x08|\\x08select\\x08.*\\x08union\\x08)', '(\\x08drop\\x08.*\\x08table\\x08|\\x08table\\x08.*\\x08drop\\x08)', '(\\x08insert\\x08.*\\x08into\\x08|\\x08into\\x08.*\\x08insert\\x08)', \"('.*or.*'.*=.*'|'.*=.*'.*or.*')\", '(--|\\\\#|\\\\/\\\\*|\\\\*\\\\/)'], '__description': 'Regular expression patterns for detecting SQL injection attempts', '__env': 'NGINX_MONITOR_SQL_INJECTION_PATTERNS'}, 'xss_patterns': {'__type': 'array', '__default': ['&lt;script[^&gt;]*&gt;.*?&lt;/script&gt;', 'javascript:', 'on\\\\w+\\\\s*=', '&lt;iframe[^&gt;]*&gt;'], '__description': 'Regular expression patterns for detecting XSS attacks', '__env': 'NGINX_MONITOR_XSS_PATTERNS'}, 'suspicious_user_agents': {'__type': 'array', '__default': ['sqlmap', 'nmap', 'nikto', 'dirb', 'gobuster', 'masscan'], '__description': 'Patterns for identifying suspicious user agents', '__env': 'NGINX_MONITOR_SUSPICIOUS_USER_AGENTS'}}, 'mitigation': {'strategies': {'ddos': {'enabled': {'__type': 'boolean', '__default': True}, 'action': {'__type': 'string', '__default': 'rate_limit', '__description': 'Action to take when a DDoS attack is detected'}, 'description': {'__type': 'string', '__default': 'DDoS mitigation tactics applied.'}}, 'sql_injection': {'enabled': {'__type': 'boolean', '__default': True}, 'action': {'__type': 'string', '__default': 'block_ip', '__description': 'Action to take when SQL injection is detected'}, 'description': {'__type': 'string', '__default': 'SQL injection mitigation tactics applied.'}}, 'xss': {'enabled': {'__type': 'boolean', '__default': True}, 'action': {'__type': 'string', '__default': 'sanitize', '__description': 'Action to take when XSS is detected'}, 'description': {'__type': 'string', '__default': 'XSS mitigation tactics applied.'}}, 'brute_force': {'enabled': {'__type': 'boolean', '__default': True}, 'action': {'__type': 'string', '__default': 'temporary_ban', '__description': 'Action to take when brute force is detected'}, 'ban_duration': {'__type': 'integer', '__default': 3600, '__range': [300, 86400], '__description': 'Duration of temporary ban in seconds', '__security_critical': True, '__min_secure': 3600, '__env': 'NGINX_MONITOR_BRUTE_FORCE_BAN_DURATION'}, 'description': {'__type': 'string', '__default': 'Brute force mitigation tactics applied.'}}}, 'default_response': {'__type': 'string', '__default': 'No specific mitigation tactics available for this pattern.', '__description': 'Default response when no specific mitigation is available'}}, 'service_protection': {'protected_files': {'__type': 'array', '__default': ['/opt/nginx-security-monitor/src/', '/etc/nginx-security-monitor/', '/etc/systemd/system/nginx-security-monitor.service'], '__description': 'Files and directories to monitor for integrity', '__env': 'NGINX_MONITOR_PROTECTED_FILES'}, 'expected_processes': {'__type': 'array', '__default': ['monitor_service.py'], '__description': 'Expected process names for the service', '__env': 'NGINX_MONITOR_EXPECTED_PROCESSES'}, 'resource_thresholds': {'cpu_percent': {'__type': 'number', '__default': 80.0, '__range': [50.0, 99.0], '__description': 'CPU usage threshold percentage', '__security_critical': True, '__min_secure': 70.0, '__env': 'NGINX_MONITOR_CPU_THRESHOLD'}, 'memory_percent': {'__type': 'number', '__default': 80.0, '__range': [50.0, 99.0], '__description': 'Memory usage threshold percentage', '__security_critical': True, '__min_secure': 70.0, '__env': 'NGINX_MONITOR_MEMORY_THRESHOLD'}, 'disk_usage_percent': {'__type': 'number', '__default': 90.0, '__range': [50.0, 99.0], '__description': 'Disk usage threshold percentage', '__security_critical': True, '__min_secure': 80.0, '__env': 'NGINX_MONITOR_DISK_THRESHOLD'}}, 'cpu_check_interval': {'__type': 'number', '__default': 1.0, '__range': [0.1, 10.0], '__description': 'Interval in seconds for CPU usage checks', '__env': 'NGINX_MONITOR_CPU_CHECK_INTERVAL'}, 'max_file_growth': {'__type': 'integer', '__default': 10485760, '__range': [1048576, 1073741824], '__description': 'Maximum allowed file growth in bytes (10MB default)', '__env': 'NGINX_MONITOR_MAX_FILE_GROWTH'}, 'max_log_age_seconds': {'__type': 'integer', '__default': 300, '__range': [60, 3600], '__description': 'Maximum age of log file in seconds before warning', '__env': 'NGINX_MONITOR_MAX_LOG_AGE'}, 'self_check_rate_limit': {'__type': 'integer', '__default': 10, '__range': [1, 100], '__description': 'Maximum number of self-check operations per minute', '__env': 'NGINX_MONITOR_SELF_CHECK_LIMIT'}}, 'network_security': {'max_failed_attempts': {'__type': 'integer', '__default': 10, '__range': [3, 100], '__description': 'Maximum number of failed login attempts before alerting', '__security_critical': True, '__min_secure': 5, '__env': 'NGINX_MONITOR_MAX_FAILED_ATTEMPTS'}, 'max_login_attempts': {'__type': 'integer', '__default': 100, '__range': [10, 1000], '__description': 'Maximum number of login attempts in the monitoring period', '__env': 'NGINX_MONITOR_MAX_LOGIN_ATTEMPTS'}, 'internal_ip_prefixes': {'__type': 'array', '__default': ['127.', '10.', '172.16.', '172.17.', '172.18.', '172.19.', '172.20.', '172.21.', '172.22.', '172.23.', '172.24.', '172.25.', '172.26.', '172.27.', '172.28.', '172.29.', '172.30.', '172.31.', '192.168.'], '__description': 'IP address prefixes considered internal', '__env': 'NGINX_MONITOR_INTERNAL_IP_PREFIXES'}, 'file_permissions': {'__type': 'object', '__description': 'File permissions in octal format', '/etc/nginx-security-monitor/settings.yaml': {'__type': 'string', '__default': '0640'}, '/etc/nginx-security-monitor/.salt': {'__type': 'string', '__default': '0600'}}}, 'crypto': {'master_key_env': {'__type': 'string', '__default': 'NGINX_MONITOR_KEY', '__description': 'Environment variable name for the master key', '__env': 'NGINX_MONITOR_MASTER_KEY_ENV'}, 'salt_file': {'__type': 'string', '__default': '/etc/nginx-security-monitor/.salt', '__description': 'Path to the salt file', '__env': 'NGINX_MONITOR_SALT_FILE'}, 'check_interval_variance': {'__type': 'integer', '__default': 20, '__range': [0, 50], '__description': 'Randomization percentage for check intervals', '__env': 'NGINX_MONITOR_CHECK_INTERVAL_VARIANCE'}, 'base_delay': {'__type': 'number', '__default': 0.1, '__range': [0.01, 1.0], '__description': 'Base delay for variable delays in seconds', '__env': 'NGINX_MONITOR_BASE_DELAY'}, 'max_delay': {'__type': 'number', '__default': 1.0, '__range': [0.1, 10.0], '__description': 'Maximum delay for variable delays in seconds', '__env': 'NGINX_MONITOR_MAX_DELAY'}}, 'plugin_system': {'plugin_dirs': {'__type': 'array', '__default': ['/etc/nginx-security-monitor/plugins', '/opt/nginx-security-monitor/custom_plugins', '~/.nginx-security-monitor/plugins'], '__description': 'Directories to search for plugins', '__env': 'NGINX_MONITOR_PLUGIN_DIRS'}, 'default_priority': {'__type': 'integer', '__default': 100, '__range': [1, 1000], '__description': 'Default priority for plugins', '__env': 'NGINX_MONITOR_DEFAULT_PLUGIN_PRIORITY'}, 'enabled': {'__type': 'boolean', '__default': True, '__description': 'Whether the plugin system is enabled', '__env': 'NGINX_MONITOR_PLUGINS_ENABLED'}, 'auto_reload': {'__type': 'boolean', '__default': False, '__description': 'Whether to automatically reload plugins when they change', '__env': 'NGINX_MONITOR_PLUGINS_AUTO_RELOAD'}, 'reload_interval': {'__type': 'integer', '__default': 300, '__range': [60, 3600], '__description': 'Interval in seconds for checking for plugin changes', '__env': 'NGINX_MONITOR_PLUGINS_RELOAD_INTERVAL'}}, 'security_integrations': {'command_timeout': {'__type': 'integer', '__default': 5, '__range': [1, 60], '__description': 'Timeout in seconds for integration commands', '__env': 'NGINX_MONITOR_COMMAND_TIMEOUT'}, 'extended_command_timeout': {'__type': 'integer', '__default': 10, '__range': [1, 300], '__description': 'Extended timeout in seconds for longer-running commands', '__env': 'NGINX_MONITOR_EXTENDED_COMMAND_TIMEOUT'}, 'fail2ban': {'enabled': {'__type': 'boolean', '__default': True, '__description': 'Whether fail2ban integration is enabled', '__env': 'NGINX_MONITOR_FAIL2BAN_ENABLED'}, 'min_bantime': {'__type': 'integer', '__default': 600, '__range': [60, 86400], '__description': 'Minimum ban time in seconds', '__env': 'NGINX_MONITOR_FAIL2BAN_MIN_BANTIME'}, 'jail_files': {'__type': 'array', '__default': ['/etc/fail2ban/jail.local', '/etc/fail2ban/jail.conf', '/etc/fail2ban/jail.d/'], '__description': 'Paths to fail2ban jail configuration files', '__env': 'NGINX_MONITOR_FAIL2BAN_JAIL_FILES'}}, 'suricata': {'enabled': {'__type': 'boolean', '__default': False, '__description': 'Whether Suricata integration is enabled', '__env': 'NGINX_MONITOR_SURICATA_ENABLED'}, 'rules_dir': {'__type': 'string', '__default': '/etc/suricata/rules/', '__description': 'Path to Suricata rules directory', '__env': 'NGINX_MONITOR_SURICATA_RULES_DIR'}}, 'modsecurity': {'enabled': {'__type': 'boolean', '__default': False, '__description': 'Whether ModSecurity integration is enabled', '__env': 'NGINX_MONITOR_MODSECURITY_ENABLED'}, 'rules_dir': {'__type': 'string', '__default': '/etc/modsecurity/rules', '__description': 'Path to ModSecurity rules directory', '__env': 'NGINX_MONITOR_MODSECURITY_RULES_DIR'}}}, 'alert_system': {'email': {'enabled': {'__type': 'boolean', '__default': True, '__description': 'Whether email alerts are enabled', '__env': 'NGINX_MONITOR_EMAIL_ENABLED'}, 'config_path': {'__type': 'string', '__default': '/etc/nginx-security-monitor/settings.yaml', '__description': 'Path to email configuration file', '__env': 'NGINX_MONITOR_EMAIL_CONFIG_PATH'}, 'smtp_server': {'__type': 'string', '__default': 'smtp.example.com', '__description': 'SMTP server hostname', '__env': 'NGINX_MONITOR_SMTP_SERVER'}, 'smtp_port': {'__type': 'integer', '__default': 587, '__range': [1, 65535], '__description': 'SMTP server port', '__env': 'NGINX_MONITOR_SMTP_PORT'}, 'smtp_server_default': {'__type': 'string', '__default': 'localhost', '__description': 'Default SMTP server if not specified', '__env': 'NGINX_MONITOR_SMTP_SERVER_DEFAULT'}, 'smtp_port_default': {'__type': 'integer', '__default': 587, '__range': [1, 65535], '__description': 'Default SMTP port if not specified', '__env': 'NGINX_MONITOR_SMTP_PORT_DEFAULT'}, 'use_tls': {'__type': 'boolean', '__default': True, '__description': 'Whether to use TLS for SMTP connection', '__env': 'NGINX_MONITOR_SMTP_USE_TLS'}, 'use_tls_default': {'__type': 'boolean', '__default': True, '__description': 'Default TLS setting if not specified', '__env': 'NGINX_MONITOR_SMTP_USE_TLS_DEFAULT'}, 'username': {'__type': 'string', '__default': 'your_email@example.com', '__description': 'SMTP username', '__sensitive': True, '__env': 'NGINX_MONITOR_SMTP_USERNAME'}, 'password': {'__type': 'string', '__default': 'your_email_password', '__description': 'SMTP password', '__sensitive': True, '__env': 'NGINX_MONITOR_SMTP_PASSWORD'}, 'from_address': {'__type': 'string', '__default': 'your_email@example.com', '__description': 'Email from address', '__env': 'NGINX_MONITOR_EMAIL_FROM'}, 'to_address': {'__type': 'string', '__default': 'alert_recipient@example.com', '__description': 'Email recipient address', '__env': 'NGINX_MONITOR_EMAIL_TO'}}, 'sms': {'enabled': {'__type': 'boolean', '__default': False, '__description': 'Whether SMS alerts are enabled', '__env': 'NGINX_MONITOR_SMS_ENABLED'}, 'provider': {'__type': 'string', '__default': 'your_sms_provider', '__description': 'SMS provider name', '__env': 'NGINX_MONITOR_SMS_PROVIDER'}, 'api_key': {'__type': 'string', '__default': 'your_sms_api_key', '__description': 'SMS provider API key', '__sensitive': True, '__env': 'NGINX_MONITOR_SMS_API_KEY'}, 'from_number': {'__type': 'string', '__default': '+1234567890', '__description': 'SMS sender phone number', '__env': 'NGINX_MONITOR_SMS_FROM'}, 'to_number': {'__type': 'string', '__default': '+0987654321', '__description': 'SMS recipient phone number', '__env': 'NGINX_MONITOR_SMS_TO'}}, 'thresholds': {'high': {'__type': 'integer', '__default': 10, '__range': [1, 100], '__description': 'High priority alert threshold', '__env': 'NGINX_MONITOR_ALERT_HIGH'}, 'medium': {'__type': 'integer', '__default': 5, '__range': [1, 100], '__description': 'Medium priority alert threshold', '__env': 'NGINX_MONITOR_ALERT_MEDIUM'}, 'low': {'__type': 'integer', '__default': 1, '__range': [1, 100], '__description': 'Low priority alert threshold', '__env': 'NGINX_MONITOR_ALERT_LOW'}}, 'cooldown_periods': {'high': {'__type': 'integer', '__default': 300, '__range': [60, 3600], '__description': 'Cooldown period in seconds for high priority alerts', '__env': 'NGINX_MONITOR_COOLDOWN_HIGH'}, 'medium': {'__type': 'integer', '__default': 1800, '__range': [300, 7200], '__description': 'Cooldown period in seconds for medium priority alerts', '__env': 'NGINX_MONITOR_COOLDOWN_MEDIUM'}, 'low': {'__type': 'integer', '__default': 3600, '__range': [600, 86400], '__description': 'Cooldown period in seconds for low priority alerts', '__env': 'NGINX_MONITOR_COOLDOWN_LOW'}}}, 'alert_system': {'email': {'enabled': {'__type': 'boolean', '__default': True, '__description': 'Enable or disable email alerts', '__env': 'NGINX_MONITOR_EMAIL_ENABLED'}, 'config_path': {'__type': 'string', '__default': '/etc/nginx-security-monitor/settings.yaml', '__description': 'Path to the email configuration file', '__env': 'NGINX_MONITOR_EMAIL_CONFIG_PATH'}, 'from_address': {'__type': 'string', '__default': 'nginx-security@example.com', '__description': 'Email address to send alerts from', '__env': 'NGINX_MONITOR_EMAIL_FROM'}, 'to_address': {'__type': 'string', '__default': 'admin@example.com', '__description': 'Email address to send alerts to', '__env': 'NGINX_MONITOR_EMAIL_TO'}, 'smtp_server': {'__type': 'string', '__default': 'localhost', '__description': 'SMTP server hostname', '__env': 'NGINX_MONITOR_EMAIL_SMTP_SERVER'}, 'smtp_port': {'__type': 'integer', '__default': 587, '__range': [1, 65535], '__description': 'SMTP server port', '__env': 'NGINX_MONITOR_EMAIL_SMTP_PORT'}, 'username': {'__type': 'string', '__default': '', '__description': 'SMTP username', '__env': 'NGINX_MONITOR_EMAIL_USERNAME'}, 'password': {'__type': 'string', '__default': '', '__description': 'SMTP password', '__sensitive': True, '__env': 'NGINX_MONITOR_EMAIL_PASSWORD'}, 'use_tls': {'__type': 'boolean', '__default': True, '__description': 'Use TLS for SMTP connection', '__env': 'NGINX_MONITOR_EMAIL_USE_TLS'}, 'retry_count': {'__type': 'integer', '__default': 3, '__range': [1, 10], '__description': 'Number of retry attempts for sending email', '__env': 'NGINX_MONITOR_EMAIL_RETRY_COUNT'}, 'retry_delay': {'__type': 'integer', '__default': 5, '__range': [1, 60], '__description': 'Delay between retry attempts in seconds', '__env': 'NGINX_MONITOR_EMAIL_RETRY_DELAY'}, 'debug_level': {'__type': 'integer', '__default': 0, '__range': [0, 2], '__description': 'Debug level for SMTP connection', '__env': 'NGINX_MONITOR_EMAIL_DEBUG_LEVEL'}, 'footer_text': {'__type': 'string', '__default': 'This is an automated alert from NGINX Security Monitor. Please do not reply to this email.', '__description': 'Footer text for email alerts', '__env': 'NGINX_MONITOR_EMAIL_FOOTER_TEXT'}, 'copyright_text': {'__type': 'string', '__default': '\u00a9 NGINX Security Monitor', '__description': 'Copyright text for email alerts', '__env': 'NGINX_MONITOR_EMAIL_COPYRIGHT_TEXT'}, 'text_alert_header': {'__type': 'string', '__default': 'NGINX Security Alert', '__description': 'Header text for plain text email alerts', '__env': 'NGINX_MONITOR_EMAIL_TEXT_HEADER'}, 'alert_header': {'__type': 'string', '__default': '\ud83d\udea8 Security Alert', '__description': 'Header text for HTML email alerts', '__env': 'NGINX_MONITOR_EMAIL_ALERT_HEADER'}, 'action_message': {'__type': 'string', '__default': 'Please investigate this security threat immediately and take appropriate action to secure your system.', '__description': 'Action message for email alerts', '__env': 'NGINX_MONITOR_EMAIL_ACTION_MESSAGE'}, 'fallback_enabled': {'__type': 'boolean', '__default': False, '__description': 'Enable fallback notification if email fails', '__env': 'NGINX_MONITOR_EMAIL_FALLBACK_ENABLED'}, 'fallback_address': {'__type': 'string', '__default': '', '__description': 'Fallback email address if primary fails', '__env': 'NGINX_MONITOR_EMAIL_FALLBACK_ADDRESS'}, 'severity_colors': {'__type': 'object', '__description': 'Colors for different severity levels in HTML emails', 'HIGH': {'__type': 'string', '__default': '#dc3545'}, 'MEDIUM': {'__type': 'string', '__default': '#fd7e14'}, 'LOW': {'__type': 'string', '__default': '#ffc107'}}}, 'sms': {'enabled': {'__type': 'boolean', '__default': False, '__description': 'Enable or disable SMS alerts', '__env': 'NGINX_MONITOR_SMS_ENABLED'}, 'provider': {'__type': 'string', '__default': 'dummy', '__options': ['dummy', 'twilio', 'aws_sns'], '__description': 'SMS service provider', '__env': 'NGINX_MONITOR_SMS_PROVIDER'}, 'api_key': {'__type': 'string', '__default': '', '__description': 'API key for SMS service', '__sensitive': True, '__env': 'NGINX_MONITOR_SMS_API_KEY'}, 'api_secret': {'__type': 'string', '__default': '', '__description': 'API secret for SMS service', '__sensitive': True, '__env': 'NGINX_MONITOR_SMS_API_SECRET'}, 'from_number': {'__type': 'string', '__default': '', '__description': 'Phone number to send SMS from', '__env': 'NGINX_MONITOR_SMS_FROM_NUMBER'}, 'default_recipient': {'__type': 'string', '__default': '', '__description': 'Default phone number to send SMS to', '__env': 'NGINX_MONITOR_SMS_DEFAULT_RECIPIENT'}, 'max_length': {'__type': 'integer', '__default': 160, '__range': [50, 1600], '__description': 'Maximum length of SMS message', '__env': 'NGINX_MONITOR_SMS_MAX_LENGTH'}, 'retry_count': {'__type': 'integer', '__default': 3, '__range': [1, 10], '__description': 'Number of retry attempts for sending SMS', '__env': 'NGINX_MONITOR_SMS_RETRY_COUNT'}, 'retry_delay': {'__type': 'integer', '__default': 5, '__range': [1, 60], '__description': 'Delay between retry attempts in seconds', '__env': 'NGINX_MONITOR_SMS_RETRY_DELAY'}}}}</code></p>"},{"location":"api/config_schema/#functions","title":"Functions","text":""},{"location":"api/config_schema/#save_schema_to_fileschema_path-etcnginx-security-monitorschemayaml","title":"save_schema_to_file(schema_path = '/etc/nginx-security-monitor/schema.yaml')","text":"<p>Save the schema to a YAML file.</p> <p>Args:     schema_path: Path to save the schema to</p> <p>Parameters:</p> <ul> <li>schema_path = '/etc/nginx-security-monitor/schema.yaml'</li> </ul>"},{"location":"api/crypto_utils/","title":"crypto_utils","text":"<p>Cryptographic utilities for securing custom patterns and configurations. This allows clients to keep their specific detection patterns and countermeasures private.</p>"},{"location":"api/crypto_utils/#classes","title":"Classes","text":""},{"location":"api/crypto_utils/#securityconfigmanager","title":"SecurityConfigManager","text":"<p>Manages encrypted configuration and pattern files.</p>"},{"location":"api/crypto_utils/#methods","title":"Methods","text":""},{"location":"api/crypto_utils/#encrypt_datadata","title":"encrypt_data(data)","text":"<p>Encrypt data (dict or string) and return base64 encoded result.</p> <p>Parameters:</p> <ul> <li>data</li> </ul>"},{"location":"api/crypto_utils/#decrypt_dataencrypted_data","title":"decrypt_data(encrypted_data)","text":"<p>Decrypt base64 encoded data and return original dict/string.</p> <p>Parameters:</p> <ul> <li>encrypted_data</li> </ul>"},{"location":"api/crypto_utils/#encrypt_fileinput_file-output_file","title":"encrypt_file(input_file, output_file)","text":"<p>Encrypt a file and save to output location.</p> <p>Parameters:</p> <ul> <li>input_file</li> <li>output_file</li> </ul>"},{"location":"api/crypto_utils/#decrypt_fileencrypted_file","title":"decrypt_file(encrypted_file)","text":"<p>Decrypt a file and return contents.</p> <p>Parameters:</p> <ul> <li>encrypted_file</li> </ul>"},{"location":"api/crypto_utils/#patternobfuscator","title":"PatternObfuscator","text":"<p>Adds randomization and obfuscation to detection patterns.</p>"},{"location":"api/crypto_utils/#methods_1","title":"Methods","text":""},{"location":"api/crypto_utils/#randomize_check_intervalbase_interval-variance_percent-20","title":"randomize_check_interval(base_interval, variance_percent = 20)","text":"<p>Add randomness to check intervals to avoid predictable patterns.</p> <p>Parameters:</p> <ul> <li>base_interval</li> <li>variance_percent = 20</li> </ul>"},{"location":"api/crypto_utils/#obfuscate_pattern_orderpatterns","title":"obfuscate_pattern_order(patterns)","text":"<p>Randomize the order of pattern checking to avoid predictable detection.</p> <p>Parameters:</p> <ul> <li>patterns</li> </ul>"},{"location":"api/crypto_utils/#add_decoy_requestslog_entries-decoy_count-none","title":"add_decoy_requests(log_entries, decoy_count = None)","text":"<p>Add fake log entries to make real patterns harder to identify.</p> <p>Parameters:</p> <ul> <li>log_entries</li> <li>decoy_count = None</li> </ul>"},{"location":"api/crypto_utils/#variable_delaybase_delay-01-max_delay-10","title":"variable_delay(base_delay = 0.1, max_delay = 1.0)","text":"<p>Add variable delays to make timing analysis harder.</p> <p>Parameters:</p> <ul> <li>base_delay = 0.1</li> <li>max_delay = 1.0</li> </ul>"},{"location":"api/crypto_utils/#functions","title":"Functions","text":""},{"location":"api/crypto_utils/#generate_master_key","title":"generate_master_key()","text":"<p>Generate a secure random master key for encryption.</p>"},{"location":"api/crypto_utils/#create_encrypted_pattern_filepatterns_dict-output_file-master_key_env-nginx_monitor_key","title":"create_encrypted_pattern_file(patterns_dict, output_file, master_key_env = 'NGINX_MONITOR_KEY')","text":"<p>Helper function to create encrypted pattern files.</p> <p>Parameters:</p> <ul> <li>patterns_dict</li> <li>output_file</li> <li>master_key_env = 'NGINX_MONITOR_KEY'</li> </ul>"},{"location":"api/crypto_utils/#encrypt_dataself-data","title":"encrypt_data(self, data)","text":"<p>Encrypt data (dict or string) and return base64 encoded result.</p> <p>Parameters:</p> <ul> <li>self</li> <li>data</li> </ul>"},{"location":"api/crypto_utils/#decrypt_dataself-encrypted_data","title":"decrypt_data(self, encrypted_data)","text":"<p>Decrypt base64 encoded data and return original dict/string.</p> <p>Parameters:</p> <ul> <li>self</li> <li>encrypted_data</li> </ul>"},{"location":"api/crypto_utils/#encrypt_fileself-input_file-output_file","title":"encrypt_file(self, input_file, output_file)","text":"<p>Encrypt a file and save to output location.</p> <p>Parameters:</p> <ul> <li>self</li> <li>input_file</li> <li>output_file</li> </ul>"},{"location":"api/crypto_utils/#decrypt_fileself-encrypted_file","title":"decrypt_file(self, encrypted_file)","text":"<p>Decrypt a file and return contents.</p> <p>Parameters:</p> <ul> <li>self</li> <li>encrypted_file</li> </ul>"},{"location":"api/crypto_utils/#randomize_check_intervalself-base_interval-variance_percent-20","title":"randomize_check_interval(self, base_interval, variance_percent = 20)","text":"<p>Add randomness to check intervals to avoid predictable patterns.</p> <p>Parameters:</p> <ul> <li>self</li> <li>base_interval</li> <li>variance_percent = 20</li> </ul>"},{"location":"api/crypto_utils/#obfuscate_pattern_orderself-patterns","title":"obfuscate_pattern_order(self, patterns)","text":"<p>Randomize the order of pattern checking to avoid predictable detection.</p> <p>Parameters:</p> <ul> <li>self</li> <li>patterns</li> </ul>"},{"location":"api/crypto_utils/#add_decoy_requestsself-log_entries-decoy_count-none","title":"add_decoy_requests(self, log_entries, decoy_count = None)","text":"<p>Add fake log entries to make real patterns harder to identify.</p> <p>Parameters:</p> <ul> <li>self</li> <li>log_entries</li> <li>decoy_count = None</li> </ul>"},{"location":"api/crypto_utils/#variable_delayself-base_delay-01-max_delay-10","title":"variable_delay(self, base_delay = 0.1, max_delay = 1.0)","text":"<p>Add variable delays to make timing analysis harder.</p> <p>Parameters:</p> <ul> <li>self</li> <li>base_delay = 0.1</li> <li>max_delay = 1.0</li> </ul>"},{"location":"api/log_parser/","title":"log_parser","text":""},{"location":"api/log_parser/#functions","title":"Functions","text":""},{"location":"api/log_parser/#parse_logslog_file_path","title":"parse_logs(log_file_path)","text":"<p>Parameters:</p> <ul> <li>log_file_path</li> </ul>"},{"location":"api/log_processor/","title":"log_processor","text":"<p>Log Processor Module Handles log file reading and parsing for the NGINX Security Monitor.</p>"},{"location":"api/log_processor/#classes","title":"Classes","text":""},{"location":"api/log_processor/#logprocessor","title":"LogProcessor","text":"<p>Handles log file reading and parsing functionality.</p>"},{"location":"api/log_processor/#methods","title":"Methods","text":""},{"location":"api/log_processor/#get_new_log_entrieslog_file_path","title":"get_new_log_entries(log_file_path)","text":"<p>Get only new log entries since last check.</p> <p>Args:     log_file_path: Path to the log file</p> <p>Returns:     list: List of parsed log entries</p> <p>Parameters:</p> <ul> <li>log_file_path</li> </ul>"},{"location":"api/log_processor/#parse_log_lineline","title":"parse_log_line(line)","text":"<p>Parse a single log line into structured data.</p> <p>Args:     line: Raw log line string</p> <p>Returns:     dict: Parsed log entry or None if parsing failed</p> <p>Parameters:</p> <ul> <li>line</li> </ul>"},{"location":"api/log_processor/#reset_processed_size","title":"reset_processed_size()","text":"<p>Reset the last processed size counter.</p>"},{"location":"api/log_processor/#get_processed_size","title":"get_processed_size()","text":"<p>Get the current processed size.</p> <p>Returns:     int: Last processed file size</p>"},{"location":"api/log_processor/#functions","title":"Functions","text":""},{"location":"api/log_processor/#get_new_log_entriesself-log_file_path","title":"get_new_log_entries(self, log_file_path)","text":"<p>Get only new log entries since last check.</p> <p>Args:     log_file_path: Path to the log file</p> <p>Returns:     list: List of parsed log entries</p> <p>Parameters:</p> <ul> <li>self</li> <li>log_file_path</li> </ul>"},{"location":"api/log_processor/#parse_log_lineself-line","title":"parse_log_line(self, line)","text":"<p>Parse a single log line into structured data.</p> <p>Args:     line: Raw log line string</p> <p>Returns:     dict: Parsed log entry or None if parsing failed</p> <p>Parameters:</p> <ul> <li>self</li> <li>line</li> </ul>"},{"location":"api/log_processor/#reset_processed_sizeself","title":"reset_processed_size(self)","text":"<p>Reset the last processed size counter.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/log_processor/#get_processed_sizeself","title":"get_processed_size(self)","text":"<p>Get the current processed size.</p> <p>Returns:     int: Last processed file size</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/mitigation/","title":"mitigation","text":""},{"location":"api/mitigation/#functions","title":"Functions","text":""},{"location":"api/mitigation/#mitigate_threatdetected_pattern","title":"mitigate_threat(detected_pattern)","text":"<p>Applies appropriate mitigation tactics based on the detected attack pattern.</p> <p>Args:     detected_pattern (str): The pattern that has been detected in the logs.</p> <p>Returns:     str: A message indicating the result of the mitigation attempt.</p> <p>Parameters:</p> <ul> <li>detected_pattern</li> </ul>"},{"location":"api/monitor_service/","title":"monitor_service","text":"<p>NGINX Security Monitor Service Main entry point for running the monitor as a system service.</p>"},{"location":"api/monitor_service/#constants","title":"Constants","text":""},{"location":"api/monitor_service/#security_features_available","title":"SECURITY_FEATURES_AVAILABLE","text":"<p>Value: <code>True</code></p>"},{"location":"api/monitor_service/#security_features_available_1","title":"SECURITY_FEATURES_AVAILABLE","text":"<p>Value: <code>False</code></p>"},{"location":"api/monitor_service/#classes","title":"Classes","text":""},{"location":"api/monitor_service/#nginxsecuritymonitor","title":"NginxSecurityMonitor","text":"<p>Main service class for the NGINX Security Monitor.</p>"},{"location":"api/monitor_service/#methods","title":"Methods","text":""},{"location":"api/monitor_service/#load_config","title":"load_config()","text":"<p>Load configuration from YAML file.</p>"},{"location":"api/monitor_service/#setup_logging","title":"setup_logging()","text":"<p>Setup logging configuration.</p>"},{"location":"api/monitor_service/#signal_handlersignum-frame","title":"signal_handler(signum, frame)","text":"<p>Handle shutdown signals gracefully.</p> <p>Parameters:</p> <ul> <li>signum</li> <li>frame</li> </ul>"},{"location":"api/monitor_service/#run","title":"run()","text":"<p>Main service entry point - delegates to security coordinator.</p>"},{"location":"api/monitor_service/#get_monitoring_status","title":"get_monitoring_status()","text":"<p>Get current monitoring status.</p>"},{"location":"api/monitor_service/#force_check","title":"force_check()","text":"<p>Force an immediate security check.</p>"},{"location":"api/monitor_service/#get_new_log_entrieslog_file_path","title":"get_new_log_entries(log_file_path)","text":"<p>Get new log entries - delegates to log processor with state sync.</p> <p>Parameters:</p> <ul> <li>log_file_path</li> </ul>"},{"location":"api/monitor_service/#process_threatsdetected_patterns","title":"process_threats(detected_patterns)","text":"<p>Process threats - backward compatibility with test expectations.</p> <p>Parameters:</p> <ul> <li>detected_patterns</li> </ul>"},{"location":"api/monitor_service/#functions","title":"Functions","text":""},{"location":"api/monitor_service/#main","title":"main()","text":"<p>Main entry point.</p>"},{"location":"api/monitor_service/#load_configself","title":"load_config(self)","text":"<p>Load configuration from YAML file.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/monitor_service/#setup_loggingself","title":"setup_logging(self)","text":"<p>Setup logging configuration.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/monitor_service/#signal_handlerself-signum-frame","title":"signal_handler(self, signum, frame)","text":"<p>Handle shutdown signals gracefully.</p> <p>Parameters:</p> <ul> <li>self</li> <li>signum</li> <li>frame</li> </ul>"},{"location":"api/monitor_service/#runself","title":"run(self)","text":"<p>Main service entry point - delegates to security coordinator.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/monitor_service/#get_monitoring_statusself","title":"get_monitoring_status(self)","text":"<p>Get current monitoring status.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/monitor_service/#force_checkself","title":"force_check(self)","text":"<p>Force an immediate security check.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/monitor_service/#get_new_log_entriesself-log_file_path","title":"get_new_log_entries(self, log_file_path)","text":"<p>Get new log entries - delegates to log processor with state sync.</p> <p>Parameters:</p> <ul> <li>self</li> <li>log_file_path</li> </ul>"},{"location":"api/monitor_service/#process_threatsself-detected_patterns","title":"process_threats(self, detected_patterns)","text":"<p>Process threats - backward compatibility with test expectations.</p> <p>Parameters:</p> <ul> <li>self</li> <li>detected_patterns</li> </ul>"},{"location":"api/network_security/","title":"network_security","text":"<p>Network Security and Access Control for NGINX Security Monitor Implements network-level protection and access controls.</p>"},{"location":"api/network_security/#classes","title":"Classes","text":""},{"location":"api/network_security/#networksecurity","title":"NetworkSecurity","text":"<p>Implements network security controls for the service.</p>"},{"location":"api/network_security/#methods","title":"Methods","text":""},{"location":"api/network_security/#check_ip_accessip_address","title":"check_ip_access(ip_address)","text":"<p>Check if an IP address is allowed to access the service.</p> <p>Parameters:</p> <ul> <li>ip_address</li> </ul>"},{"location":"api/network_security/#track_access_attemptip_address-success-true","title":"track_access_attempt(ip_address, success = True)","text":"<p>Track access attempts for rate limiting and monitoring.</p> <p>Parameters:</p> <ul> <li>ip_address</li> <li>success = True</li> </ul>"},{"location":"api/network_security/#block_ipip_address-reason-security-violation","title":"block_ip(ip_address, reason = 'Security violation')","text":"<p>Block an IP address using iptables (if available).</p> <p>Parameters:</p> <ul> <li>ip_address</li> <li>reason = 'Security violation'</li> </ul>"},{"location":"api/network_security/#check_port_security","title":"check_port_security()","text":"<p>Check for unauthorized network services.</p>"},{"location":"api/network_security/#monitor_dns_queries","title":"monitor_dns_queries()","text":"<p>Monitor for suspicious DNS queries that might indicate compromise.</p>"},{"location":"api/network_security/#check_firewall_status","title":"check_firewall_status()","text":"<p>Check if firewall is properly configured.</p>"},{"location":"api/network_security/#validate_tls_configuration","title":"validate_tls_configuration()","text":"<p>Validate TLS/SSL configuration for secure communications.</p>"},{"location":"api/network_security/#perform_network_security_check","title":"perform_network_security_check()","text":"<p>Perform comprehensive network security check.</p>"},{"location":"api/network_security/#securityhardening","title":"SecurityHardening","text":"<p>Implements additional security hardening measures including: - File permissions and ownership checks - Environment variable security validation - Module security auditing - Package version vulnerability checks - Runtime security monitoring</p>"},{"location":"api/network_security/#methods_1","title":"Methods","text":""},{"location":"api/network_security/#check_file_permissions","title":"check_file_permissions()","text":"<p>Check critical file permissions and ownership.</p>"},{"location":"api/network_security/#check_environment_security","title":"check_environment_security()","text":"<p>Check environment for security issues.</p>"},{"location":"api/network_security/#check_module_security","title":"check_module_security()","text":"<p>Check for vulnerable packages and unsafe module usage.</p>"},{"location":"api/network_security/#perform_security_audit","title":"perform_security_audit()","text":"<p>Perform comprehensive security audit.</p>"},{"location":"api/network_security/#functions","title":"Functions","text":""},{"location":"api/network_security/#check_ip_accessself-ip_address","title":"check_ip_access(self, ip_address)","text":"<p>Check if an IP address is allowed to access the service.</p> <p>Parameters:</p> <ul> <li>self</li> <li>ip_address</li> </ul>"},{"location":"api/network_security/#track_access_attemptself-ip_address-success-true","title":"track_access_attempt(self, ip_address, success = True)","text":"<p>Track access attempts for rate limiting and monitoring.</p> <p>Parameters:</p> <ul> <li>self</li> <li>ip_address</li> <li>success = True</li> </ul>"},{"location":"api/network_security/#block_ipself-ip_address-reason-security-violation","title":"block_ip(self, ip_address, reason = 'Security violation')","text":"<p>Block an IP address using iptables (if available).</p> <p>Parameters:</p> <ul> <li>self</li> <li>ip_address</li> <li>reason = 'Security violation'</li> </ul>"},{"location":"api/network_security/#check_port_securityself","title":"check_port_security(self)","text":"<p>Check for unauthorized network services.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/network_security/#monitor_dns_queriesself","title":"monitor_dns_queries(self)","text":"<p>Monitor for suspicious DNS queries that might indicate compromise.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/network_security/#check_firewall_statusself","title":"check_firewall_status(self)","text":"<p>Check if firewall is properly configured.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/network_security/#validate_tls_configurationself","title":"validate_tls_configuration(self)","text":"<p>Validate TLS/SSL configuration for secure communications.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/network_security/#perform_network_security_checkself","title":"perform_network_security_check(self)","text":"<p>Perform comprehensive network security check.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/network_security/#check_file_permissionsself","title":"check_file_permissions(self)","text":"<p>Check critical file permissions and ownership.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/network_security/#check_environment_securityself","title":"check_environment_security(self)","text":"<p>Check environment for security issues.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/network_security/#check_module_securityself","title":"check_module_security(self)","text":"<p>Check for vulnerable packages and unsafe module usage.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/network_security/#perform_security_auditself","title":"perform_security_audit(self)","text":"<p>Perform comprehensive security audit.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/pattern_detector/","title":"pattern_detector","text":""},{"location":"api/pattern_detector/#classes","title":"Classes","text":""},{"location":"api/pattern_detector/#patterndetector","title":"PatternDetector","text":""},{"location":"api/pattern_detector/#methods","title":"Methods","text":""},{"location":"api/pattern_detector/#load_patterns_configconfig_path","title":"load_patterns_config(config_path)","text":"<p>Load pattern configuration from file.</p> <p>Parameters:</p> <ul> <li>config_path</li> </ul>"},{"location":"api/pattern_detector/#load_custom_patternscustom_patterns_dict","title":"load_custom_patterns(custom_patterns_dict)","text":"<p>Load custom patterns from decrypted configuration.</p> <p>Parameters:</p> <ul> <li>custom_patterns_dict</li> </ul>"},{"location":"api/pattern_detector/#detect_patternsparsed_logs","title":"detect_patterns(parsed_logs)","text":"<p>Detect various attack patterns in logs.</p> <p>Parameters:</p> <ul> <li>parsed_logs</li> </ul>"},{"location":"api/pattern_detector/#get_detected_patterns","title":"get_detected_patterns()","text":"<p>Get all detected patterns.</p>"},{"location":"api/pattern_detector/#get_pattern_summary","title":"get_pattern_summary()","text":"<p>Get a summary of detected patterns.</p>"},{"location":"api/pattern_detector/#functions","title":"Functions","text":""},{"location":"api/pattern_detector/#load_patterns_configself-config_path","title":"load_patterns_config(self, config_path)","text":"<p>Load pattern configuration from file.</p> <p>Parameters:</p> <ul> <li>self</li> <li>config_path</li> </ul>"},{"location":"api/pattern_detector/#load_custom_patternsself-custom_patterns_dict","title":"load_custom_patterns(self, custom_patterns_dict)","text":"<p>Load custom patterns from decrypted configuration.</p> <p>Parameters:</p> <ul> <li>self</li> <li>custom_patterns_dict</li> </ul>"},{"location":"api/pattern_detector/#detect_patternsself-parsed_logs","title":"detect_patterns(self, parsed_logs)","text":"<p>Detect various attack patterns in logs.</p> <p>Parameters:</p> <ul> <li>self</li> <li>parsed_logs</li> </ul>"},{"location":"api/pattern_detector/#get_detected_patternsself","title":"get_detected_patterns(self)","text":"<p>Get all detected patterns.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/pattern_detector/#get_pattern_summaryself","title":"get_pattern_summary(self)","text":"<p>Get a summary of detected patterns.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/plugin_system/","title":"plugin_system","text":"<p>Plugin system for custom mitigation strategies. Allows clients to implement their own secret countermeasures without exposing them in the public codebase.</p>"},{"location":"api/plugin_system/#classes","title":"Classes","text":""},{"location":"api/plugin_system/#mitigationplugin","title":"MitigationPlugin","text":"<p>Abstract base class for mitigation plugins.</p>"},{"location":"api/plugin_system/#methods","title":"Methods","text":""},{"location":"api/plugin_system/#name-str","title":"name() -&gt; str","text":"<p>Return the name of this plugin.</p> <p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/plugin_system/#threat_types-any","title":"threat_types() -&gt; Any","text":"<p>Return list of threat types this plugin can handle.</p> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#can_handlethreat_info-any-bool","title":"can_handle(threat_info: Any) -&gt; bool","text":"<p>Return config.get('mitigation.strategies.ddos.enabled') if this plugin can handle the given threat.</p> <p>Parameters:</p> <ul> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>bool</li> </ul>"},{"location":"api/plugin_system/#mitigatethreat_info-any-any","title":"mitigate(threat_info: Any) -&gt; Any","text":"<p>Apply mitigation for the threat.</p> <p>Args:     threat_info: Dictionary containing threat details</p> <p>Returns:     Dictionary with mitigation results</p> <p>Parameters:</p> <ul> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#get_priority-int","title":"get_priority() -&gt; int","text":"<p>Return priority level (lower number = higher priority).</p> <p>Returns:</p> <ul> <li>int</li> </ul>"},{"location":"api/plugin_system/#pluginmanager","title":"PluginManager","text":"<p>Manages and executes mitigation plugins.</p>"},{"location":"api/plugin_system/#methods_1","title":"Methods","text":""},{"location":"api/plugin_system/#get_available_plugins-any","title":"get_available_plugins() -&gt; Any","text":"<p>Return list of available plugin names.</p> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#execute_mitigationthreat_info-any-any","title":"execute_mitigation(threat_info: Any) -&gt; Any","text":"<p>Execute appropriate mitigation plugins for a threat.</p> <p>Args:     threat_info: Dictionary containing threat details</p> <p>Returns:     List of mitigation results from all applicable plugins</p> <p>Parameters:</p> <ul> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#defaultipblockplugin","title":"DefaultIPBlockPlugin","text":"<p>Default IP blocking mitigation (example - replace with your own).</p>"},{"location":"api/plugin_system/#methods_2","title":"Methods","text":""},{"location":"api/plugin_system/#name-str_1","title":"name() -&gt; str","text":"<p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/plugin_system/#threat_types-any_1","title":"threat_types() -&gt; Any","text":"<p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#can_handlethreat_info-any-bool_1","title":"can_handle(threat_info: Any) -&gt; bool","text":"<p>Parameters:</p> <ul> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>bool</li> </ul>"},{"location":"api/plugin_system/#mitigatethreat_info-any-any_1","title":"mitigate(threat_info: Any) -&gt; Any","text":"<p>Parameters:</p> <ul> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#alertonlyplugin","title":"AlertOnlyPlugin","text":"<p>Plugin that only logs threats without taking action.</p>"},{"location":"api/plugin_system/#methods_3","title":"Methods","text":""},{"location":"api/plugin_system/#name-str_2","title":"name() -&gt; str","text":"<p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/plugin_system/#threat_types-any_2","title":"threat_types() -&gt; Any","text":"<p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#can_handlethreat_info-any-bool_2","title":"can_handle(threat_info: Any) -&gt; bool","text":"<p>Parameters:</p> <ul> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>bool</li> </ul>"},{"location":"api/plugin_system/#get_priority-int_1","title":"get_priority() -&gt; int","text":"<p>Returns:</p> <ul> <li>int</li> </ul>"},{"location":"api/plugin_system/#mitigatethreat_info-any-any_2","title":"mitigate(threat_info: Any) -&gt; Any","text":"<p>Parameters:</p> <ul> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#functions","title":"Functions","text":""},{"location":"api/plugin_system/#create_plugin_templateplugin_name-str-output_file-str","title":"create_plugin_template(plugin_name: str, output_file: str)","text":"<p>Create a template for a custom plugin.</p> <p>Parameters:</p> <ul> <li>plugin_name (str)</li> <li>output_file (str)</li> </ul>"},{"location":"api/plugin_system/#nameself-str","title":"name(self) -&gt; str","text":"<p>Return the name of this plugin.</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/plugin_system/#threat_typesself-any","title":"threat_types(self) -&gt; Any","text":"<p>Return list of threat types this plugin can handle.</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#can_handleself-threat_info-any-bool","title":"can_handle(self, threat_info: Any) -&gt; bool","text":"<p>Return config.get('mitigation.strategies.ddos.enabled') if this plugin can handle the given threat.</p> <p>Parameters:</p> <ul> <li>self</li> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>bool</li> </ul>"},{"location":"api/plugin_system/#mitigateself-threat_info-any-any","title":"mitigate(self, threat_info: Any) -&gt; Any","text":"<p>Apply mitigation for the threat.</p> <p>Args:     threat_info: Dictionary containing threat details</p> <p>Returns:     Dictionary with mitigation results</p> <p>Parameters:</p> <ul> <li>self</li> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#get_priorityself-int","title":"get_priority(self) -&gt; int","text":"<p>Return priority level (lower number = higher priority).</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>int</li> </ul>"},{"location":"api/plugin_system/#get_available_pluginsself-any","title":"get_available_plugins(self) -&gt; Any","text":"<p>Return list of available plugin names.</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#execute_mitigationself-threat_info-any-any","title":"execute_mitigation(self, threat_info: Any) -&gt; Any","text":"<p>Execute appropriate mitigation plugins for a threat.</p> <p>Args:     threat_info: Dictionary containing threat details</p> <p>Returns:     List of mitigation results from all applicable plugins</p> <p>Parameters:</p> <ul> <li>self</li> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#nameself-str_1","title":"name(self) -&gt; str","text":"<p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/plugin_system/#threat_typesself-any_1","title":"threat_types(self) -&gt; Any","text":"<p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#can_handleself-threat_info-any-bool_1","title":"can_handle(self, threat_info: Any) -&gt; bool","text":"<p>Parameters:</p> <ul> <li>self</li> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>bool</li> </ul>"},{"location":"api/plugin_system/#mitigateself-threat_info-any-any_1","title":"mitigate(self, threat_info: Any) -&gt; Any","text":"<p>Parameters:</p> <ul> <li>self</li> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#nameself-str_2","title":"name(self) -&gt; str","text":"<p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>str</li> </ul>"},{"location":"api/plugin_system/#threat_typesself-any_2","title":"threat_types(self) -&gt; Any","text":"<p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/plugin_system/#can_handleself-threat_info-any-bool_2","title":"can_handle(self, threat_info: Any) -&gt; bool","text":"<p>Parameters:</p> <ul> <li>self</li> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>bool</li> </ul>"},{"location":"api/plugin_system/#get_priorityself-int_1","title":"get_priority(self) -&gt; int","text":"<p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>int</li> </ul>"},{"location":"api/plugin_system/#mitigateself-threat_info-any-any_2","title":"mitigate(self, threat_info: Any) -&gt; Any","text":"<p>Parameters:</p> <ul> <li>self</li> <li>threat_info (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/security_coordinator/","title":"security_coordinator","text":"<p>Security Coordinator Module Coordinates security operations and manages the overall security workflow.</p>"},{"location":"api/security_coordinator/#classes","title":"Classes","text":""},{"location":"api/security_coordinator/#securitycoordinator","title":"SecurityCoordinator","text":"<p>Coordinates security operations and manages workflow.</p>"},{"location":"api/security_coordinator/#methods","title":"Methods","text":""},{"location":"api/security_coordinator/#start_monitoring-none","title":"start_monitoring() -&gt; None","text":"<p>Start the security monitoring process.</p> <p>Returns:</p> <ul> <li>None</li> </ul>"},{"location":"api/security_coordinator/#stop_monitoring-none","title":"stop_monitoring() -&gt; None","text":"<p>Stop the security monitoring process.</p> <p>Returns:</p> <ul> <li>None</li> </ul>"},{"location":"api/security_coordinator/#get_monitoring_status-any","title":"get_monitoring_status() -&gt; Any","text":"<p>Get current monitoring status and statistics.</p> <p>Returns:     dict: Monitoring status information</p> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/security_coordinator/#force_check-any","title":"force_check() -&gt; Any","text":"<p>Force an immediate monitoring check.</p> <p>Returns:     dict: Check results</p> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/security_coordinator/#functions","title":"Functions","text":""},{"location":"api/security_coordinator/#start_monitoringself-none","title":"start_monitoring(self) -&gt; None","text":"<p>Start the security monitoring process.</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>None</li> </ul>"},{"location":"api/security_coordinator/#stop_monitoringself-none","title":"stop_monitoring(self) -&gt; None","text":"<p>Stop the security monitoring process.</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>None</li> </ul>"},{"location":"api/security_coordinator/#get_monitoring_statusself-any","title":"get_monitoring_status(self) -&gt; Any","text":"<p>Get current monitoring status and statistics.</p> <p>Returns:     dict: Monitoring status information</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/security_coordinator/#force_checkself-any","title":"force_check(self) -&gt; Any","text":"<p>Force an immediate monitoring check.</p> <p>Returns:     dict: Check results</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/security_integrations/","title":"security_integrations","text":"<p>Security Framework Integrations for NGINX Security Monitor Integrates with popular security frameworks and tools like fail2ban, OSSEC, Suricata, etc.</p>"},{"location":"api/security_integrations/#classes","title":"Classes","text":""},{"location":"api/security_integrations/#fail2banintegration","title":"Fail2BanIntegration","text":"<p>Integration with fail2ban for jail monitoring and IP blocking.</p>"},{"location":"api/security_integrations/#methods","title":"Methods","text":""},{"location":"api/security_integrations/#is_available","title":"is_available()","text":"<p>Check if fail2ban is available and running.</p>"},{"location":"api/security_integrations/#get_jail_status","title":"get_jail_status()","text":"<p>Get status of all fail2ban jails.</p>"},{"location":"api/security_integrations/#get_individual_jail_statusjail_name","title":"get_individual_jail_status(jail_name)","text":"<p>Get detailed status for a specific jail.</p> <p>Parameters:</p> <ul> <li>jail_name</li> </ul>"},{"location":"api/security_integrations/#ban_ipjail_name-ip_address","title":"ban_ip(jail_name, ip_address)","text":"<p>Ban an IP address in a specific jail.</p> <p>Parameters:</p> <ul> <li>jail_name</li> <li>ip_address</li> </ul>"},{"location":"api/security_integrations/#unban_ipjail_name-ip_address","title":"unban_ip(jail_name, ip_address)","text":"<p>Unban an IP address from a specific jail.</p> <p>Parameters:</p> <ul> <li>jail_name</li> <li>ip_address</li> </ul>"},{"location":"api/security_integrations/#monitor_jail_files","title":"monitor_jail_files()","text":"<p>Monitor fail2ban jail configuration files for changes.</p>"},{"location":"api/security_integrations/#ossecintegration","title":"OSSECIntegration","text":"<p>Integration with OSSEC HIDS (Host Intrusion Detection System).</p>"},{"location":"api/security_integrations/#methods_1","title":"Methods","text":""},{"location":"api/security_integrations/#is_available_1","title":"is_available()","text":"<p>Check if OSSEC is available and running.</p>"},{"location":"api/security_integrations/#get_recent_alertshours-none","title":"get_recent_alerts(hours = None)","text":"<p>Get OSSEC alerts from the last specified hours.</p> <p>Parameters:</p> <ul> <li>hours = None</li> </ul>"},{"location":"api/security_integrations/#add_custom_rulerule_content","title":"add_custom_rule(rule_content)","text":"<p>Add a custom OSSEC rule for NGINX monitoring.</p> <p>Parameters:</p> <ul> <li>rule_content</li> </ul>"},{"location":"api/security_integrations/#suricataintegration","title":"SuricataIntegration","text":"<p>Integration with Suricata IDS/IPS.</p>"},{"location":"api/security_integrations/#methods_2","title":"Methods","text":""},{"location":"api/security_integrations/#is_available_2","title":"is_available()","text":"<p>Check if Suricata is available and running.</p>"},{"location":"api/security_integrations/#get_recent_alertshours-1","title":"get_recent_alerts(hours = 1)","text":"<p>Get Suricata alerts from EVE JSON log.</p> <p>Parameters:</p> <ul> <li>hours = 1</li> </ul>"},{"location":"api/security_integrations/#add_custom_rulerule_content_1","title":"add_custom_rule(rule_content)","text":"<p>Add custom Suricata rule for NGINX monitoring.</p> <p>Parameters:</p> <ul> <li>rule_content</li> </ul>"},{"location":"api/security_integrations/#wazuhintegration","title":"WazuhIntegration","text":"<p>Integration with Wazuh SIEM.</p>"},{"location":"api/security_integrations/#methods_3","title":"Methods","text":""},{"location":"api/security_integrations/#is_available_3","title":"is_available()","text":"<p>Check if Wazuh agent is available and running.</p>"},{"location":"api/security_integrations/#send_custom_eventevent_data","title":"send_custom_event(event_data)","text":"<p>Send custom event to Wazuh manager.</p> <p>Parameters:</p> <ul> <li>event_data</li> </ul>"},{"location":"api/security_integrations/#modsecurityintegration","title":"ModSecurityIntegration","text":"<p>Integration with ModSecurity WAF.</p>"},{"location":"api/security_integrations/#methods_4","title":"Methods","text":""},{"location":"api/security_integrations/#is_available_4","title":"is_available()","text":"<p>Check if ModSecurity is available.</p>"},{"location":"api/security_integrations/#get_recent_blockshours-1","title":"get_recent_blocks(hours = 1)","text":"<p>Get recent ModSecurity blocks.</p> <p>Parameters:</p> <ul> <li>hours = 1</li> </ul>"},{"location":"api/security_integrations/#securityintegrationmanager","title":"SecurityIntegrationManager","text":"<p>Main manager for all security framework integrations.</p>"},{"location":"api/security_integrations/#methods_5","title":"Methods","text":""},{"location":"api/security_integrations/#get_integration_status","title":"get_integration_status()","text":"<p>Get status of all security integrations.</p>"},{"location":"api/security_integrations/#handle_threat_with_integrationsthreat_info","title":"handle_threat_with_integrations(threat_info)","text":"<p>Handle a detected threat using available security integrations.</p> <p>Parameters:</p> <ul> <li>threat_info</li> </ul>"},{"location":"api/security_integrations/#get_aggregated_threatshours-1","title":"get_aggregated_threats(hours = 1)","text":"<p>Get aggregated threat information from all available sources.</p> <p>Parameters:</p> <ul> <li>hours = 1</li> </ul>"},{"location":"api/security_integrations/#functions","title":"Functions","text":""},{"location":"api/security_integrations/#is_availableself","title":"is_available(self)","text":"<p>Check if fail2ban is available and running.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/security_integrations/#get_jail_statusself","title":"get_jail_status(self)","text":"<p>Get status of all fail2ban jails.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/security_integrations/#get_individual_jail_statusself-jail_name","title":"get_individual_jail_status(self, jail_name)","text":"<p>Get detailed status for a specific jail.</p> <p>Parameters:</p> <ul> <li>self</li> <li>jail_name</li> </ul>"},{"location":"api/security_integrations/#ban_ipself-jail_name-ip_address","title":"ban_ip(self, jail_name, ip_address)","text":"<p>Ban an IP address in a specific jail.</p> <p>Parameters:</p> <ul> <li>self</li> <li>jail_name</li> <li>ip_address</li> </ul>"},{"location":"api/security_integrations/#unban_ipself-jail_name-ip_address","title":"unban_ip(self, jail_name, ip_address)","text":"<p>Unban an IP address from a specific jail.</p> <p>Parameters:</p> <ul> <li>self</li> <li>jail_name</li> <li>ip_address</li> </ul>"},{"location":"api/security_integrations/#monitor_jail_filesself","title":"monitor_jail_files(self)","text":"<p>Monitor fail2ban jail configuration files for changes.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/security_integrations/#is_availableself_1","title":"is_available(self)","text":"<p>Check if OSSEC is available and running.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/security_integrations/#get_recent_alertsself-hours-none","title":"get_recent_alerts(self, hours = None)","text":"<p>Get OSSEC alerts from the last specified hours.</p> <p>Parameters:</p> <ul> <li>self</li> <li>hours = None</li> </ul>"},{"location":"api/security_integrations/#add_custom_ruleself-rule_content","title":"add_custom_rule(self, rule_content)","text":"<p>Add a custom OSSEC rule for NGINX monitoring.</p> <p>Parameters:</p> <ul> <li>self</li> <li>rule_content</li> </ul>"},{"location":"api/security_integrations/#is_availableself_2","title":"is_available(self)","text":"<p>Check if Suricata is available and running.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/security_integrations/#get_recent_alertsself-hours-1","title":"get_recent_alerts(self, hours = 1)","text":"<p>Get Suricata alerts from EVE JSON log.</p> <p>Parameters:</p> <ul> <li>self</li> <li>hours = 1</li> </ul>"},{"location":"api/security_integrations/#add_custom_ruleself-rule_content_1","title":"add_custom_rule(self, rule_content)","text":"<p>Add custom Suricata rule for NGINX monitoring.</p> <p>Parameters:</p> <ul> <li>self</li> <li>rule_content</li> </ul>"},{"location":"api/security_integrations/#is_availableself_3","title":"is_available(self)","text":"<p>Check if Wazuh agent is available and running.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/security_integrations/#send_custom_eventself-event_data","title":"send_custom_event(self, event_data)","text":"<p>Send custom event to Wazuh manager.</p> <p>Parameters:</p> <ul> <li>self</li> <li>event_data</li> </ul>"},{"location":"api/security_integrations/#is_availableself_4","title":"is_available(self)","text":"<p>Check if ModSecurity is available.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/security_integrations/#get_recent_blocksself-hours-1","title":"get_recent_blocks(self, hours = 1)","text":"<p>Get recent ModSecurity blocks.</p> <p>Parameters:</p> <ul> <li>self</li> <li>hours = 1</li> </ul>"},{"location":"api/security_integrations/#get_integration_statusself","title":"get_integration_status(self)","text":"<p>Get status of all security integrations.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/security_integrations/#handle_threat_with_integrationsself-threat_info","title":"handle_threat_with_integrations(self, threat_info)","text":"<p>Handle a detected threat using available security integrations.</p> <p>Parameters:</p> <ul> <li>self</li> <li>threat_info</li> </ul>"},{"location":"api/security_integrations/#get_aggregated_threatsself-hours-1","title":"get_aggregated_threats(self, hours = 1)","text":"<p>Get aggregated threat information from all available sources.</p> <p>Parameters:</p> <ul> <li>self</li> <li>hours = 1</li> </ul>"},{"location":"api/service_protection/","title":"service_protection","text":"<p>Self-Protection Module for NGINX Security Monitor Implements security measures to protect the monitoring service itself from attacks.</p>"},{"location":"api/service_protection/#classes","title":"Classes","text":""},{"location":"api/service_protection/#serviceprotection","title":"ServiceProtection","text":"<p>Protects the security monitor service from attacks.</p>"},{"location":"api/service_protection/#methods","title":"Methods","text":""},{"location":"api/service_protection/#check_rate_limitingoperation_type-limit_per_minute-none","title":"check_rate_limiting(operation_type, limit_per_minute = None)","text":"<p>Check if operation is within rate limits.</p> <p>Parameters:</p> <ul> <li>operation_type</li> <li>limit_per_minute = None</li> </ul>"},{"location":"api/service_protection/#check_file_integrity","title":"check_file_integrity()","text":"<p>Check if monitored files have been tampered with.</p>"},{"location":"api/service_protection/#check_process_integrity","title":"check_process_integrity()","text":"<p>Check if the service process has been compromised.</p>"},{"location":"api/service_protection/#check_resource_abuse","title":"check_resource_abuse()","text":"<p>Check for resource exhaustion attacks.</p>"},{"location":"api/service_protection/#check_log_tamperinglog_file_path","title":"check_log_tampering(log_file_path)","text":"<p>Check for log file tampering attempts.</p> <p>Parameters:</p> <ul> <li>log_file_path</li> </ul>"},{"location":"api/service_protection/#check_service_availability","title":"check_service_availability()","text":"<p>Check if the service is functioning correctly.</p>"},{"location":"api/service_protection/#perform_self_check","title":"perform_self_check()","text":"<p>Perform comprehensive self-protection check.</p>"},{"location":"api/service_protection/#emergency_shutdownreason","title":"emergency_shutdown(reason)","text":"<p>Emergency shutdown if service is compromised.</p> <p>Parameters:</p> <ul> <li>reason</li> </ul>"},{"location":"api/service_protection/#functions","title":"Functions","text":""},{"location":"api/service_protection/#check_rate_limitingself-operation_type-limit_per_minute-none","title":"check_rate_limiting(self, operation_type, limit_per_minute = None)","text":"<p>Check if operation is within rate limits.</p> <p>Parameters:</p> <ul> <li>self</li> <li>operation_type</li> <li>limit_per_minute = None</li> </ul>"},{"location":"api/service_protection/#check_file_integrityself","title":"check_file_integrity(self)","text":"<p>Check if monitored files have been tampered with.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/service_protection/#check_process_integrityself","title":"check_process_integrity(self)","text":"<p>Check if the service process has been compromised.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/service_protection/#check_resource_abuseself","title":"check_resource_abuse(self)","text":"<p>Check for resource exhaustion attacks.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/service_protection/#check_log_tamperingself-log_file_path","title":"check_log_tampering(self, log_file_path)","text":"<p>Check for log file tampering attempts.</p> <p>Parameters:</p> <ul> <li>self</li> <li>log_file_path</li> </ul>"},{"location":"api/service_protection/#check_service_availabilityself","title":"check_service_availability(self)","text":"<p>Check if the service is functioning correctly.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/service_protection/#perform_self_checkself","title":"perform_self_check(self)","text":"<p>Perform comprehensive self-protection check.</p> <p>Parameters:</p> <ul> <li>self</li> </ul>"},{"location":"api/service_protection/#emergency_shutdownself-reason","title":"emergency_shutdown(self, reason)","text":"<p>Emergency shutdown if service is compromised.</p> <p>Parameters:</p> <ul> <li>self</li> <li>reason</li> </ul>"},{"location":"api/threat_processor/","title":"threat_processor","text":"<p>Threat Processor Module Handles threat analysis and processing for the NGINX Security Monitor.</p>"},{"location":"api/threat_processor/#classes","title":"Classes","text":""},{"location":"api/threat_processor/#threatprocessor","title":"ThreatProcessor","text":"<p>Handles threat detection and processing functionality.</p>"},{"location":"api/threat_processor/#methods","title":"Methods","text":""},{"location":"api/threat_processor/#process_log_entrieslog_entries-any-any","title":"process_log_entries(log_entries: Any) -&gt; Any","text":"<p>Process log entries for threats and return detected threats.</p> <p>Args:     log_entries: List of parsed log entries</p> <p>Returns:     list: List of detected threats</p> <p>Parameters:</p> <ul> <li>log_entries (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/threat_processor/#get_threat_statistics-any","title":"get_threat_statistics() -&gt; Any","text":"<p>Get statistics about processed threats.</p> <p>Returns:     dict: Threat statistics</p> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/threat_processor/#functions","title":"Functions","text":""},{"location":"api/threat_processor/#process_log_entriesself-log_entries-any-any","title":"process_log_entries(self, log_entries: Any) -&gt; Any","text":"<p>Process log entries for threats and return detected threats.</p> <p>Args:     log_entries: List of parsed log entries</p> <p>Returns:     list: List of detected threats</p> <p>Parameters:</p> <ul> <li>self</li> <li>log_entries (Any)</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/threat_processor/#get_threat_statisticsself-any","title":"get_threat_statistics(self) -&gt; Any","text":"<p>Get statistics about processed threats.</p> <p>Returns:     dict: Threat statistics</p> <p>Parameters:</p> <ul> <li>self</li> </ul> <p>Returns:</p> <ul> <li>Any</li> </ul>"},{"location":"api/versioning/","title":"API Versioning Guide","text":"<p>This guide covers the API versioning strategy, compatibility management, and migration procedures for Nginx Security Monitor APIs.</p>"},{"location":"api/versioning/#versioning-strategy","title":"Versioning Strategy","text":"<p>Nginx Security Monitor follows Semantic Versioning (SemVer) for API compatibility:</p> <ul> <li>Major Version (X.0.0): Breaking changes, incompatible API changes</li> <li>Minor Version (x.Y.0): New features, backwards-compatible additions</li> <li>Patch Version (x.y.Z): Bug fixes, backwards-compatible fixes</li> </ul>"},{"location":"api/versioning/#api-version-format","title":"API Version Format","text":"<pre><code>v{MAJOR}.{MINOR}[.{PATCH}]\n</code></pre> <p>Examples: - <code>v1.0</code> - Major version 1, minor version 0 - <code>v1.2</code> - Major version 1, minor version 2 - <code>v2.0</code> - Major version 2 (breaking changes from v1.x)</p>"},{"location":"api/versioning/#api-endpoints-and-versioning","title":"API Endpoints and Versioning","text":""},{"location":"api/versioning/#url-versioning-primary-method","title":"URL Versioning (Primary Method)","text":"<pre><code># Current stable API\nGET /api/v1/health\nGET /api/v1/config\nGET /api/v1/patterns\nGET /api/v1/alerts\nGET /api/v1/integrations\n\n# Beta/experimental API\nGET /api/v2/health\nGET /api/v2/config\nGET /api/v2/patterns\n</code></pre>"},{"location":"api/versioning/#header-versioning-alternative","title":"Header Versioning (Alternative)","text":"<pre><code>GET /api/health\nAccept: application/json; version=1.0\nAPI-Version: 1.0\n</code></pre>"},{"location":"api/versioning/#content-negotiation","title":"Content Negotiation","text":"<pre><code># Request specific version\nGET /api/v1/config\nAccept: application/vnd.nsm.v1+json\n\n# Latest version\nGET /api/config\nAccept: application/json\n</code></pre>"},{"location":"api/versioning/#compatibility-matrix","title":"Compatibility Matrix","text":""},{"location":"api/versioning/#current-api-versions","title":"Current API Versions","text":"API Version Status Released End of Life Breaking Changes v1.0 Stable 2024-01-15 2026-01-15 None v1.1 Stable 2024-06-01 2026-06-01 None v1.2 Stable 2024-12-01 2026-12-01 None v2.0 Beta 2025-03-01 TBD Multiple"},{"location":"api/versioning/#version-support-policy","title":"Version Support Policy","text":"<ul> <li>Stable versions: Supported for 2 years from release</li> <li>Beta versions: No support guarantees, may change without notice</li> <li>Deprecated versions: 6-month deprecation notice before removal</li> <li>Security updates: Applied to all supported versions</li> </ul>"},{"location":"api/versioning/#api-evolution-examples","title":"API Evolution Examples","text":""},{"location":"api/versioning/#adding-new-fields-minor-version","title":"Adding New Fields (Minor Version)","text":"<p>v1.0 Response: <pre><code>{\n  \"id\": \"pattern_001\",\n  \"name\": \"SQL Injection\",\n  \"pattern\": \"(?i)(union.*select|select.*from)\",\n  \"severity\": \"high\"\n}\n</code></pre></p> <p>v1.1 Response (Backwards Compatible): <pre><code>{\n  \"id\": \"pattern_001\",\n  \"name\": \"SQL Injection\",\n  \"pattern\": \"(?i)(union.*select|select.*from)\",\n  \"severity\": \"high\",\n  \"category\": \"injection\",\n  \"confidence\": 0.95,\n  \"last_updated\": \"2024-06-01T10:00:00Z\"\n}\n</code></pre></p>"},{"location":"api/versioning/#breaking-changes-major-version","title":"Breaking Changes (Major Version)","text":"<p>v1.x Request: <pre><code>{\n  \"pattern\": \"(?i)(union.*select)\",\n  \"severity\": \"high\",\n  \"enabled\": true\n}\n</code></pre></p> <p>v2.0 Request (Breaking Changes): <pre><code>{\n  \"detection_rule\": {\n    \"regex_pattern\": \"(?i)(union.*select)\",\n    \"risk_level\": \"critical\",\n    \"active\": true,\n    \"metadata\": {\n      \"category\": \"sql_injection\",\n      \"confidence_threshold\": 0.8\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/versioning/#automated-version-checking","title":"Automated Version Checking","text":""},{"location":"api/versioning/#version-compatibility-script","title":"Version Compatibility Script","text":"<pre><code>#!/usr/bin/env python3\n# scripts/check_api_compatibility.py\n\nimport requests\nimport json\nimport sys\nfrom typing import Dict, List, Tuple\nfrom packaging import version\n\nclass APICompatibilityChecker:\n    def __init__(self, base_url: str):\n        self.base_url = base_url.rstrip('/')\n        self.supported_versions = ['v1.0', 'v1.1', 'v1.2', 'v2.0']\n\n    def get_available_versions(self) -&gt; List[str]:\n        \"\"\"Get list of available API versions\"\"\"\n        try:\n            response = requests.get(f\"{self.base_url}/api/versions\")\n            if response.status_code == 200:\n                return response.json().get('versions', [])\n            else:\n                # Fallback: probe each version\n                available = []\n                for ver in self.supported_versions:\n                    if self.probe_version(ver):\n                        available.append(ver)\n                return available\n        except Exception as e:\n            print(f\"Error checking versions: {e}\")\n            return []\n\n    def probe_version(self, version: str) -&gt; bool:\n        \"\"\"Check if a specific version is available\"\"\"\n        try:\n            response = requests.get(f\"{self.base_url}/api/{version}/health\")\n            return response.status_code == 200\n        except:\n            return False\n\n    def check_endpoint_compatibility(self, endpoint: str, \n                                   from_version: str, \n                                   to_version: str) -&gt; Dict:\n        \"\"\"Check compatibility between two versions for an endpoint\"\"\"\n\n        results = {\n            'compatible': True,\n            'breaking_changes': [],\n            'new_features': [],\n            'deprecated_fields': []\n        }\n\n        # Get schema for both versions\n        from_schema = self.get_endpoint_schema(endpoint, from_version)\n        to_schema = self.get_endpoint_schema(endpoint, to_version)\n\n        if not from_schema or not to_schema:\n            results['compatible'] = False\n            results['breaking_changes'].append(\"Unable to retrieve schema\")\n            return results\n\n        # Check for breaking changes\n        results.update(self.compare_schemas(from_schema, to_schema))\n\n        return results\n\n    def get_endpoint_schema(self, endpoint: str, version: str) -&gt; Dict:\n        \"\"\"Get OpenAPI schema for endpoint\"\"\"\n        try:\n            response = requests.get(f\"{self.base_url}/api/{version}/schema/{endpoint}\")\n            if response.status_code == 200:\n                return response.json()\n        except:\n            pass\n\n        # Fallback: make actual request and infer schema\n        try:\n            response = requests.get(f\"{self.base_url}/api/{version}/{endpoint}\")\n            if response.status_code == 200:\n                return self.infer_schema(response.json())\n        except:\n            pass\n\n        return {}\n\n    def compare_schemas(self, from_schema: Dict, to_schema: Dict) -&gt; Dict:\n        \"\"\"Compare two schemas for compatibility\"\"\"\n        results = {\n            'compatible': True,\n            'breaking_changes': [],\n            'new_features': [],\n            'deprecated_fields': []\n        }\n\n        # Check for removed fields (breaking change)\n        from_fields = set(self.extract_fields(from_schema))\n        to_fields = set(self.extract_fields(to_schema))\n\n        removed_fields = from_fields - to_fields\n        added_fields = to_fields - from_fields\n\n        if removed_fields:\n            results['compatible'] = False\n            results['breaking_changes'].extend([\n                f\"Removed field: {field}\" for field in removed_fields\n            ])\n\n        if added_fields:\n            results['new_features'].extend([\n                f\"Added field: {field}\" for field in added_fields\n            ])\n\n        return results\n\n    def extract_fields(self, schema: Dict, prefix: str = \"\") -&gt; List[str]:\n        \"\"\"Extract field names from schema\"\"\"\n        fields = []\n        if isinstance(schema, dict):\n            for key, value in schema.items():\n                field_name = f\"{prefix}.{key}\" if prefix else key\n                fields.append(field_name)\n                if isinstance(value, dict):\n                    fields.extend(self.extract_fields(value, field_name))\n        return fields\n\n    def infer_schema(self, data: Dict) -&gt; Dict:\n        \"\"\"Infer schema from response data\"\"\"\n        if isinstance(data, dict):\n            return {key: type(value).__name__ for key, value in data.items()}\n        return {}\n\ndef main():\n    if len(sys.argv) != 4:\n        print(\"Usage: python check_api_compatibility.py &lt;base_url&gt; &lt;from_version&gt; &lt;to_version&gt;\")\n        sys.exit(1)\n\n    base_url, from_version, to_version = sys.argv[1:4]\n\n    checker = APICompatibilityChecker(base_url)\n\n    # Check main endpoints\n    endpoints = ['health', 'config', 'patterns', 'alerts', 'integrations']\n\n    print(f\"Checking compatibility: {from_version} \u2192 {to_version}\")\n    print(\"=\" * 50)\n\n    overall_compatible = True\n\n    for endpoint in endpoints:\n        print(f\"\\nEndpoint: /{endpoint}\")\n        result = checker.check_endpoint_compatibility(endpoint, from_version, to_version)\n\n        if result['compatible']:\n            print(\"  \u2705 Compatible\")\n        else:\n            print(\"  \u274c Breaking changes detected\")\n            overall_compatible = False\n\n        if result['breaking_changes']:\n            print(\"  Breaking changes:\")\n            for change in result['breaking_changes']:\n                print(f\"    - {change}\")\n\n        if result['new_features']:\n            print(\"  New features:\")\n            for feature in result['new_features']:\n                print(f\"    + {feature}\")\n\n    print(\"\\n\" + \"=\" * 50)\n    if overall_compatible:\n        print(\"\u2705 Migration should be safe\")\n    else:\n        print(\"\u26a0\ufe0f  Migration requires code changes\")\n\n    sys.exit(0 if overall_compatible else 1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"api/versioning/#automated-api-diff-generation","title":"Automated API Diff Generation","text":"<pre><code>#!/usr/bin/env python3\n# scripts/generate_api_diff.py\n\nimport requests\nimport json\nimport sys\nfrom deepdiff import DeepDiff\nfrom typing import Dict, Any\nimport yaml\n\nclass APIDiffGenerator:\n    def __init__(self, base_url: str):\n        self.base_url = base_url.rstrip('/')\n\n    def get_api_spec(self, version: str) -&gt; Dict[str, Any]:\n        \"\"\"Get OpenAPI specification for a version\"\"\"\n        try:\n            response = requests.get(f\"{self.base_url}/api/{version}/openapi.json\")\n            if response.status_code == 200:\n                return response.json()\n        except Exception as e:\n            print(f\"Error fetching API spec for {version}: {e}\")\n        return {}\n\n    def generate_diff(self, from_version: str, to_version: str) -&gt; Dict[str, Any]:\n        \"\"\"Generate detailed API diff between versions\"\"\"\n\n        from_spec = self.get_api_spec(from_version)\n        to_spec = self.get_api_spec(to_version)\n\n        if not from_spec or not to_spec:\n            return {\"error\": \"Unable to fetch API specifications\"}\n\n        # Use DeepDiff to compare specifications\n        diff = DeepDiff(from_spec, to_spec, ignore_order=True)\n\n        # Process and categorize changes\n        processed_diff = self.process_diff(diff)\n\n        return {\n            \"from_version\": from_version,\n            \"to_version\": to_version,\n            \"summary\": self.generate_summary(processed_diff),\n            \"changes\": processed_diff,\n            \"migration_guide\": self.generate_migration_guide(processed_diff)\n        }\n\n    def process_diff(self, diff: DeepDiff) -&gt; Dict[str, Any]:\n        \"\"\"Process DeepDiff output into categorized changes\"\"\"\n\n        changes = {\n            \"breaking_changes\": [],\n            \"new_features\": [],\n            \"deprecations\": [],\n            \"bug_fixes\": [],\n            \"improvements\": []\n        }\n\n        # Process different types of changes\n        if 'dictionary_item_removed' in diff:\n            for item in diff['dictionary_item_removed']:\n                if '/paths/' in str(item):\n                    changes['breaking_changes'].append({\n                        \"type\": \"endpoint_removed\",\n                        \"description\": f\"Endpoint removed: {item}\",\n                        \"impact\": \"high\"\n                    })\n                elif '/definitions/' in str(item) or '/components/' in str(item):\n                    changes['breaking_changes'].append({\n                        \"type\": \"schema_removed\",\n                        \"description\": f\"Schema removed: {item}\",\n                        \"impact\": \"high\"\n                    })\n\n        if 'dictionary_item_added' in diff:\n            for item in diff['dictionary_item_added']:\n                if '/paths/' in str(item):\n                    changes['new_features'].append({\n                        \"type\": \"endpoint_added\",\n                        \"description\": f\"New endpoint: {item}\",\n                        \"impact\": \"none\"\n                    })\n                elif '/definitions/' in str(item) or '/components/' in str(item):\n                    changes['new_features'].append({\n                        \"type\": \"schema_added\",\n                        \"description\": f\"New schema: {item}\",\n                        \"impact\": \"none\"\n                    })\n\n        if 'values_changed' in diff:\n            for item, change in diff['values_changed'].items():\n                changes['improvements'].append({\n                    \"type\": \"value_changed\",\n                    \"description\": f\"Changed: {item}\",\n                    \"from\": change['old_value'],\n                    \"to\": change['new_value'],\n                    \"impact\": \"low\"\n                })\n\n        return changes\n\n    def generate_summary(self, changes: Dict[str, Any]) -&gt; Dict[str, int]:\n        \"\"\"Generate summary statistics\"\"\"\n        return {\n            \"breaking_changes\": len(changes['breaking_changes']),\n            \"new_features\": len(changes['new_features']),\n            \"deprecations\": len(changes['deprecations']),\n            \"total_changes\": sum(len(changes[key]) for key in changes)\n        }\n\n    def generate_migration_guide(self, changes: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Generate migration guide based on changes\"\"\"\n\n        guide = {\n            \"required_actions\": [],\n            \"recommended_actions\": [],\n            \"code_examples\": []\n        }\n\n        # Required actions for breaking changes\n        for change in changes['breaking_changes']:\n            if change['type'] == 'endpoint_removed':\n                guide['required_actions'].append({\n                    \"action\": \"Update API calls\",\n                    \"description\": f\"Replace calls to removed endpoint: {change['description']}\",\n                    \"urgency\": \"high\"\n                })\n            elif change['type'] == 'schema_removed':\n                guide['required_actions'].append({\n                    \"action\": \"Update data models\",\n                    \"description\": f\"Update models for removed schema: {change['description']}\",\n                    \"urgency\": \"high\"\n                })\n\n        # Recommended actions for new features\n        for change in changes['new_features']:\n            if change['type'] == 'endpoint_added':\n                guide['recommended_actions'].append({\n                    \"action\": \"Consider using new endpoint\",\n                    \"description\": f\"New endpoint available: {change['description']}\",\n                    \"benefit\": \"Enhanced functionality\"\n                })\n\n        return guide\n\n    def export_diff(self, diff_data: Dict[str, Any], format: str = 'json') -&gt; str:\n        \"\"\"Export diff in specified format\"\"\"\n        if format == 'json':\n            return json.dumps(diff_data, indent=2)\n        elif format == 'yaml':\n            return yaml.dump(diff_data, default_flow_style=False)\n        elif format == 'markdown':\n            return self.format_as_markdown(diff_data)\n        else:\n            raise ValueError(f\"Unsupported format: {format}\")\n\n    def format_as_markdown(self, diff_data: Dict[str, Any]) -&gt; str:\n        \"\"\"Format diff as Markdown\"\"\"\n        md = f\"# API Diff: {diff_data['from_version']} \u2192 {diff_data['to_version']}\\n\\n\"\n\n        # Summary\n        summary = diff_data['summary']\n        md += \"## Summary\\n\\n\"\n        md += f\"- **Breaking Changes**: {summary['breaking_changes']}\\n\"\n        md += f\"- **New Features**: {summary['new_features']}\\n\"\n        md += f\"- **Total Changes**: {summary['total_changes']}\\n\\n\"\n\n        # Breaking changes\n        if diff_data['changes']['breaking_changes']:\n            md += \"## \u26a0\ufe0f Breaking Changes\\n\\n\"\n            for change in diff_data['changes']['breaking_changes']:\n                md += f\"- **{change['type']}**: {change['description']}\\n\"\n\n        # New features\n        if diff_data['changes']['new_features']:\n            md += \"## \u2728 New Features\\n\\n\"\n            for change in diff_data['changes']['new_features']:\n                md += f\"- **{change['type']}**: {change['description']}\\n\"\n\n        # Migration guide\n        if diff_data['migration_guide']['required_actions']:\n            md += \"## \ud83d\udccb Migration Checklist\\n\\n\"\n            for action in diff_data['migration_guide']['required_actions']:\n                md += f\"- [ ] **{action['action']}**: {action['description']}\\n\"\n\n        return md\n\ndef main():\n    if len(sys.argv) &lt; 4:\n        print(\"Usage: python generate_api_diff.py &lt;base_url&gt; &lt;from_version&gt; &lt;to_version&gt; [format]\")\n        sys.exit(1)\n\n    base_url = sys.argv[1]\n    from_version = sys.argv[2]\n    to_version = sys.argv[3]\n    format_type = sys.argv[4] if len(sys.argv) &gt; 4 else 'json'\n\n    generator = APIDiffGenerator(base_url)\n    diff_data = generator.generate_diff(from_version, to_version)\n\n    if 'error' in diff_data:\n        print(f\"Error: {diff_data['error']}\")\n        sys.exit(1)\n\n    output = generator.export_diff(diff_data, format_type)\n    print(output)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"api/versioning/#migration-guides","title":"Migration Guides","text":""},{"location":"api/versioning/#v10-to-v11-migration","title":"v1.0 to v1.1 Migration","text":"<pre><code># Migration Guide: v1.0 \u2192 v1.1\n\n## Overview\nVersion 1.1 introduces new fields and enhanced functionality while maintaining full backwards compatibility.\n\n## New Features\n- **Pattern Categories**: Patterns now include a `category` field\n- **Confidence Scores**: Detection confidence ratings added\n- **Enhanced Metadata**: Additional fields for better pattern management\n\n## Code Examples\n\n### Before (v1.0)\n```python\nimport requests\n\n# Get patterns\nresponse = requests.get('http://localhost:8080/api/v1/patterns')\npatterns = response.json()\n\nfor pattern in patterns:\n    print(f\"Pattern: {pattern['name']}\")\n    print(f\"Severity: {pattern['severity']}\")\n</code></pre>"},{"location":"api/versioning/#after-v11-enhanced","title":"After (v1.1) - Enhanced","text":"<pre><code>import requests\n\n# Get patterns with new fields\nresponse = requests.get('http://localhost:8080/api/v1/patterns')\npatterns = response.json()\n\nfor pattern in patterns:\n    print(f\"Pattern: {pattern['name']}\")\n    print(f\"Severity: {pattern['severity']}\")\n\n    # New fields (optional, for enhanced functionality)\n    if 'category' in pattern:\n        print(f\"Category: {pattern['category']}\")\n    if 'confidence' in pattern:\n        print(f\"Confidence: {pattern['confidence']}\")\n</code></pre>"},{"location":"api/versioning/#breaking-changes","title":"Breaking Changes","text":"<p>\u274c None - This is a backwards-compatible release.</p>"},{"location":"api/versioning/#action-required","title":"Action Required","text":"<p>\u2705 None - Existing code will continue to work without modifications.</p>"},{"location":"api/versioning/#recommended-updates","title":"Recommended Updates","text":"<ul> <li>Update your models to include new fields</li> <li>Consider using confidence scores for filtering</li> <li>Use categories for pattern organization <pre><code>### v1.x to v2.0 Migration (Breaking Changes)\n\n```markdown\n# Migration Guide: v1.x \u2192 v2.0\n\n## Overview\nVersion 2.0 introduces significant architectural improvements but includes breaking changes.\n\n## Breaking Changes\n\n### 1. Request/Response Structure Changes\n\n**Old (v1.x):**\n```json\n{\n  \"pattern\": \"(?i)(union.*select)\",\n  \"severity\": \"high\",\n  \"enabled\": true\n}\n</code></pre></li> </ul> <p>New (v2.0): <pre><code>{\n  \"detection_rule\": {\n    \"regex_pattern\": \"(?i)(union.*select)\",\n    \"risk_level\": \"critical\",\n    \"active\": true,\n    \"metadata\": {\n      \"category\": \"sql_injection\",\n      \"confidence_threshold\": 0.8\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/versioning/#2-endpoint-changes","title":"2. Endpoint Changes","text":"v1.x Endpoint v2.0 Endpoint Status <code>/api/v1/patterns</code> <code>/api/v2/detection-rules</code> Renamed <code>/api/v1/alerts</code> <code>/api/v2/notifications</code> Renamed <code>/api/v1/config/reload</code> <code>/api/v2/system/reload</code> Moved"},{"location":"api/versioning/#3-field-mapping","title":"3. Field Mapping","text":"v1.x Field v2.0 Field Notes <code>pattern</code> <code>detection_rule.regex_pattern</code> Nested structure <code>severity</code> <code>detection_rule.risk_level</code> Values changed <code>enabled</code> <code>detection_rule.active</code> Renamed"},{"location":"api/versioning/#migration-steps","title":"Migration Steps","text":""},{"location":"api/versioning/#step-1-update-client-code","title":"Step 1: Update Client Code","text":"<pre><code># Before (v1.x)\nclass PatternClient:\n    def create_pattern(self, pattern_data):\n        response = requests.post('/api/v1/patterns', json={\n            'pattern': pattern_data['regex'],\n            'severity': pattern_data['severity'],\n            'enabled': True\n        })\n        return response.json()\n\n# After (v2.0)\nclass DetectionRuleClient:\n    def create_detection_rule(self, rule_data):\n        response = requests.post('/api/v2/detection-rules', json={\n            'detection_rule': {\n                'regex_pattern': rule_data['regex'],\n                'risk_level': self.map_severity(rule_data['severity']),\n                'active': True,\n                'metadata': {\n                    'category': rule_data.get('category', 'other'),\n                    'confidence_threshold': rule_data.get('confidence', 0.8)\n                }\n            }\n        })\n        return response.json()\n\n    def map_severity(self, old_severity):\n        mapping = {\n            'low': 'info',\n            'medium': 'warning', \n            'high': 'critical'\n        }\n        return mapping.get(old_severity, 'warning')\n</code></pre>"},{"location":"api/versioning/#step-2-update-configuration","title":"Step 2: Update Configuration","text":"<pre><code># Before (v1.x config)\npatterns:\n  sql_injection:\n    pattern: \"(?i)(union.*select)\"\n    severity: \"high\"\n    enabled: true\n\n# After (v2.0 config)\ndetection_rules:\n  sql_injection:\n    regex_pattern: \"(?i)(union.*select)\"\n    risk_level: \"critical\"\n    active: true\n    metadata:\n      category: \"injection\"\n      confidence_threshold: 0.9\n</code></pre>"},{"location":"api/versioning/#step-3-test-migration","title":"Step 3: Test Migration","text":"<pre><code># Run migration validation\npython scripts/validate_migration.py --from v1.2 --to v2.0\n\n# Test with sample data\npython scripts/test_api_migration.py --config test-migration.yaml\n</code></pre>"},{"location":"api/versioning/#timeline","title":"Timeline","text":"<ul> <li>v1.x Support: Continues until 2026-01-15</li> <li>Migration Window: 6 months overlap (both versions supported)</li> <li>v2.0 Stable: Available now</li> </ul>"},{"location":"api/versioning/#support","title":"Support","text":"<ul> <li>Migration scripts: <code>scripts/migrate_v1_to_v2.py</code></li> <li>Validation tools: <code>scripts/validate_migration.py</code></li> <li>Documentation: v2.0 API Reference <pre><code>## Version Lifecycle Management\n\n### Deprecation Process\n\n```python\n#!/usr/bin/env python3\n# scripts/deprecation_manager.py\n\nimport json\nimport datetime\nfrom typing import Dict, List\nfrom pathlib import Path\n\nclass DeprecationManager:\n    def __init__(self, config_file: str = \"deprecation_config.json\"):\n        self.config_file = Path(config_file)\n        self.load_config()\n\n    def load_config(self):\n        \"\"\"Load deprecation configuration\"\"\"\n        if self.config_file.exists():\n            with open(self.config_file) as f:\n                self.config = json.load(f)\n        else:\n            self.config = {\n                \"deprecated_versions\": {},\n                \"deprecation_policy\": {\n                    \"warning_period_months\": 6,\n                    \"support_period_years\": 2\n                }\n            }\n\n    def deprecate_version(self, version: str, reason: str, replacement: str = None):\n        \"\"\"Mark a version as deprecated\"\"\"\n        deprecation_date = datetime.datetime.now().isoformat()\n        end_of_life = (datetime.datetime.now() + \n                      datetime.timedelta(days=365 * self.config[\"deprecation_policy\"][\"support_period_years\"])).isoformat()\n\n        self.config[\"deprecated_versions\"][version] = {\n            \"deprecation_date\": deprecation_date,\n            \"end_of_life\": end_of_life,\n            \"reason\": reason,\n            \"replacement\": replacement,\n            \"status\": \"deprecated\"\n        }\n\n        self.save_config()\n        print(f\"Version {version} marked as deprecated\")\n\n    def check_deprecation_status(self, version: str) -&gt; Dict:\n        \"\"\"Check if a version is deprecated\"\"\"\n        if version in self.config[\"deprecated_versions\"]:\n            dep_info = self.config[\"deprecated_versions\"][version]\n\n            # Check if end of life has passed\n            eol_date = datetime.datetime.fromisoformat(dep_info[\"end_of_life\"])\n            if datetime.datetime.now() &gt; eol_date:\n                dep_info[\"status\"] = \"unsupported\"\n\n            return dep_info\n\n        return {\"status\": \"supported\"}\n\n    def generate_deprecation_notice(self) -&gt; str:\n        \"\"\"Generate deprecation notice for documentation\"\"\"\n        notice = \"# API Version Deprecation Notice\\n\\n\"\n\n        for version, info in self.config[\"deprecated_versions\"].items():\n            if info[\"status\"] == \"deprecated\":\n                notice += f\"## Version {version}\\n\\n\"\n                notice += f\"**Status**: {info['status'].title()}\\n\"\n                notice += f\"**Deprecated**: {info['deprecation_date'][:10]}\\n\"\n                notice += f\"**End of Life**: {info['end_of_life'][:10]}\\n\"\n                notice += f\"**Reason**: {info['reason']}\\n\"\n\n                if info.get('replacement'):\n                    notice += f\"**Replacement**: {info['replacement']}\\n\"\n\n                notice += \"\\n\"\n\n        return notice\n\n    def save_config(self):\n        \"\"\"Save configuration to file\"\"\"\n        with open(self.config_file, 'w') as f:\n            json.dump(self.config, f, indent=2)\n\n# Example usage\nif __name__ == \"__main__\":\n    manager = DeprecationManager()\n\n    # Example: Deprecate v1.0\n    manager.deprecate_version(\n        version=\"v1.0\",\n        reason=\"Security vulnerabilities in authentication mechanism\",\n        replacement=\"v1.2\"\n    )\n\n    print(manager.generate_deprecation_notice())\n</code></pre></li> </ul>"},{"location":"api/versioning/#automated-testing-for-api-versions","title":"Automated Testing for API Versions","text":"<pre><code>#!/usr/bin/env python3\n# tests/test_api_versions.py\n\nimport pytest\nimport requests\nfrom typing import List, Dict\nimport json\n\nclass TestAPIVersions:\n    \"\"\"Test suite for API version compatibility\"\"\"\n\n    base_url = \"http://localhost:8080\"\n    supported_versions = [\"v1.0\", \"v1.1\", \"v1.2\", \"v2.0\"]\n\n    @pytest.mark.parametrize(\"version\", supported_versions)\n    def test_version_health_endpoint(self, version):\n        \"\"\"Test health endpoint for all supported versions\"\"\"\n        response = requests.get(f\"{self.base_url}/api/{version}/health\")\n        assert response.status_code == 200\n        assert response.json()[\"status\"] == \"healthy\"\n\n    @pytest.mark.parametrize(\"version\", [\"v1.0\", \"v1.1\", \"v1.2\"])\n    def test_v1_x_compatibility(self, version):\n        \"\"\"Test backwards compatibility within v1.x\"\"\"\n        # Test pattern endpoint structure\n        response = requests.get(f\"{self.base_url}/api/{version}/patterns\")\n        assert response.status_code == 200\n\n        patterns = response.json()\n        for pattern in patterns:\n            # Required fields in all v1.x versions\n            assert \"id\" in pattern\n            assert \"name\" in pattern\n            assert \"pattern\" in pattern\n            assert \"severity\" in pattern\n\n    def test_v2_breaking_changes(self):\n        \"\"\"Test that v2.0 has expected breaking changes\"\"\"\n        # v2.0 should use different endpoint names\n        v1_response = requests.get(f\"{self.base_url}/api/v1/patterns\")\n        v2_response = requests.get(f\"{self.base_url}/api/v2/patterns\")\n\n        # v1 should work, v2 should not (endpoint renamed)\n        assert v1_response.status_code == 200\n        assert v2_response.status_code == 404\n\n        # v2 should work with new endpoint name\n        v2_new_response = requests.get(f\"{self.base_url}/api/v2/detection-rules\")\n        assert v2_new_response.status_code == 200\n\n    def test_version_negotiation(self):\n        \"\"\"Test content negotiation for API versions\"\"\"\n        headers = {\n            \"Accept\": \"application/vnd.nsm.v1+json\"\n        }\n        response = requests.get(f\"{self.base_url}/api/patterns\", headers=headers)\n        assert response.status_code == 200\n        assert response.headers.get(\"API-Version\") == \"1.2\"  # Latest v1.x\n\n    @pytest.mark.parametrize(\"from_version,to_version\", [\n        (\"v1.0\", \"v1.1\"),\n        (\"v1.1\", \"v1.2\"),\n    ])\n    def test_migration_compatibility(self, from_version, to_version):\n        \"\"\"Test that migrations don't break existing functionality\"\"\"\n        # Get data from older version\n        old_response = requests.get(f\"{self.base_url}/api/{from_version}/patterns\")\n        old_data = old_response.json()\n\n        # Get data from newer version\n        new_response = requests.get(f\"{self.base_url}/api/{to_version}/patterns\")\n        new_data = new_response.json()\n\n        # Check that all old fields are still present\n        for old_pattern in old_data:\n            matching_new = next(\n                (p for p in new_data if p[\"id\"] == old_pattern[\"id\"]), \n                None\n            )\n            assert matching_new is not None\n\n            # All old fields should be present\n            for field in old_pattern:\n                assert field in matching_new\n                # Values should be compatible (allowing for type coercion)\n                assert str(old_pattern[field]) == str(matching_new[field])\n</code></pre> <p>Related Documentation: - API Reference - Getting Started Guide - Release Process - Configuration Guide</p>"},{"location":"api/alerts/email_alert/","title":"alerts.email_alert","text":""},{"location":"api/alerts/email_alert/#functions","title":"Functions","text":""},{"location":"api/alerts/email_alert/#load_email_configconfig_path-none","title":"load_email_config(config_path = None)","text":"<p>Load email configuration from YAML file.</p> <p>Parameters:</p> <ul> <li>config_path = None</li> </ul>"},{"location":"api/alerts/email_alert/#send_email_alertalert_details-config_path-none","title":"send_email_alert(alert_details, config_path = None)","text":"<p>Send email alert for security threats.</p> <p>Args:     alert_details (dict): Dictionary containing alert information     config_path (str): Path to configuration file</p> <p>Parameters:</p> <ul> <li>alert_details</li> <li>config_path = None</li> </ul>"},{"location":"api/alerts/email_alert/#create_text_alert_bodyalert_details","title":"create_text_alert_body(alert_details)","text":"<p>Create plain text alert body.</p> <p>Parameters:</p> <ul> <li>alert_details</li> </ul>"},{"location":"api/alerts/email_alert/#create_html_alert_bodyalert_details","title":"create_html_alert_body(alert_details)","text":"<p>Create HTML alert body.</p> <p>Parameters:</p> <ul> <li>alert_details</li> </ul>"},{"location":"api/alerts/sms_alert/","title":"alerts.sms_alert","text":""},{"location":"api/alerts/sms_alert/#functions","title":"Functions","text":""},{"location":"api/alerts/sms_alert/#send_sms_alertalert_details","title":"send_sms_alert(alert_details)","text":"<p>Sends an SMS alert with the provided details.</p> <p>Parameters: alert_details (dict): A dictionary containing alert information such as                       'message', 'recipient', etc.</p> <p>Returns: bool: True if the SMS was sent successfully, False otherwise.</p> <p>Parameters:</p> <ul> <li>alert_details</li> </ul>"},{"location":"api/alerts/sms_alert/#send_via_twilioaccount_sid-auth_token-from_number-to_number-message","title":"send_via_twilio(account_sid, auth_token, from_number, to_number, message)","text":"<p>Send SMS via Twilio API</p> <p>Parameters:</p> <ul> <li>account_sid</li> <li>auth_token</li> <li>from_number</li> <li>to_number</li> <li>message</li> </ul>"},{"location":"api/alerts/sms_alert/#send_via_aws_snsaccess_key-secret_key-phone_number-message","title":"send_via_aws_sns(access_key, secret_key, phone_number, message)","text":"<p>Send SMS via AWS SNS</p> <p>Parameters:</p> <ul> <li>access_key</li> <li>secret_key</li> <li>phone_number</li> <li>message</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/","title":"Architecture Decision Records (ADRs)","text":"<p>This directory contains Architecture Decision Records (ADRs) for Nginx Security Monitor. ADRs document important architectural decisions, their context, and rationale.</p>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#what-are-adrs","title":"What are ADRs?","text":"<p>Architecture Decision Records are documents that capture important architectural decisions made during the development of a system, along with their context and consequences.</p>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#adr-format","title":"ADR Format","text":"<p>We use the following template for all ADRs:</p> <pre><code># ADR-NNNN: Title\n\n## Status\n[Proposed | Accepted | Rejected | Superseded | Deprecated]\n\n## Context\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n\n## Implementation\nSpecific steps or considerations for implementing this decision.\n\n## Related Decisions\nReferences to related ADRs or external documents.\n</code></pre>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#adr-index","title":"ADR Index","text":"Number Title Status Date 0001 Use Python for Implementation Accepted 2024-01-15 0002 Pattern-Based Detection Engine Accepted 2024-01-20 0003 Plugin Architecture for Extensibility Accepted 2024-02-01 0004 Encryption at Rest for Sensitive Data Accepted 2024-02-15 0005 API Versioning Strategy Accepted 2024-03-01 0006 Asynchronous Log Processing Pipeline Accepted 2024-03-15 0007 Standardized Integration Framework Accepted 2024-04-01 0008 Hierarchical Configuration Management Accepted 2024-04-15 0009 Monitoring and Observability Strategy Accepted 2024-05-01 0010 Security Model and Threat Surface Accepted 2024-05-15"},{"location":"architecture/decisions/0001-use-python-for-implementation/#creating-new-adrs","title":"Creating New ADRs","text":""},{"location":"architecture/decisions/0001-use-python-for-implementation/#1-use-the-adr-template","title":"1. Use the ADR Template","text":"<pre><code># Create new ADR\ncp docs/architecture/decisions/template.md docs/architecture/decisions/NNNN-your-decision-title.md\n\n# Edit the new ADR\nvim docs/architecture/decisions/NNNN-your-decision-title.md\n</code></pre>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#2-adr-numbering","title":"2. ADR Numbering","text":"<ul> <li>Use sequential numbering: 0001, 0002, 0003, etc.</li> <li>Check the index above for the next available number</li> <li>Pad with zeros to maintain consistent formatting</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#3-adr-lifecycle","title":"3. ADR Lifecycle","text":"<ol> <li>Proposed: Initial draft, under discussion</li> <li>Accepted: Decision has been made and approved</li> <li>Rejected: Decision was considered but not adopted</li> <li>Superseded: Replaced by a newer decision</li> <li>Deprecated: No longer relevant or recommended</li> </ol>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#4-review-process","title":"4. Review Process","text":"<ol> <li>Create ADR in \"Proposed\" status</li> <li>Share with team for review and discussion</li> <li>Update based on feedback</li> <li>Change status to \"Accepted\" when approved</li> <li>Update the index table</li> </ol>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#tools-and-automation","title":"Tools and Automation","text":""},{"location":"architecture/decisions/0001-use-python-for-implementation/#adr-generator-script","title":"ADR Generator Script","text":"<pre><code>#!/usr/bin/env python3\n# scripts/create_adr.py\n\nimport os\nimport sys\nimport datetime\nfrom pathlib import Path\n\nclass ADRGenerator:\n    def __init__(self, adr_dir=\"docs/architecture/decisions\"):\n        self.adr_dir = Path(adr_dir)\n        self.template_file = self.adr_dir / \"template.md\"\n\n    def get_next_number(self):\n        \"\"\"Get the next ADR number\"\"\"\n        existing_adrs = list(self.adr_dir.glob(\"[0-9][0-9][0-9][0-9]-*.md\"))\n        if not existing_adrs:\n            return 1\n\n        numbers = []\n        for adr_file in existing_adrs:\n            try:\n                number = int(adr_file.name[:4])\n                numbers.append(number)\n            except ValueError:\n                continue\n\n        return max(numbers) + 1 if numbers else 1\n\n    def create_adr(self, title, context=\"\", decision=\"\", author=\"\"):\n        \"\"\"Create a new ADR\"\"\"\n        number = self.get_next_number()\n        filename = f\"{number:04d}-{self.slugify(title)}.md\"\n        filepath = self.adr_dir / filename\n\n        template = self.load_template()\n        content = template.format(\n            number=f\"{number:04d}\",\n            title=title,\n            date=datetime.date.today().isoformat(),\n            author=author or \"Unknown\",\n            context=context or \"&lt;!-- Describe the context and problem statement --&gt;\",\n            decision=decision or \"&lt;!-- Describe the decision and rationale --&gt;\"\n        )\n\n        with open(filepath, 'w') as f:\n            f.write(content)\n\n        print(f\"Created ADR: {filepath}\")\n        print(f\"Please edit the file and update the index in README.md\")\n\n        return filepath\n\n    def load_template(self):\n        \"\"\"Load ADR template\"\"\"\n        if self.template_file.exists():\n            return self.template_file.read_text()\n        else:\n            return self.get_default_template()\n\n    def get_default_template(self):\n        \"\"\"Get default ADR template\"\"\"\n        return \"\"\"# ADR-{number}: {title}\n\n## Status\nProposed\n\n## Date\n{date}\n\n## Author\n{author}\n\n## Context\n{context}\n\n## Decision\n{decision}\n\n## Consequences\n&lt;!-- What becomes easier or more difficult to do? --&gt;\n\n## Implementation\n&lt;!-- Steps for implementing this decision --&gt;\n\n## Related Decisions\n&lt;!-- References to related ADRs --&gt;\n\n## Notes\n&lt;!-- Additional notes or considerations --&gt;\n\"\"\"\n\n    def slugify(self, title):\n        \"\"\"Convert title to filename-friendly slug\"\"\"\n        slug = title.lower()\n        slug = ''.join(c if c.isalnum() or c in '-_' else '-' for c in slug)\n        slug = '-'.join(filter(None, slug.split('-')))  # Remove empty parts\n        return slug[:50]  # Limit length\n\ndef main():\n    if len(sys.argv) &lt; 2:\n        print(\"Usage: python create_adr.py 'ADR Title' [context] [decision] [author]\")\n        sys.exit(1)\n\n    title = sys.argv[1]\n    context = sys.argv[2] if len(sys.argv) &gt; 2 else \"\"\n    decision = sys.argv[3] if len(sys.argv) &gt; 3 else \"\"\n    author = sys.argv[4] if len(sys.argv) &gt; 4 else \"\"\n\n    generator = ADRGenerator()\n    filepath = generator.create_adr(title, context, decision, author)\n\n    # Open in editor if available\n    if os.environ.get('EDITOR'):\n        os.system(f\"{os.environ['EDITOR']} {filepath}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#adr-status-tracker","title":"ADR Status Tracker","text":"<pre><code>#!/usr/bin/env python3\n# scripts/adr_status.py\n\nimport re\nimport json\nfrom pathlib import Path\nfrom typing import Dict, List\nimport datetime\n\nclass ADRTracker:\n    def __init__(self, adr_dir=\"docs/architecture/decisions\"):\n        self.adr_dir = Path(adr_dir)\n\n    def scan_adrs(self) -&gt; List[Dict]:\n        \"\"\"Scan all ADRs and extract metadata\"\"\"\n        adrs = []\n\n        for adr_file in sorted(self.adr_dir.glob(\"[0-9][0-9][0-9][0-9]-*.md\")):\n            metadata = self.extract_metadata(adr_file)\n            if metadata:\n                adrs.append(metadata)\n\n        return adrs\n\n    def extract_metadata(self, adr_file: Path) -&gt; Dict:\n        \"\"\"Extract metadata from ADR file\"\"\"\n        try:\n            content = adr_file.read_text()\n\n            # Extract title\n            title_match = re.search(r'^# ADR-(\\d+): (.+)$', content, re.MULTILINE)\n            if not title_match:\n                return None\n\n            number = title_match.group(1)\n            title = title_match.group(2)\n\n            # Extract status\n            status_match = re.search(r'^## Status\\s*\\n(.+)$', content, re.MULTILINE)\n            status = status_match.group(1).strip() if status_match else \"Unknown\"\n\n            # Extract date\n            date_match = re.search(r'^## Date\\s*\\n(.+)$', content, re.MULTILINE)\n            date = date_match.group(1).strip() if date_match else \"Unknown\"\n\n            # Extract author\n            author_match = re.search(r'^## Author\\s*\\n(.+)$', content, re.MULTILINE)\n            author = author_match.group(1).strip() if author_match else \"Unknown\"\n\n            return {\n                \"number\": number,\n                \"title\": title,\n                \"status\": status,\n                \"date\": date,\n                \"author\": author,\n                \"filename\": adr_file.name,\n                \"filepath\": str(adr_file)\n            }\n\n        except Exception as e:\n            print(f\"Error processing {adr_file}: {e}\")\n            return None\n\n    def generate_index(self) -&gt; str:\n        \"\"\"Generate ADR index table\"\"\"\n        adrs = self.scan_adrs()\n\n        index = \"| Number | Title | Status | Date |\\n\"\n        index += \"|--------|-------|--------|----- |\\n\"\n\n        for adr in adrs:\n            link = f\"[{adr['number']}]({adr['filename']})\"\n            index += f\"| {link} | {adr['title']} | {adr['status']} | {adr['date']} |\\n\"\n\n        return index\n\n    def generate_status_report(self) -&gt; Dict:\n        \"\"\"Generate status report\"\"\"\n        adrs = self.scan_adrs()\n\n        status_counts = {}\n        for adr in adrs:\n            status = adr['status']\n            status_counts[status] = status_counts.get(status, 0) + 1\n\n        recent_adrs = [adr for adr in adrs \n                      if self.is_recent(adr['date'], days=90)]\n\n        return {\n            \"total_adrs\": len(adrs),\n            \"status_counts\": status_counts,\n            \"recent_adrs\": len(recent_adrs),\n            \"last_updated\": datetime.datetime.now().isoformat()\n        }\n\n    def is_recent(self, date_str: str, days: int = 90) -&gt; bool:\n        \"\"\"Check if date is within the last N days\"\"\"\n        try:\n            adr_date = datetime.datetime.fromisoformat(date_str)\n            cutoff = datetime.datetime.now() - datetime.timedelta(days=days)\n            return adr_date &gt;= cutoff\n        except:\n            return False\n\n    def validate_adrs(self) -&gt; List[Dict]:\n        \"\"\"Validate ADR format and content\"\"\"\n        adrs = self.scan_adrs()\n        issues = []\n\n        for adr in adrs:\n            adr_issues = []\n\n            # Check required sections\n            content = Path(adr['filepath']).read_text()\n            required_sections = [\"Status\", \"Context\", \"Decision\", \"Consequences\"]\n\n            for section in required_sections:\n                if f\"## {section}\" not in content:\n                    adr_issues.append(f\"Missing required section: {section}\")\n\n            # Check status validity\n            valid_statuses = [\"Proposed\", \"Accepted\", \"Rejected\", \"Superseded\", \"Deprecated\"]\n            if adr['status'] not in valid_statuses:\n                adr_issues.append(f\"Invalid status: {adr['status']}\")\n\n            # Check for placeholder content\n            if \"&lt;!-- \" in content:\n                adr_issues.append(\"Contains placeholder content\")\n\n            if adr_issues:\n                issues.append({\n                    \"adr\": adr['filename'],\n                    \"issues\": adr_issues\n                })\n\n        return issues\n\ndef main():\n    import sys\n\n    tracker = ADRTracker()\n\n    if len(sys.argv) &gt; 1:\n        command = sys.argv[1]\n\n        if command == \"index\":\n            print(tracker.generate_index())\n        elif command == \"status\":\n            report = tracker.generate_status_report()\n            print(json.dumps(report, indent=2))\n        elif command == \"validate\":\n            issues = tracker.validate_adrs()\n            if issues:\n                print(\"ADR Validation Issues:\")\n                for issue in issues:\n                    print(f\"\\n{issue['adr']}:\")\n                    for problem in issue['issues']:\n                        print(f\"  - {problem}\")\n            else:\n                print(\"All ADRs are valid!\")\n        else:\n            print(\"Usage: python adr_status.py [index|status|validate]\")\n    else:\n        # Default: show status\n        report = tracker.generate_status_report()\n        print(f\"Total ADRs: {report['total_adrs']}\")\n        print(\"Status breakdown:\")\n        for status, count in report['status_counts'].items():\n            print(f\"  {status}: {count}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#example-adrs","title":"Example ADRs","text":"<p>Let me create a few sample ADRs to demonstrate the format:</p> <p> # ADR-0001: Use Python for Implementation"},{"location":"architecture/decisions/0001-use-python-for-implementation/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#date","title":"Date","text":"<p>2024-01-15</p>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#author","title":"Author","text":"<p>Development Team</p>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#context","title":"Context","text":"<p>We need to choose a programming language for implementing the Nginx Security Monitor. The system needs to:</p> <ul> <li>Process log files efficiently</li> <li>Handle regex pattern matching at scale</li> <li>Integrate with various security tools</li> <li>Be maintainable by a diverse team</li> <li>Support rapid prototyping and iteration</li> </ul> <p>Key considerations: - Performance: Need to process thousands of log entries per second - Ecosystem: Rich libraries for security, networking, and data processing - Team expertise: Current team has strong Python experience - Integration: Many security tools provide Python APIs - Deployment: Must be easily deployable in various environments</p> <p>Alternative options considered: 1. Go: High performance, good concurrency, smaller ecosystem 2. Rust: Excellent performance, memory safety, steeper learning curve 3. Java: Mature ecosystem, verbose syntax, higher resource usage 4. Python: Rich ecosystem, readable code, potentially slower performance</p>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#decision","title":"Decision","text":"<p>We will use Python 3.8+ as the primary implementation language for Nginx Security Monitor.</p> <p>Rationale: - Rich Security Ecosystem: Extensive libraries for security analysis (regex, cryptography, network protocols) - Integration Capabilities: Native support for major security tools (fail2ban, OSSEC, Suricata) - Team Productivity: Faster development cycles, readable code, extensive documentation - Performance Adequacy: With proper optimization (compiled regex, asyncio), Python can meet our performance requirements - Deployment Flexibility: Easy containerization, package management, and cross-platform support</p>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/0001-use-python-for-implementation/#positive","title":"Positive","text":"<ul> <li>Faster Development: Rapid prototyping and iteration</li> <li>Rich Libraries: Access to mature security and data processing libraries</li> <li>Team Efficiency: Leverages existing team expertise</li> <li>Integration Ease: Simplified integration with security tools</li> <li>Maintainability: Clear, readable code that's easy to maintain</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#negative","title":"Negative","text":"<ul> <li>Performance Overhead: May require optimization for high-throughput scenarios</li> <li>Dependency Management: Need careful management of dependencies</li> <li>Runtime Requirements: Requires Python runtime in deployment environments</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#neutral","title":"Neutral","text":"<ul> <li>Learning Curve: Minimal for current team</li> <li>Ecosystem Maturity: Well-established but evolving</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/0001-use-python-for-implementation/#development-environment","title":"Development Environment","text":"<ul> <li>Python 3.8+ (for typing support and performance improvements)</li> <li>Virtual environments for dependency isolation</li> <li>pip-tools for reproducible dependency management</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Use compiled regex patterns for threat detection</li> <li>Implement asyncio for concurrent log processing</li> <li>Profile and optimize critical paths</li> <li>Consider Cython for performance-critical components</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#code-quality","title":"Code Quality","text":"<ul> <li>Use type hints throughout the codebase</li> <li>Implement comprehensive test suite</li> <li>Use linting tools (flake8, black, mypy)</li> <li>Follow PEP 8 style guidelines</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#deployment","title":"Deployment","text":"<ul> <li>Container-first deployment strategy</li> <li>Minimal base images for security</li> <li>Multi-stage builds for smaller production images</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-0002: Pattern-Based Detection Engine</li> <li>ADR-0006: Asynchronous Log Processing Pipeline</li> </ul>"},{"location":"architecture/decisions/0001-use-python-for-implementation/#notes","title":"Notes","text":"<ul> <li>Performance will be continuously monitored and optimized</li> <li>Consider alternative languages for specific performance-critical components if needed</li> <li>Regular evaluation of the decision as requirements evolve</li> </ul>"},{"location":"architecture/decisions/0002-pattern-based-detection-engine/","title":"0002 Pattern Based Detection Engine","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0002-pattern-based-detection-engine/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0002-pattern-based-detection-engine/#todo","title":"TODO","text":"<ul> <li> Add content for 0002 Pattern Based Detection Engine</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0002-pattern-based-detection-engine/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/0003-plugin-architecture/","title":"0003 Plugin Architecture","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0003-plugin-architecture/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0003-plugin-architecture/#todo","title":"TODO","text":"<ul> <li> Add content for 0003 Plugin Architecture</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0003-plugin-architecture/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/0004-encryption-at-rest/","title":"0004 Encryption At Rest","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0004-encryption-at-rest/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0004-encryption-at-rest/#todo","title":"TODO","text":"<ul> <li> Add content for 0004 Encryption At Rest</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0004-encryption-at-rest/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/0005-api-versioning-strategy/","title":"0005 Api Versioning Strategy","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0005-api-versioning-strategy/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0005-api-versioning-strategy/#todo","title":"TODO","text":"<ul> <li> Add content for 0005 Api Versioning Strategy</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0005-api-versioning-strategy/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/","title":"ADR-0006: Asynchronous Log Processing Pipeline","text":""},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#date","title":"Date","text":"<p>2024-03-15</p>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#author","title":"Author","text":"<p>Architecture Team</p>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#context","title":"Context","text":"<p>The Nginx Security Monitor needs to process large volumes of log data in real-time. Current requirements:</p> <ul> <li>Throughput: Process 10,000+ log entries per second</li> <li>Latency: Detect threats within 100ms of log entry</li> <li>Reliability: Handle temporary spikes without losing data</li> <li>Scalability: Support horizontal scaling across multiple nodes</li> </ul> <p>Current challenges with synchronous processing: - Blocking I/O: File reading and network calls block the main thread - Sequential Processing: One slow operation delays all subsequent processing - Resource Utilization: Poor CPU and I/O utilization - Scalability Limits: Difficult to scale beyond single-threaded performance</p> <p>Processing pipeline requirements: 1. Log Ingestion: Read from multiple log sources simultaneously 2. Pattern Matching: Apply multiple detection rules concurrently 3. Integration Calls: Send alerts to external systems without blocking 4. Data Persistence: Store results and metrics asynchronously</p>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#decision","title":"Decision","text":"<p>We will implement an asynchronous, event-driven log processing pipeline using Python's asyncio framework.</p> <p>Architecture components: 1. Async Log Reader: Concurrent file monitoring using aiofiles 2. Processing Queue: asyncio.Queue for buffering log entries 3. Worker Pool: Configurable number of async workers for pattern matching 4. Integration Manager: Async HTTP client for external API calls 5. Event Bus: Internal pub/sub for component communication</p>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#pipeline-flow","title":"Pipeline Flow","text":"<pre><code>Log Sources \u2192 Log Reader \u2192 Processing Queue \u2192 Workers \u2192 Integration Manager\n     \u2193              \u2193            \u2193           \u2193            \u2193\nFile Monitor \u2192 Line Parser \u2192 Entry Buffer \u2192 Pattern Match \u2192 Alert Dispatch\n</code></pre>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#positive","title":"Positive","text":"<ul> <li>High Throughput: Concurrent processing of multiple log entries</li> <li>Low Latency: Non-blocking operations maintain responsiveness</li> <li>Resource Efficiency: Better CPU and I/O utilization</li> <li>Scalability: Easy to add more workers or distribute across nodes</li> <li>Reliability: Queue-based buffering handles traffic spikes</li> </ul>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#negative","title":"Negative","text":"<ul> <li>Complexity: Async programming model is more complex than synchronous</li> <li>Debugging: Async stack traces and debugging can be challenging</li> <li>Memory Usage: Queues and coroutines consume more memory</li> <li>Learning Curve: Team needs to understand async/await patterns</li> </ul>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#neutral","title":"Neutral","text":"<ul> <li>Testing: Requires async-aware testing frameworks</li> <li>Dependencies: Adds dependencies on asyncio-compatible libraries</li> </ul>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#core-components","title":"Core Components","text":"<pre><code># Async log processor\nimport asyncio\nimport aiofiles\nfrom asyncio import Queue\nfrom typing import AsyncGenerator\n\nclass AsyncLogProcessor:\n    def __init__(self, workers: int = 4, queue_size: int = 1000):\n        self.workers = workers\n        self.queue = Queue(maxsize=queue_size)\n        self.running = False\n\n    async def start(self):\n        \"\"\"Start the processing pipeline\"\"\"\n        self.running = True\n\n        # Start components\n        tasks = [\n            self.log_reader(),\n            *[self.worker(i) for i in range(self.workers)],\n            self.integration_manager()\n        ]\n\n        await asyncio.gather(*tasks)\n\n    async def log_reader(self):\n        \"\"\"Read logs asynchronously\"\"\"\n        async for log_entry in self.read_log_files():\n            await self.queue.put(log_entry)\n\n    async def worker(self, worker_id: int):\n        \"\"\"Process log entries\"\"\"\n        while self.running:\n            try:\n                entry = await asyncio.wait_for(\n                    self.queue.get(), timeout=1.0\n                )\n                await self.process_entry(entry)\n                self.queue.task_done()\n            except asyncio.TimeoutError:\n                continue\n\n    async def process_entry(self, entry: dict):\n        \"\"\"Apply pattern matching\"\"\"\n        # Concurrent pattern matching\n        tasks = [\n            self.apply_pattern(entry, pattern) \n            for pattern in self.patterns\n        ]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # Handle results\n        for result in results:\n            if isinstance(result, ThreatDetection):\n                await self.alert_queue.put(result)\n</code></pre>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#configuration","title":"Configuration","text":"<pre><code># Async processing configuration\nprocessing:\n  async:\n    enabled: true\n    workers: 8  # Number of async workers\n    queue_size: 10000  # Max queued entries\n    batch_size: 100  # Process entries in batches\n\n  timeouts:\n    queue_timeout: 1.0  # Queue get timeout (seconds)\n    processing_timeout: 5.0  # Max processing time per entry\n    integration_timeout: 10.0  # Integration call timeout\n\n  performance:\n    max_concurrent_files: 50  # Max concurrent file handles\n    read_buffer_size: 65536  # File read buffer size\n    pattern_cache_size: 1000  # Compiled pattern cache\n</code></pre>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#monitoring-and-metrics","title":"Monitoring and Metrics","text":"<pre><code># Async performance metrics\nimport time\nfrom collections import defaultdict\n\nclass AsyncMetrics:\n    def __init__(self):\n        self.counters = defaultdict(int)\n        self.timers = defaultdict(list)\n        self.queue_sizes = defaultdict(list)\n\n    async def monitor_queues(self):\n        \"\"\"Monitor queue sizes\"\"\"\n        while True:\n            self.queue_sizes['processing'].append(\n                self.processing_queue.qsize()\n            )\n            self.queue_sizes['alerts'].append(\n                self.alert_queue.qsize()\n            )\n            await asyncio.sleep(1)\n\n    def record_processing_time(self, duration: float):\n        \"\"\"Record entry processing time\"\"\"\n        self.timers['processing'].append(duration)\n\n    def get_performance_stats(self):\n        \"\"\"Get performance statistics\"\"\"\n        return {\n            'queue_sizes': {\n                name: {\n                    'current': sizes[-1] if sizes else 0,\n                    'avg': sum(sizes) / len(sizes) if sizes else 0,\n                    'max': max(sizes) if sizes else 0\n                }\n                for name, sizes in self.queue_sizes.items()\n            },\n            'processing_times': {\n                'avg': sum(self.timers['processing']) / len(self.timers['processing']) if self.timers['processing'] else 0,\n                'p95': self.percentile(self.timers['processing'], 95) if self.timers['processing'] else 0\n            }\n        }\n</code></pre>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#testing-strategy","title":"Testing Strategy","text":"<pre><code># Async testing with pytest-asyncio\nimport pytest\nimport asyncio\nfrom unittest.mock import AsyncMock\n\n@pytest.mark.asyncio\nasync def test_async_log_processing():\n    \"\"\"Test async log processing pipeline\"\"\"\n    processor = AsyncLogProcessor(workers=2, queue_size=10)\n\n    # Mock log entries\n    test_entries = [\n        {\"timestamp\": \"2024-03-15T10:00:00Z\", \"message\": \"test entry 1\"},\n        {\"timestamp\": \"2024-03-15T10:00:01Z\", \"message\": \"test entry 2\"}\n    ]\n\n    # Mock pattern matching\n    processor.apply_pattern = AsyncMock(return_value=None)\n\n    # Test processing\n    for entry in test_entries:\n        await processor.queue.put(entry)\n\n    # Process entries\n    worker_task = asyncio.create_task(processor.worker(0))\n    await asyncio.sleep(0.1)  # Allow processing\n    worker_task.cancel()\n\n    # Verify calls\n    assert processor.apply_pattern.call_count == len(test_entries)\n</code></pre>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-0001: Use Python for Implementation</li> <li>ADR-0002: Pattern-Based Detection Engine</li> <li>ADR-0009: Monitoring and Observability Strategy</li> </ul>"},{"location":"architecture/decisions/0006-asynchronous-log-processing-pipeline/#notes","title":"Notes","text":"<ul> <li>Performance benchmarks show 5x improvement in throughput</li> <li>Memory usage increases by ~30% due to queues and coroutines</li> <li>Consider implementing backpressure mechanisms for extreme load scenarios</li> <li>Regular profiling needed to identify async bottlenecks</li> </ul>"},{"location":"architecture/decisions/0006-log-processing-pipeline/","title":"0006 Log Processing Pipeline","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0006-log-processing-pipeline/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0006-log-processing-pipeline/#todo","title":"TODO","text":"<ul> <li> Add content for 0006 Log Processing Pipeline</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0006-log-processing-pipeline/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/0007-integration-framework/","title":"0007 Integration Framework","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0007-integration-framework/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0007-integration-framework/#todo","title":"TODO","text":"<ul> <li> Add content for 0007 Integration Framework</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0007-integration-framework/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/0008-configuration-management/","title":"0008 Configuration Management","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0008-configuration-management/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0008-configuration-management/#todo","title":"TODO","text":"<ul> <li> Add content for 0008 Configuration Management</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0008-configuration-management/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/0009-monitoring-and-observability/","title":"0009 Monitoring And Observability","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0009-monitoring-and-observability/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0009-monitoring-and-observability/#todo","title":"TODO","text":"<ul> <li> Add content for 0009 Monitoring And Observability</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0009-monitoring-and-observability/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/0010-security-model/","title":"0010 Security Model","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"architecture/decisions/0010-security-model/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"architecture/decisions/0010-security-model/#todo","title":"TODO","text":"<ul> <li> Add content for 0010 Security Model</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"architecture/decisions/0010-security-model/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"architecture/decisions/template/","title":"ADR Template","text":"<p>Use this template when creating new Architecture Decision Records.</p>"},{"location":"architecture/decisions/template/#instructions","title":"Instructions","text":"<ol> <li>Copy this file to create a new ADR</li> <li>Replace <code>NNNN</code> with the next sequential number (e.g., 0011)</li> <li>Replace <code>Title</code> with a descriptive title</li> <li>Fill in all sections with relevant content</li> <li>Remove placeholder comments before finalizing</li> </ol>"},{"location":"architecture/decisions/template/#adr-nnnn-title","title":"ADR-NNNN: Title","text":""},{"location":"architecture/decisions/template/#status","title":"Status","text":"<p>[Proposed | Accepted | Rejected | Superseded | Deprecated]</p>"},{"location":"architecture/decisions/template/#date","title":"Date","text":"<p>YYYY-MM-DD</p>"},{"location":"architecture/decisions/template/#author","title":"Author","text":"<p>[Your Name or Team Name]</p>"},{"location":"architecture/decisions/template/#context","title":"Context","text":""},{"location":"architecture/decisions/template/#decision","title":"Decision","text":""},{"location":"architecture/decisions/template/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/template/#positive","title":"Positive","text":""},{"location":"architecture/decisions/template/#negative","title":"Negative","text":""},{"location":"architecture/decisions/template/#neutral","title":"Neutral","text":""},{"location":"architecture/decisions/template/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/template/#related-decisions","title":"Related Decisions","text":""},{"location":"architecture/decisions/template/#notes","title":"Notes","text":""},{"location":"deployment/","title":"Deployment Guide","text":"<p>This guide covers deploying Nginx Security Monitor across different environments with security best practices and configuration templates.</p>"},{"location":"deployment/#overview","title":"Overview","text":"<p>Nginx Security Monitor can be deployed in various configurations:</p> <ul> <li>Development: Local testing and development</li> <li>Staging: Pre-production testing environment</li> <li>Production: Live production monitoring</li> <li>High Availability: Multi-node production setup</li> </ul>"},{"location":"deployment/#quick-deployment","title":"Quick Deployment","text":""},{"location":"deployment/#docker-deployment-recommended","title":"Docker Deployment (Recommended)","text":"<pre><code># Build and run with Docker Compose\ndocker-compose up -d\n\n# Or build manually\ndocker build -t nginx-security-monitor .\ndocker run -d --name nsm \\\n  -v /var/log/nginx:/var/log/nginx:ro \\\n  -v ./config:/app/config \\\n  nginx-security-monitor\n</code></pre>"},{"location":"deployment/#systemd-service-deployment","title":"Systemd Service Deployment","text":"<pre><code># Install and configure\nsudo ./install.sh\n\n# Enable and start service\nsudo systemctl enable nginx-security-monitor\nsudo systemctl start nginx-security-monitor\n\n# Check status\nsudo systemctl status nginx-security-monitor\n</code></pre>"},{"location":"deployment/#environment-specific-guides","title":"Environment-Specific Guides","text":"<ul> <li>Development Environment</li> <li>Staging Environment</li> <li>Production Environment</li> <li>High Availability Setup</li> </ul>"},{"location":"deployment/#configuration-management","title":"Configuration Management","text":""},{"location":"deployment/#environment-variables","title":"Environment Variables","text":"<pre><code># Required variables\nexport NSM_CONFIG_PATH=/etc/nginx-security-monitor/config\nexport NSM_LOG_LEVEL=INFO\nexport NSM_NGINX_LOG_PATH=/var/log/nginx/access.log\n\n# Optional variables\nexport NSM_ALERT_EMAIL=admin@example.com\nexport NSM_ENCRYPTION_KEY_PATH=/etc/nginx-security-monitor/keys/encryption.key\n</code></pre>"},{"location":"deployment/#configuration-templates","title":"Configuration Templates","text":"<p>Pre-configured templates are available in <code>config/templates/</code>:</p> <ul> <li><code>development.yaml</code>: Local development settings</li> <li><code>staging.yaml</code>: Staging environment configuration</li> <li><code>production.yaml</code>: Production-ready configuration</li> <li><code>high-availability.yaml</code>: Multi-node setup</li> </ul>"},{"location":"deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/#file-permissions","title":"File Permissions","text":"<pre><code># Set secure permissions\nsudo chown -R nsm:nsm /etc/nginx-security-monitor/\nsudo chmod 600 /etc/nginx-security-monitor/config/*.yaml\nsudo chmod 600 /etc/nginx-security-monitor/keys/*\n</code></pre>"},{"location":"deployment/#network-security","title":"Network Security","text":"<ul> <li>Configure firewall rules for monitoring ports</li> <li>Use TLS for external integrations</li> <li>Implement proper network segmentation</li> <li>Enable audit logging</li> </ul>"},{"location":"deployment/#access-control","title":"Access Control","text":"<ul> <li>Run service with dedicated user account</li> <li>Implement proper RBAC for configuration access</li> <li>Use encrypted configuration storage</li> <li>Regular security audits</li> </ul>"},{"location":"deployment/#monitoring-and-health-checks","title":"Monitoring and Health Checks","text":""},{"location":"deployment/#health-check-endpoints","title":"Health Check Endpoints","text":"<pre><code># Service health\ncurl http://localhost:8080/health\n\n# Configuration status\ncurl http://localhost:8080/config/status\n\n# Integration status\ncurl http://localhost:8080/integrations/status\n</code></pre>"},{"location":"deployment/#monitoring-metrics","title":"Monitoring Metrics","text":"<ul> <li>Detection rate and accuracy</li> <li>Response time and latency</li> <li>Integration connectivity</li> <li>Resource utilization</li> </ul>"},{"location":"deployment/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"deployment/#configuration-backup","title":"Configuration Backup","text":"<pre><code># Automated backup script\n./scripts/backup-config.sh\n\n# Manual backup\ntar -czf nsm-config-$(date +%Y%m%d).tar.gz /etc/nginx-security-monitor/\n</code></pre>"},{"location":"deployment/#disaster-recovery","title":"Disaster Recovery","text":"<ol> <li>Prepare Recovery Environment</li> <li>Restore Configuration Files</li> <li>Verify Integration Connectivity</li> <li>Test Detection Capabilities</li> <li>Resume Monitoring</li> </ol> <p>See Disaster Recovery Guide for detailed procedures.</p>"},{"location":"deployment/#scaling-and-performance","title":"Scaling and Performance","text":""},{"location":"deployment/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Load balancer configuration</li> <li>Shared configuration storage</li> <li>Distributed alerting</li> <li>Centralized logging</li> </ul>"},{"location":"deployment/#performance-tuning","title":"Performance Tuning","text":"<ul> <li>Log processing optimization</li> <li>Pattern matching efficiency</li> <li>Memory and CPU optimization</li> <li>Network throughput tuning</li> </ul>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#common-deployment-issues","title":"Common Deployment Issues","text":"<ol> <li> <p>Permission Errors <pre><code>sudo chown -R nsm:nsm /var/log/nginx-security-monitor/\n</code></pre></p> </li> <li> <p>Configuration Validation <pre><code>python -m nginx_security_monitor.config validate\n</code></pre></p> </li> <li> <p>Service Startup Issues <pre><code>sudo journalctl -u nginx-security-monitor -f\n</code></pre></p> </li> </ol>"},{"location":"deployment/#log-analysis","title":"Log Analysis","text":"<pre><code># Service logs\ntail -f /var/log/nginx-security-monitor/service.log\n\n# Error logs\ngrep ERROR /var/log/nginx-security-monitor/error.log\n\n# Debug information\nexport NSM_LOG_LEVEL=DEBUG\nsudo systemctl restart nginx-security-monitor\n</code></pre>"},{"location":"deployment/#migration-guide","title":"Migration Guide","text":""},{"location":"deployment/#upgrading-from-previous-versions","title":"Upgrading from Previous Versions","text":"<ol> <li>Backup Current Configuration</li> <li>Review Migration Notes</li> <li>Update Configuration Format</li> <li>Test in Staging Environment</li> <li>Deploy to Production</li> </ol>"},{"location":"deployment/#configuration-migration","title":"Configuration Migration","text":"<pre><code># Migrate configuration\npython scripts/migrate-config.py --from-version 1.0 --to-version 2.0\n\n# Validate migrated configuration\npython -m nginx_security_monitor.config validate --config migrated-config.yaml\n</code></pre>"},{"location":"deployment/#automation-and-cicd","title":"Automation and CI/CD","text":""},{"location":"deployment/#automated-deployment","title":"Automated Deployment","text":"<pre><code># GitHub Actions example\nname: Deploy to Production\non:\n  push:\n    tags: ['v*']\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Deploy to production\n        run: |\n          ansible-playbook deploy.yml -i production\n</code></pre>"},{"location":"deployment/#infrastructure-as-code","title":"Infrastructure as Code","text":"<ul> <li>Terraform configurations</li> <li>Ansible playbooks</li> <li>Kubernetes manifests</li> <li>Docker Compose files</li> </ul>"},{"location":"deployment/#support-and-maintenance","title":"Support and Maintenance","text":""},{"location":"deployment/#regular-maintenance-tasks","title":"Regular Maintenance Tasks","text":"<ul> <li>Configuration updates</li> <li>Pattern rule updates</li> <li>Security patches</li> <li>Performance monitoring</li> <li>Backup verification</li> </ul>"},{"location":"deployment/#support-channels","title":"Support Channels","text":"<ul> <li>Documentation: docs/</li> <li>Issues: GitHub Issues</li> <li>Emergency: Contact your system administrator</li> </ul> <p>Related Documentation: - Installation Guide - Configuration Guide - Operations Guide - Security Features</p>"},{"location":"deployment/development/","title":"Development Environment Deployment","text":"<p>This guide covers setting up Nginx Security Monitor for local development and testing.</p>"},{"location":"deployment/development/#quick-setup","title":"Quick Setup","text":""},{"location":"deployment/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Git</li> <li>Docker (optional, for containerized development)</li> <li>Nginx (for log generation testing)</li> </ul>"},{"location":"deployment/development/#installation","title":"Installation","text":"<pre><code># Clone repository\ngit clone https://github.com/your-org/nginx-security-monitor.git\ncd nginx-security-monitor\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# venv\\Scripts\\activate    # Windows\n\n# Install in development mode\npip install -e .\npip install -r dev-requirements.txt\n</code></pre>"},{"location":"deployment/development/#configuration","title":"Configuration","text":""},{"location":"deployment/development/#development-configuration","title":"Development Configuration","text":"<pre><code># config/development.yaml\nservice:\n  name: \"nginx-security-monitor-dev\"\n  environment: \"development\"\n  debug: true\n\nlogging:\n  level: DEBUG\n  console: true\n  file: ./logs/dev-monitor.log\n  format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\nmonitoring:\n  nginx_log_path: \"./test-data/nginx-access.log\"\n  poll_interval: 1.0  # Faster polling for development\n\ndetection:\n  patterns_file: \"./config/patterns-dev.json\"\n  enabled_rules:\n    - sql_injection\n    - xss_attempts\n    - brute_force\n    - directory_traversal\n\nalerts:\n  console: true\n  email:\n    enabled: false  # Disable email in dev\n  webhooks:\n    enabled: false  # Disable webhooks in dev\n\nintegrations:\n  fail2ban:\n    enabled: false\n  ossec:\n    enabled: false\n  suricata:\n    enabled: false\n\nsecurity:\n  encryption:\n    enabled: false  # Simplify for development\n  rate_limiting:\n    enabled: true\n    requests_per_minute: 1000  # Higher limit for testing\n</code></pre>"},{"location":"deployment/development/#environment-variables","title":"Environment Variables","text":"<pre><code># .env file for development\nNSM_CONFIG_PATH=./config/development.yaml\nNSM_LOG_LEVEL=DEBUG\nNSM_NGINX_LOG_PATH=./test-data/nginx-access.log\nNSM_CONSOLE_OUTPUT=true\nNSM_DEBUG_MODE=true\n</code></pre>"},{"location":"deployment/development/#development-workflow","title":"Development Workflow","text":""},{"location":"deployment/development/#1-start-development-server","title":"1. Start Development Server","text":"<pre><code># Activate virtual environment\nsource venv/bin/activate\n\n# Start in development mode\npython -m nginx_security_monitor --config config/development.yaml --debug\n\n# Or use the development script\n./scripts/dev-server.sh\n</code></pre>"},{"location":"deployment/development/#2-generate-test-data","title":"2. Generate Test Data","text":"<pre><code># Create test log entries\npython scripts/generate-test-logs.py --output test-data/nginx-access.log\n\n# Generate various attack patterns\npython scripts/generate-test-attacks.py --count 100 --output test-data/attack-logs.log\n</code></pre>"},{"location":"deployment/development/#3-hot-reload-development","title":"3. Hot Reload Development","text":"<pre><code># Install development dependencies\npip install watchdog\n\n# Start with hot reload\npython scripts/dev-watch.py\n\n# This will automatically restart when files change\n</code></pre>"},{"location":"deployment/development/#testing","title":"Testing","text":""},{"location":"deployment/development/#unit-tests","title":"Unit Tests","text":"<pre><code># Run all tests\npython -m pytest tests/ -v\n\n# Run specific test categories\npython -m pytest tests/unit/ -v\npython -m pytest tests/integration/ -v\n\n# Run with coverage\npython -m pytest --cov=src/nginx_security_monitor tests/ --cov-report=html\n</code></pre>"},{"location":"deployment/development/#integration-testing","title":"Integration Testing","text":"<pre><code># Test with real log data\npython -m pytest tests/integration/test_log_processing.py -v\n\n# Test pattern detection\npython -m pytest tests/integration/test_pattern_detection.py -v\n\n# Test configuration loading\npython -m pytest tests/integration/test_config.py -v\n</code></pre>"},{"location":"deployment/development/#manual-testing","title":"Manual Testing","text":"<pre><code># Test pattern detection manually\necho '192.168.1.100 - - [20/Jul/2025:10:15:30 +0000] \"GET /admin.php?id=1 UNION SELECT * FROM users-- HTTP/1.1\" 200 1234' &gt;&gt; test-data/nginx-access.log\n\n# Check if detection works\ntail -f logs/dev-monitor.log\n\n# Test configuration validation\npython -c \"from nginx_security_monitor.config import load_config; print(load_config('./config/development.yaml'))\"\n</code></pre>"},{"location":"deployment/development/#development-tools","title":"Development Tools","text":""},{"location":"deployment/development/#code-quality-tools","title":"Code Quality Tools","text":"<pre><code># Install development tools\npip install black flake8 mypy pre-commit bandit\n\n# Format code\nblack src/ tests/\n\n# Lint code\nflake8 src/ tests/\n\n# Type checking\nmypy src/\n\n# Security scanning\nbandit -r src/\n</code></pre>"},{"location":"deployment/development/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># Install pre-commit hooks\npre-commit install\n\n# Run manually\npre-commit run --all-files\n\n# Update hooks\npre-commit autoupdate\n</code></pre>"},{"location":"deployment/development/#debug-tools","title":"Debug Tools","text":"<pre><code># Enable debug logging\nexport NSM_LOG_LEVEL=DEBUG\n\n# Profile performance\npython -m cProfile -o profile.stats -m nginx_security_monitor\n\n# Memory profiling\npip install memory_profiler\npython -m memory_profiler scripts/profile-memory.py\n</code></pre>"},{"location":"deployment/development/#docker-development","title":"Docker Development","text":""},{"location":"deployment/development/#development-container","title":"Development Container","text":"<pre><code># docker-compose.dev.yml\nversion: '3.8'\n\nservices:\n  nginx-security-monitor:\n    build:\n      context: .\n      dockerfile: Dockerfile.dev\n    volumes:\n      - .:/app\n      - ./config:/app/config\n      - ./test-data:/app/test-data\n      - ./logs:/app/logs\n    environment:\n      - NSM_CONFIG_PATH=/app/config/development.yaml\n      - NSM_LOG_LEVEL=DEBUG\n    ports:\n      - \"8080:8080\"\n    command: python -m nginx_security_monitor --config /app/config/development.yaml\n</code></pre> <pre><code># Start development container\ndocker-compose -f docker-compose.dev.yml up --build\n\n# Shell into container\ndocker-compose -f docker-compose.dev.yml exec nginx-security-monitor bash\n</code></pre>"},{"location":"deployment/development/#development-dockerfile","title":"Development Dockerfile","text":"<pre><code># Dockerfile.dev\nFROM python:3.9-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements first for better caching\nCOPY requirements.txt dev-requirements.txt ./\nRUN pip install -r requirements.txt -r dev-requirements.txt\n\n# Copy source code\nCOPY . .\n\n# Install in development mode\nRUN pip install -e .\n\n# Create logs directory\nRUN mkdir -p logs test-data\n\nEXPOSE 8080\n\nCMD [\"python\", \"-m\", \"nginx_security_monitor\"]\n</code></pre>"},{"location":"deployment/development/#ide-configuration","title":"IDE Configuration","text":""},{"location":"deployment/development/#vs-code-configuration","title":"VS Code Configuration","text":"<pre><code>// .vscode/settings.json\n{\n  \"python.defaultInterpreterPath\": \"./venv/bin/python\",\n  \"python.linting.enabled\": true,\n  \"python.linting.flake8Enabled\": true,\n  \"python.formatting.provider\": \"black\",\n  \"python.testing.pytestEnabled\": true,\n  \"python.testing.pytestArgs\": [\"tests/\"],\n  \"files.exclude\": {\n    \"**/__pycache__\": true,\n    \"**/*.pyc\": true,\n    \".coverage\": true,\n    \"htmlcov/\": true\n  }\n}\n</code></pre> <pre><code>// .vscode/launch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Nginx Security Monitor\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"module\": \"nginx_security_monitor\",\n      \"args\": [\"--config\", \"config/development.yaml\", \"--debug\"],\n      \"console\": \"integratedTerminal\",\n      \"env\": {\n        \"NSM_LOG_LEVEL\": \"DEBUG\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"deployment/development/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"deployment/development/#development-metrics","title":"Development Metrics","text":"<pre><code># Monitor resource usage\npython scripts/monitor-resources.py\n\n# Check detection performance\npython scripts/benchmark-detection.py\n\n# Memory usage tracking\npython scripts/track-memory.py\n</code></pre>"},{"location":"deployment/development/#profiling","title":"Profiling","text":"<pre><code># CPU profiling\npython -m cProfile -o cpu.prof -m nginx_security_monitor\nsnakeviz cpu.prof\n\n# Line profiling\npip install line_profiler\nkernprof -l -v scripts/profile-detection.py\n</code></pre>"},{"location":"deployment/development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/development/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Import Errors <pre><code># Ensure development installation\npip install -e .\n</code></pre></p> </li> <li> <p>Test Failures <pre><code># Clear pytest cache\npython -m pytest --cache-clear\n</code></pre></p> </li> <li> <p>Permission Issues <pre><code># Fix log directory permissions\nmkdir -p logs\nchmod 755 logs\n</code></pre></p> </li> </ol>"},{"location":"deployment/development/#debug-information","title":"Debug Information","text":"<pre><code># Check Python path\npython -c \"import sys; print('\\n'.join(sys.path))\"\n\n# Verify installation\npython -c \"import nginx_security_monitor; print(nginx_security_monitor.__file__)\"\n\n# Check configuration\npython -c \"from nginx_security_monitor.config import load_config; print(load_config())\"\n</code></pre>"},{"location":"deployment/development/#next-steps","title":"Next Steps","text":"<ol> <li>Explore the codebase: Start with <code>src/nginx_security_monitor/</code></li> <li>Run the test suite: <code>python -m pytest tests/ -v</code></li> <li>Make your first change: Edit a pattern in <code>config/patterns.json</code></li> <li>Create a feature branch: <code>git checkout -b feature/my-feature</code></li> </ol> <p>Related Documentation: - Getting Started Guide - Testing Guide - Configuration Guide - Contributing Guidelines</p>"},{"location":"deployment/high-availability/","title":"High Availability","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"deployment/high-availability/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"deployment/high-availability/#todo","title":"TODO","text":"<ul> <li> Add content for High Availability</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"deployment/high-availability/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"deployment/production/","title":"Production","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"deployment/production/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"deployment/production/#todo","title":"TODO","text":"<ul> <li> Add content for Production</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"deployment/production/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"deployment/staging/","title":"Staging","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"deployment/staging/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"deployment/staging/#todo","title":"TODO","text":"<ul> <li> Add content for Staging</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"deployment/staging/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"operations/disaster-recovery/","title":"Disaster Recovery Procedures","text":"<p>This guide provides comprehensive disaster recovery procedures for Nginx Security Monitor, including backup strategies, recovery procedures, and incident response protocols.</p>"},{"location":"operations/disaster-recovery/#overview","title":"Overview","text":"<p>Disaster recovery (DR) for Nginx Security Monitor involves protecting and restoring:</p> <ul> <li>Configuration data: Settings, patterns, and encryption keys</li> <li>Historical data: Logs, alerts, and security events</li> <li>System state: Service configurations and integrations</li> <li>Operational continuity: Monitoring capabilities and alerting</li> </ul>"},{"location":"operations/disaster-recovery/#recovery-time-objectives-rto-and-recovery-point-objectives-rpo","title":"Recovery Time Objectives (RTO) and Recovery Point Objectives (RPO)","text":"Component RTO Target RPO Target Priority Core Monitoring 15 minutes 5 minutes Critical Configuration 5 minutes 1 hour Critical Historical Data 4 hours 24 hours High Integrations 30 minutes 1 hour High Reporting 24 hours 24 hours Medium"},{"location":"operations/disaster-recovery/#backup-strategies","title":"Backup Strategies","text":""},{"location":"operations/disaster-recovery/#automated-backup-configuration","title":"Automated Backup Configuration","text":"<pre><code># backup configuration in config/backup.yaml\nbackup:\n  enabled: true\n  schedule: \"0 2 * * *\"  # Daily at 2 AM\n  retention:\n    daily: 7\n    weekly: 4\n    monthly: 12\n    yearly: 3\n\n  targets:\n    configuration:\n      enabled: true\n      path: \"/etc/nginx-security-monitor/\"\n      encryption: true\n\n    logs:\n      enabled: true\n      path: \"/var/log/nginx-security-monitor/\"\n      compression: true\n      retention_days: 90\n\n    database:\n      enabled: true\n      type: \"full\"\n      compression: true\n\n  destinations:\n    - type: \"s3\"\n      bucket: \"nsm-backups\"\n      region: \"us-east-1\"\n      encryption: \"AES256\"\n\n    - type: \"local\"\n      path: \"/backup/nginx-security-monitor/\"\n\n    - type: \"remote\"\n      host: \"backup.example.com\"\n      path: \"/backups/nsm/\"\n      method: \"rsync\"\n</code></pre>"},{"location":"operations/disaster-recovery/#backup-scripts","title":"Backup Scripts","text":"<pre><code>#!/bin/bash\n# scripts/backup.sh - Automated backup script\n\nset -euo pipefail\n\nBACKUP_DATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backup/nginx-security-monitor\"\nCONFIG_DIR=\"/etc/nginx-security-monitor\"\nLOG_DIR=\"/var/log/nginx-security-monitor\"\nS3_BUCKET=\"nsm-backups\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR/$BACKUP_DATE\"\n\n# Backup configuration files\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_DIR/$BACKUP_DATE/config.tar.gz\" \\\n    -C \"$CONFIG_DIR\" \\\n    --exclude=\"*.tmp\" \\\n    --exclude=\"*.lock\" \\\n    .\n\n# Backup logs (compressed)\necho \"Backing up logs...\"\ntar -czf \"$BACKUP_DIR/$BACKUP_DATE/logs.tar.gz\" \\\n    -C \"$LOG_DIR\" \\\n    --exclude=\"*.tmp\" \\\n    .\n\n# Backup database\necho \"Backing up database...\"\nsqlite3 /var/lib/nginx-security-monitor/data.db \".backup '$BACKUP_DIR/$BACKUP_DATE/database.db'\"\n\n# Create backup manifest\ncat &gt; \"$BACKUP_DIR/$BACKUP_DATE/manifest.json\" &lt;&lt; EOF\n{\n  \"timestamp\": \"$(date -Iseconds)\",\n  \"version\": \"$(python -m nginx_security_monitor --version)\",\n  \"hostname\": \"$(hostname)\",\n  \"files\": {\n    \"config\": \"config.tar.gz\",\n    \"logs\": \"logs.tar.gz\",\n    \"database\": \"database.db\"\n  },\n  \"checksums\": {\n    \"config\": \"$(sha256sum $BACKUP_DIR/$BACKUP_DATE/config.tar.gz | cut -d' ' -f1)\",\n    \"logs\": \"$(sha256sum $BACKUP_DIR/$BACKUP_DATE/logs.tar.gz | cut -d' ' -f1)\",\n    \"database\": \"$(sha256sum $BACKUP_DIR/$BACKUP_DATE/database.db | cut -d' ' -f1)\"\n  }\n}\nEOF\n\n# Upload to S3 (if configured)\nif command -v aws &amp;&gt; /dev/null; then\n    echo \"Uploading to S3...\"\n    aws s3 sync \"$BACKUP_DIR/$BACKUP_DATE/\" \"s3://$S3_BUCKET/$BACKUP_DATE/\" \\\n        --storage-class STANDARD_IA \\\n        --server-side-encryption AES256\nfi\n\n# Cleanup old backups (keep last 7 days locally)\nfind \"$BACKUP_DIR\" -type d -name \"20*\" -mtime +7 -exec rm -rf {} \\;\n\necho \"Backup completed: $BACKUP_DATE\"\n</code></pre>"},{"location":"operations/disaster-recovery/#backup-validation-script","title":"Backup Validation Script","text":"<pre><code>#!/bin/bash\n# scripts/validate-backup.sh - Backup validation script\n\nBACKUP_PATH=\"$1\"\n\nif [ -z \"$BACKUP_PATH\" ]; then\n    echo \"Usage: $0 &lt;backup_path&gt;\"\n    exit 1\nfi\n\necho \"Validating backup at: $BACKUP_PATH\"\n\n# Check manifest file\nif [ ! -f \"$BACKUP_PATH/manifest.json\" ]; then\n    echo \"ERROR: Missing manifest.json\"\n    exit 1\nfi\n\n# Validate checksums\necho \"Validating checksums...\"\nMANIFEST=\"$BACKUP_PATH/manifest.json\"\n\nfor file in config.tar.gz logs.tar.gz database.db; do\n    if [ -f \"$BACKUP_PATH/$file\" ]; then\n        EXPECTED=$(jq -r \".checksums.${file%.*}\" \"$MANIFEST\")\n        ACTUAL=$(sha256sum \"$BACKUP_PATH/$file\" | cut -d' ' -f1)\n\n        if [ \"$EXPECTED\" = \"$ACTUAL\" ]; then\n            echo \"\u2713 $file checksum valid\"\n        else\n            echo \"\u2717 $file checksum mismatch\"\n            exit 1\n        fi\n    else\n        echo \"\u2717 Missing file: $file\"\n        exit 1\n    fi\ndone\n\n# Test archive integrity\necho \"Testing archive integrity...\"\ntar -tzf \"$BACKUP_PATH/config.tar.gz\" &gt; /dev/null &amp;&amp; echo \"\u2713 config.tar.gz integrity OK\"\ntar -tzf \"$BACKUP_PATH/logs.tar.gz\" &gt; /dev/null &amp;&amp; echo \"\u2713 logs.tar.gz integrity OK\"\n\n# Test database integrity\necho \"Testing database integrity...\"\nsqlite3 \"$BACKUP_PATH/database.db\" \"PRAGMA integrity_check;\" | grep -q \"ok\" &amp;&amp; echo \"\u2713 database.db integrity OK\"\n\necho \"Backup validation completed successfully\"\n</code></pre>"},{"location":"operations/disaster-recovery/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"operations/disaster-recovery/#full-system-recovery","title":"Full System Recovery","text":"<pre><code>#!/bin/bash\n# scripts/disaster-recovery.sh - Full system recovery script\n\nset -euo pipefail\n\nBACKUP_PATH=\"$1\"\nRECOVERY_MODE=\"${2:-full}\"  # full, config-only, data-only\n\nif [ -z \"$BACKUP_PATH\" ]; then\n    echo \"Usage: $0 &lt;backup_path&gt; [recovery_mode]\"\n    exit 1\nfi\n\necho \"Starting disaster recovery from: $BACKUP_PATH\"\necho \"Recovery mode: $RECOVERY_MODE\"\n\n# Validate backup before proceeding\n./scripts/validate-backup.sh \"$BACKUP_PATH\"\n\n# Stop services\necho \"Stopping nginx-security-monitor service...\"\nsudo systemctl stop nginx-security-monitor\n\n# Backup current state (if exists)\nif [ -d \"/etc/nginx-security-monitor\" ]; then\n    echo \"Backing up current state...\"\n    sudo mv /etc/nginx-security-monitor /etc/nginx-security-monitor.recovery-backup-$(date +%Y%m%d_%H%M%S)\nfi\n\n# Recovery based on mode\ncase \"$RECOVERY_MODE\" in\n    \"full\"|\"config-only\")\n        echo \"Restoring configuration...\"\n        sudo mkdir -p /etc/nginx-security-monitor\n        sudo tar -xzf \"$BACKUP_PATH/config.tar.gz\" -C /etc/nginx-security-monitor/\n        sudo chown -R nsm:nsm /etc/nginx-security-monitor/\n        sudo chmod -R 640 /etc/nginx-security-monitor/config/\n        sudo chmod 600 /etc/nginx-security-monitor/keys/*\n        ;;\nesac\n\ncase \"$RECOVERY_MODE\" in\n    \"full\"|\"data-only\")\n        echo \"Restoring database...\"\n        sudo mkdir -p /var/lib/nginx-security-monitor\n        sudo cp \"$BACKUP_PATH/database.db\" /var/lib/nginx-security-monitor/data.db\n        sudo chown nsm:nsm /var/lib/nginx-security-monitor/data.db\n        sudo chmod 640 /var/lib/nginx-security-monitor/data.db\n\n        echo \"Restoring logs...\"\n        sudo mkdir -p /var/log/nginx-security-monitor\n        sudo tar -xzf \"$BACKUP_PATH/logs.tar.gz\" -C /var/log/nginx-security-monitor/\n        sudo chown -R nsm:adm /var/log/nginx-security-monitor/\n        ;;\nesac\n\n# Validate configuration\necho \"Validating configuration...\"\npython -m nginx_security_monitor.config validate\n\n# Start services\necho \"Starting nginx-security-monitor service...\"\nsudo systemctl start nginx-security-monitor\n\n# Wait for service to be ready\necho \"Waiting for service to be ready...\"\nfor i in {1..30}; do\n    if curl -s http://localhost:8080/health &gt; /dev/null; then\n        echo \"Service is ready\"\n        break\n    fi\n    sleep 2\ndone\n\n# Run post-recovery validation\necho \"Running post-recovery validation...\"\n./scripts/post-recovery-validation.sh\n\necho \"Disaster recovery completed successfully\"\n</code></pre>"},{"location":"operations/disaster-recovery/#configuration-only-recovery","title":"Configuration-Only Recovery","text":"<pre><code>#!/bin/bash\n# scripts/config-recovery.sh - Configuration-only recovery\n\nBACKUP_PATH=\"$1\"\n\necho \"Performing configuration-only recovery...\"\n\n# Stop service temporarily\nsudo systemctl stop nginx-security-monitor\n\n# Restore configuration\nsudo tar -xzf \"$BACKUP_PATH/config.tar.gz\" -C /etc/nginx-security-monitor/\n\n# Validate configuration\npython -m nginx_security_monitor.config validate\n\n# Restart service\nsudo systemctl start nginx-security-monitor\n\necho \"Configuration recovery completed\"\n</code></pre>"},{"location":"operations/disaster-recovery/#database-recovery","title":"Database Recovery","text":"<pre><code>#!/bin/bash\n# scripts/database-recovery.sh - Database recovery procedures\n\nBACKUP_PATH=\"$1\"\nRECOVERY_TYPE=\"${2:-replace}\"  # replace, merge\n\necho \"Performing database recovery...\"\n\ncase \"$RECOVERY_TYPE\" in\n    \"replace\")\n        echo \"Replacing database...\"\n        sudo systemctl stop nginx-security-monitor\n        sudo cp \"$BACKUP_PATH/database.db\" /var/lib/nginx-security-monitor/data.db\n        sudo chown nsm:nsm /var/lib/nginx-security-monitor/data.db\n        sudo systemctl start nginx-security-monitor\n        ;;\n\n    \"merge\")\n        echo \"Merging database...\"\n        # Create temporary database for merging\n        sqlite3 /tmp/merged.db &lt; scripts/sql/create_tables.sql\n\n        # Import backup data\n        sqlite3 /tmp/merged.db \".restore '$BACKUP_PATH/database.db'\"\n\n        # Merge with current data (implement merge logic)\n        python scripts/merge-databases.py \\\n            --source /var/lib/nginx-security-monitor/data.db \\\n            --backup /tmp/merged.db \\\n            --output /var/lib/nginx-security-monitor/data.db.new\n\n        sudo systemctl stop nginx-security-monitor\n        sudo mv /var/lib/nginx-security-monitor/data.db.new /var/lib/nginx-security-monitor/data.db\n        sudo chown nsm:nsm /var/lib/nginx-security-monitor/data.db\n        sudo systemctl start nginx-security-monitor\n        ;;\nesac\n\necho \"Database recovery completed\"\n</code></pre>"},{"location":"operations/disaster-recovery/#post-recovery-validation","title":"Post-Recovery Validation","text":"<pre><code>#!/bin/bash\n# scripts/post-recovery-validation.sh - Post-recovery system validation\n\necho \"Running post-recovery validation...\"\n\n# Test service health\necho \"Testing service health...\"\nif ! curl -s http://localhost:8080/health | grep -q \"healthy\"; then\n    echo \"ERROR: Service health check failed\"\n    exit 1\nfi\necho \"\u2713 Service health OK\"\n\n# Test configuration loading\necho \"Testing configuration...\"\nif ! python -c \"from nginx_security_monitor.config import load_config; load_config()\"; then\n    echo \"ERROR: Configuration loading failed\"\n    exit 1\nfi\necho \"\u2713 Configuration loading OK\"\n\n# Test pattern loading\necho \"Testing pattern loading...\"\nif ! python -c \"from nginx_security_monitor.patterns import load_patterns; load_patterns()\"; then\n    echo \"ERROR: Pattern loading failed\"\n    exit 1\nfi\necho \"\u2713 Pattern loading OK\"\n\n# Test database connectivity\necho \"Testing database...\"\nif ! python -c \"from nginx_security_monitor.database import test_connection; test_connection()\"; then\n    echo \"ERROR: Database connection failed\"\n    exit 1\nfi\necho \"\u2713 Database connection OK\"\n\n# Test integrations\necho \"Testing integrations...\"\npython scripts/test-integrations.py --quick\n\n# Generate test log entry\necho \"Testing log processing...\"\necho \"$(date --iso-8601=seconds) 192.168.1.100 - - [$(date '+%d/%b/%Y:%H:%M:%S %z')] \\\"GET /test-recovery HTTP/1.1\\\" 200 1234\" &gt;&gt; /var/log/nginx/access.log\n\n# Wait for processing\nsleep 5\n\n# Check if test entry was processed\nif ! grep -q \"test-recovery\" /var/log/nginx-security-monitor/processed.log; then\n    echo \"WARNING: Log processing test may have failed\"\nelse\n    echo \"\u2713 Log processing OK\"\nfi\n\necho \"Post-recovery validation completed\"\n</code></pre>"},{"location":"operations/disaster-recovery/#high-availability-and-failover","title":"High Availability and Failover","text":""},{"location":"operations/disaster-recovery/#active-passive-configuration","title":"Active-Passive Configuration","text":"<pre><code># ha-config.yaml - High availability configuration\nhigh_availability:\n  mode: \"active_passive\"\n\n  primary:\n    hostname: \"nsm-primary.example.com\"\n    ip: \"192.168.1.10\"\n    priority: 100\n\n  secondary:\n    hostname: \"nsm-secondary.example.com\"\n    ip: \"192.168.1.11\"\n    priority: 90\n\n  shared_storage:\n    type: \"nfs\"\n    mount_point: \"/shared/nginx-security-monitor\"\n\n  failover:\n    health_check_interval: 30\n    failure_threshold: 3\n    automatic_failover: true\n\n  synchronization:\n    config_sync: true\n    log_sync: true\n    database_replication: true\n</code></pre>"},{"location":"operations/disaster-recovery/#failover-script","title":"Failover Script","text":"<pre><code>#!/bin/bash\n# scripts/failover.sh - Automatic failover script\n\nROLE=\"$1\"  # primary or secondary\nPEER_IP=\"$2\"\n\ncase \"$ROLE\" in\n    \"primary\")\n        echo \"Starting as primary node...\"\n\n        # Mount shared storage\n        sudo mount -t nfs nfs-server:/shared/nsm /shared/nginx-security-monitor\n\n        # Start service\n        sudo systemctl start nginx-security-monitor\n\n        # Monitor secondary\n        while true; do\n            if ! ping -c 1 \"$PEER_IP\" &gt; /dev/null 2&gt;&amp;1; then\n                echo \"Secondary node unreachable - continuing as primary\"\n            fi\n            sleep 30\n        done\n        ;;\n\n    \"secondary\")\n        echo \"Starting as secondary node...\"\n\n        # Monitor primary\n        while true; do\n            if ! curl -s \"http://$PEER_IP:8080/health\" &gt; /dev/null; then\n                echo \"Primary node failed - initiating failover\"\n\n                # Mount shared storage\n                sudo mount -t nfs nfs-server:/shared/nsm /shared/nginx-security-monitor\n\n                # Start service\n                sudo systemctl start nginx-security-monitor\n\n                # Update DNS/load balancer\n                python scripts/update-dns.py --promote-secondary\n\n                # Become primary\n                exec \"$0\" primary \"$PEER_IP\"\n            fi\n            sleep 30\n        done\n        ;;\nesac\n</code></pre>"},{"location":"operations/disaster-recovery/#data-protection-and-compliance","title":"Data Protection and Compliance","text":""},{"location":"operations/disaster-recovery/#encryption-at-rest","title":"Encryption at Rest","text":"<pre><code># Setup encrypted backup storage\ncryptsetup luksFormat /dev/sdb1\ncryptsetup luksOpen /dev/sdb1 backup_storage\nmkfs.ext4 /dev/mapper/backup_storage\nmount /dev/mapper/backup_storage /backup/encrypted\n</code></pre>"},{"location":"operations/disaster-recovery/#gdpr-compliance","title":"GDPR Compliance","text":"<pre><code># GDPR compliance configuration\ndata_protection:\n  gdpr:\n    enabled: true\n\n    data_retention:\n      personal_data: \"2 years\"\n      security_logs: \"7 years\"\n      audit_logs: \"10 years\"\n\n    data_anonymization:\n      ip_addresses: true\n      user_agents: false\n\n    right_to_erasure:\n      enabled: true\n      verification_required: true\n\n    data_export:\n      formats: [\"json\", \"csv\"]\n      encryption: true\n</code></pre>"},{"location":"operations/disaster-recovery/#incident-response-integration","title":"Incident Response Integration","text":""},{"location":"operations/disaster-recovery/#security-incident-procedures","title":"Security Incident Procedures","text":"<pre><code>#!/bin/bash\n# scripts/security-incident-response.sh\n\nINCIDENT_TYPE=\"$1\"\nSEVERITY=\"$2\"\n\necho \"Security incident detected: $INCIDENT_TYPE (Severity: $SEVERITY)\"\n\ncase \"$SEVERITY\" in\n    \"critical\")\n        # Immediate response\n        echo \"CRITICAL: Initiating emergency procedures\"\n\n        # Isolate system\n        sudo iptables -P INPUT DROP\n        sudo iptables -P FORWARD DROP\n\n        # Preserve evidence\n        ./scripts/preserve-evidence.sh\n\n        # Notify security team\n        curl -X POST \"$SECURITY_WEBHOOK\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\\\"incident\\\": \\\"$INCIDENT_TYPE\\\", \\\"severity\\\": \\\"$SEVERITY\\\", \\\"timestamp\\\": \\\"$(date -Iseconds)\\\"}\"\n        ;;\n\n    \"high\")\n        # Enhanced monitoring\n        echo \"HIGH: Increasing monitoring and logging\"\n\n        # Enable debug logging\n        sed -i 's/level: INFO/level: DEBUG/' /etc/nginx-security-monitor/config/settings.yaml\n        sudo systemctl reload nginx-security-monitor\n\n        # Backup current state\n        ./scripts/backup.sh\n        ;;\nesac\n</code></pre>"},{"location":"operations/disaster-recovery/#testing-and-drills","title":"Testing and Drills","text":""},{"location":"operations/disaster-recovery/#monthly-dr-drill","title":"Monthly DR Drill","text":"<pre><code>#!/bin/bash\n# scripts/dr-drill.sh - Monthly disaster recovery drill\n\necho \"Starting DR drill: $(date)\"\n\n# Create test environment\n./scripts/setup-test-environment.sh\n\n# Simulate failure\n./scripts/simulate-failure.sh --type random\n\n# Perform recovery\n./scripts/disaster-recovery.sh /backup/test-data/\n\n# Validate recovery\n./scripts/post-recovery-validation.sh\n\n# Generate report\n./scripts/generate-dr-report.sh --drill-date \"$(date +%Y%m%d)\"\n\necho \"DR drill completed\"\n</code></pre>"},{"location":"operations/disaster-recovery/#recovery-time-testing","title":"Recovery Time Testing","text":"<pre><code>#!/bin/bash\n# scripts/rto-test.sh - Recovery Time Objective testing\n\nSTART_TIME=$(date +%s)\n\n# Simulate disaster\n./scripts/simulate-disaster.sh\n\n# Perform recovery\n./scripts/disaster-recovery.sh /backup/latest/\n\n# Measure recovery time\nEND_TIME=$(date +%s)\nRECOVERY_TIME=$((END_TIME - START_TIME))\n\necho \"Recovery completed in $RECOVERY_TIME seconds\"\n\n# Check if within RTO\nif [ $RECOVERY_TIME -le 900 ]; then  # 15 minutes\n    echo \"\u2713 Recovery within RTO target\"\nelse\n    echo \"\u2717 Recovery exceeded RTO target\"\nfi\n</code></pre>"},{"location":"operations/disaster-recovery/#documentation-and-runbooks","title":"Documentation and Runbooks","text":""},{"location":"operations/disaster-recovery/#emergency-contact-list","title":"Emergency Contact List","text":"<pre><code># Emergency contacts configuration\nemergency_contacts:\n  primary_oncall:\n    name: \"Primary On-Call Engineer\"\n    phone: \"+1-555-PRIMARY\"\n    email: \"oncall@example.com\"\n\n  security_team:\n    name: \"Security Incident Response\"\n    phone: \"+1-555-SECURITY\"\n    email: \"security@example.com\"\n\n  management:\n    name: \"IT Management\"\n    phone: \"+1-555-MANAGER\"\n    email: \"it-manager@example.com\"\n\n  vendors:\n    cloud_provider:\n      name: \"AWS Support\"\n      phone: \"+1-800-AWS-SUPPORT\"\n      case_priority: \"urgent\"\n</code></pre>"},{"location":"operations/disaster-recovery/#recovery-checklists","title":"Recovery Checklists","text":"<pre><code>## Critical System Failure Checklist\n\n### Immediate Response (0-15 minutes)\n- [ ] Confirm system failure\n- [ ] Notify on-call team\n- [ ] Assess impact scope\n- [ ] Activate backup systems\n- [ ] Preserve evidence\n\n### Recovery Actions (15-60 minutes)\n- [ ] Identify root cause\n- [ ] Select recovery strategy\n- [ ] Execute recovery procedure\n- [ ] Validate system functionality\n- [ ] Update status page\n\n### Post-Recovery (1-24 hours)\n- [ ] Complete system validation\n- [ ] Document incident\n- [ ] Conduct post-mortem\n- [ ] Update procedures\n- [ ] Test backup systems\n</code></pre> <p>Related Documentation: - Operations Guide - Security Best Practices - Performance Tuning - Monitoring Guide</p>"},{"location":"operations/monitoring/","title":"Macro Syntax Error","text":"<p>File: <code>operations/monitoring.md</code></p> <p>Line 177 in Markdown file: unexpected char '$' at 4517 <pre><code>          description: \"Average processing time is {{ $value }}s (threshold: 1.0s)\"\n</code></pre></p>"},{"location":"operations/performance-tuning/","title":"Performance Tuning Guide","text":"<p>This guide provides strategies and techniques for optimizing Nginx Security Monitor performance in production environments.</p>"},{"location":"operations/performance-tuning/#performance-overview","title":"Performance Overview","text":"<p>Nginx Security Monitor's performance depends on several factors:</p> <ul> <li>Log Processing Rate: Number of log entries processed per second</li> <li>Pattern Matching Efficiency: Speed of threat detection algorithms</li> <li>Memory Usage: RAM consumption for pattern storage and processing</li> <li>Network I/O: Integration and alerting performance</li> <li>Storage I/O: Log file reading and writing performance</li> </ul>"},{"location":"operations/performance-tuning/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"operations/performance-tuning/#key-metrics","title":"Key Metrics","text":"<pre><code># Performance monitoring configuration\nmonitoring:\n  metrics:\n    log_processing_rate:\n      target: 10000  # entries/second\n      warning: 5000\n      critical: 1000\n\n    memory_usage:\n      target: \"256MB\"\n      warning: \"512MB\"\n      critical: \"1GB\"\n\n    response_time:\n      target: \"100ms\"\n      warning: \"500ms\"\n      critical: \"2s\"\n\n    detection_accuracy:\n      target: \"99%\"\n      warning: \"95%\"\n      critical: \"90%\"\n</code></pre>"},{"location":"operations/performance-tuning/#performance-dashboard","title":"Performance Dashboard","text":"<pre><code># Monitor real-time performance\npython scripts/performance-monitor.py\n\n# Generate performance report\npython scripts/performance-report.py --period 24h\n\n# Check system resources\nhtop\niostat -x 1\nvmstat 1\n</code></pre>"},{"location":"operations/performance-tuning/#log-processing-optimization","title":"Log Processing Optimization","text":""},{"location":"operations/performance-tuning/#efficient-log-parsing","title":"Efficient Log Parsing","text":"<pre><code># Optimized log parsing configuration\nlog_processing:\n  parser:\n    type: \"compiled_regex\"  # Faster than standard regex\n    cache_size: 10000       # Cache compiled patterns\n    batch_size: 1000        # Process logs in batches\n\n  buffer:\n    size: \"64MB\"            # Input buffer size\n    flush_interval: \"1s\"    # Flush frequency\n\n  threading:\n    worker_threads: 4       # CPU cores - 1\n    queue_size: 10000       # Work queue size\n</code></pre>"},{"location":"operations/performance-tuning/#log-file-optimization","title":"Log File Optimization","text":"<pre><code># Optimize log file reading\n# Use memory-mapped files for large logs\necho 'vm.swappiness=10' &gt;&gt; /etc/sysctl.conf\n\n# Enable log compression\nlogrotate -f /etc/logrotate.d/nginx\n\n# Use SSD storage for logs\nmount /var/log/nginx -o noatime,nodiratime\n</code></pre>"},{"location":"operations/performance-tuning/#pattern-matching-performance","title":"Pattern Matching Performance","text":"<pre><code># Optimized pattern configuration\npatterns:\n  optimization:\n    compile_patterns: true    # Pre-compile all regex patterns\n    use_dfa: true            # Use deterministic finite automaton\n    pattern_cache: true      # Cache pattern matching results\n\n  engine:\n    type: \"hyperscan\"        # Intel Hyperscan for high performance\n    cpu_features: [\"sse4.2\", \"avx2\"]  # Use CPU-specific optimizations\n\n  rules:\n    priority_based: true     # Process high-priority patterns first\n    early_termination: true  # Stop on first match for exclusive rules\n</code></pre>"},{"location":"operations/performance-tuning/#memory-optimization","title":"Memory Optimization","text":""},{"location":"operations/performance-tuning/#memory-configuration","title":"Memory Configuration","text":"<pre><code># Memory management settings\nmemory:\n  allocation:\n    initial_heap: \"128MB\"\n    max_heap: \"512MB\"\n\n  garbage_collection:\n    strategy: \"generational\"\n    frequency: \"adaptive\"\n\n  caching:\n    pattern_cache: \"64MB\"\n    log_cache: \"32MB\"\n    result_cache: \"16MB\"\n\n  monitoring:\n    enable_profiling: true\n    dump_on_oom: true\n    alert_threshold: \"80%\"\n</code></pre>"},{"location":"operations/performance-tuning/#memory-profiling","title":"Memory Profiling","text":"<pre><code># Monitor memory usage\npython -m memory_profiler scripts/memory-monitor.py\n\n# Generate memory profile\nvalgrind --tool=massif python -m nginx_security_monitor\n\n# Analyze memory leaks\npython -m pympler.asizeof nginx_security_monitor\n</code></pre>"},{"location":"operations/performance-tuning/#cpu-optimization","title":"CPU Optimization","text":""},{"location":"operations/performance-tuning/#multi-threading-configuration","title":"Multi-threading Configuration","text":"<pre><code># CPU optimization settings\nprocessing:\n  threading:\n    model: \"thread_pool\"     # Use thread pool for I/O\n    worker_threads: 8        # Adjust based on CPU cores\n    cpu_affinity: true       # Bind threads to specific cores\n\n  parallelization:\n    log_reading: true        # Parallel log file reading\n    pattern_matching: true   # Parallel pattern processing\n    integration_calls: true  # Parallel integration requests\n\n  scheduling:\n    priority: \"high\"         # Process priority\n    nice_value: -5           # CPU scheduling priority\n</code></pre>"},{"location":"operations/performance-tuning/#cpu-profiling","title":"CPU Profiling","text":"<pre><code># Profile CPU usage\npython -m cProfile -o cpu.prof -m nginx_security_monitor\nsnakeviz cpu.prof\n\n# Monitor CPU per thread\ntop -H -p $(pgrep nginx-security-monitor)\n\n# Check CPU utilization\nsar -u 1 60\n</code></pre>"},{"location":"operations/performance-tuning/#network-performance","title":"Network Performance","text":""},{"location":"operations/performance-tuning/#network-optimization","title":"Network Optimization","text":"<pre><code># Network performance settings\nnetwork:\n  tcp:\n    keepalive: true\n    nodelay: true\n    buffer_size: \"64KB\"\n\n  http:\n    connection_pool: 100\n    timeout: 30\n    retry_attempts: 3\n\n  integrations:\n    batch_requests: true\n    compression: true\n    persistent_connections: true\n</code></pre>"},{"location":"operations/performance-tuning/#network-monitoring","title":"Network Monitoring","text":"<pre><code># Monitor network performance\niftop -i eth0\nnetstat -i\nss -tuln\n\n# Check network latency\nping -c 10 integration-endpoint.example.com\ntraceroute integration-endpoint.example.com\n</code></pre>"},{"location":"operations/performance-tuning/#storage-io-optimization","title":"Storage I/O Optimization","text":""},{"location":"operations/performance-tuning/#storage-configuration","title":"Storage Configuration","text":"<pre><code># Storage optimization\nstorage:\n  log_files:\n    read_ahead: \"1MB\"\n    buffer_size: \"64KB\"\n    use_mmap: true           # Memory-mapped file access\n\n  databases:\n    wal_mode: true           # Write-ahead logging\n    cache_size: \"256MB\"      # Database cache\n    synchronous: \"normal\"    # Balance safety and performance\n\n  temp_files:\n    location: \"/tmp\"         # Use tmpfs for temporary files\n    cleanup_interval: \"1h\"   # Regular cleanup\n</code></pre>"},{"location":"operations/performance-tuning/#io-monitoring","title":"I/O Monitoring","text":"<pre><code># Monitor I/O performance\niostat -x 1\niotop -a\n\n# Check disk usage\ndf -h\ndu -sh /var/log/nginx-security-monitor/\n\n# Monitor file descriptors\nlsof -p $(pgrep nginx-security-monitor)\n</code></pre>"},{"location":"operations/performance-tuning/#performance-tuning-strategies","title":"Performance Tuning Strategies","text":""},{"location":"operations/performance-tuning/#1-baseline-performance-testing","title":"1. Baseline Performance Testing","text":"<pre><code># Establish baseline metrics\npython scripts/benchmark.py --duration 300 --log-rate 1000\n\n# Load testing\npython scripts/load-test.py --concurrent-logs 10000 --duration 600\n\n# Stress testing\npython scripts/stress-test.py --max-load --duration 1800\n</code></pre>"},{"location":"operations/performance-tuning/#2-iterative-optimization","title":"2. Iterative Optimization","text":"<pre><code># Step 1: Identify bottlenecks\npython scripts/profile-bottlenecks.py\n\n# Step 2: Apply optimizations\npython scripts/apply-optimizations.py --config optimized.yaml\n\n# Step 3: Measure improvements\npython scripts/compare-performance.py --before baseline.json --after optimized.json\n</code></pre>"},{"location":"operations/performance-tuning/#3-configuration-tuning","title":"3. Configuration Tuning","text":"<pre><code># Production-optimized configuration\nperformance:\n  mode: \"high_throughput\"   # vs \"low_latency\" or \"balanced\"\n\n  log_processing:\n    batch_size: 5000        # Larger batches for throughput\n    worker_threads: 16      # Scale with CPU cores\n\n  pattern_matching:\n    algorithm: \"aho_corasick\"  # Efficient multi-pattern matching\n    optimization_level: 3      # Maximum optimization\n\n  memory:\n    prealloc_size: \"1GB\"    # Pre-allocate memory\n    gc_threshold: \"512MB\"   # Adjust garbage collection\n</code></pre>"},{"location":"operations/performance-tuning/#scaling-strategies","title":"Scaling Strategies","text":""},{"location":"operations/performance-tuning/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code># Multi-instance configuration\nscaling:\n  instances: 4\n  load_balancing:\n    algorithm: \"round_robin\"\n    health_checks: true\n\n  data_partitioning:\n    strategy: \"log_source\"   # Partition by log file\n    sharding_key: \"server_ip\"\n\n  coordination:\n    service_discovery: \"consul\"\n    configuration_sync: true\n</code></pre>"},{"location":"operations/performance-tuning/#vertical-scaling","title":"Vertical Scaling","text":"<pre><code># Increase system resources\n# CPU: Add more cores or faster processors\n# Memory: Increase RAM allocation\n# Storage: Use faster SSDs or NVMe drives\n# Network: Upgrade to higher bandwidth interfaces\n\n# System tuning for larger resources\necho 'kernel.shmmax = 1073741824' &gt;&gt; /etc/sysctl.conf\necho 'fs.file-max = 1000000' &gt;&gt; /etc/sysctl.conf\nulimit -n 65536\n</code></pre>"},{"location":"operations/performance-tuning/#performance-troubleshooting","title":"Performance Troubleshooting","text":""},{"location":"operations/performance-tuning/#common-performance-issues","title":"Common Performance Issues","text":"<ol> <li> <p>High CPU Usage <pre><code># Check pattern complexity\npython scripts/analyze-patterns.py --complexity\n\n# Optimize regex patterns\npython scripts/optimize-patterns.py --input patterns.json\n</code></pre></p> </li> <li> <p>Memory Leaks <pre><code># Monitor memory growth\npython scripts/memory-leak-detector.py --duration 3600\n\n# Analyze heap dumps\npython scripts/analyze-heap.py --dump memory.dump\n</code></pre></p> </li> <li> <p>I/O Bottlenecks <pre><code># Check I/O wait times\niostat -x 1 | grep -E '(avg|Device)'\n\n# Optimize file access patterns\npython scripts/optimize-io.py --profile io-profile.json\n</code></pre></p> </li> </ol>"},{"location":"operations/performance-tuning/#performance-debugging","title":"Performance Debugging","text":"<pre><code># Enable performance debugging\nexport NSM_PERFORMANCE_DEBUG=true\nexport NSM_PROFILE_OUTPUT=/tmp/nsm-profile.json\n\n# Collect performance data\npython -m nginx_security_monitor --performance-mode\n\n# Analyze performance data\npython scripts/analyze-performance.py --profile /tmp/nsm-profile.json\n</code></pre>"},{"location":"operations/performance-tuning/#benchmark-results","title":"Benchmark Results","text":""},{"location":"operations/performance-tuning/#reference-performance","title":"Reference Performance","text":"Configuration Log Rate (entries/sec) Memory Usage CPU Usage Latency Basic 1,000 128MB 25% 100ms Optimized 10,000 256MB 50% 50ms High-Perf 50,000 512MB 80% 20ms"},{"location":"operations/performance-tuning/#performance-targets","title":"Performance Targets","text":"<ul> <li>Throughput: &gt; 10,000 log entries/second</li> <li>Latency: &lt; 100ms average response time</li> <li>Memory: &lt; 512MB steady-state usage</li> <li>CPU: &lt; 70% average utilization</li> <li>Availability: &gt; 99.9% uptime</li> </ul>"},{"location":"operations/performance-tuning/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"operations/performance-tuning/#performance-alerts","title":"Performance Alerts","text":"<pre><code># Performance alerting configuration\nalerts:\n  performance:\n    log_processing_slow:\n      threshold: 1000  # entries/second\n      duration: \"5m\"\n      severity: \"warning\"\n\n    high_memory_usage:\n      threshold: \"80%\"\n      duration: \"10m\"\n      severity: \"critical\"\n\n    response_time_high:\n      threshold: \"500ms\"\n      duration: \"2m\"\n      severity: \"warning\"\n</code></pre>"},{"location":"operations/performance-tuning/#performance-dashboards","title":"Performance Dashboards","text":"<pre><code># Grafana dashboard setup\ncp templates/grafana-dashboard.json /etc/grafana/dashboards/\n\n# Prometheus metrics endpoint\ncurl http://localhost:8080/metrics\n\n# Custom performance dashboard\npython scripts/create-dashboard.py --template performance\n</code></pre> <p>Related Documentation: - Operations Guide - Monitoring Guide - Configuration Guide - Troubleshooting</p>"},{"location":"process/code-review/","title":"Code Review","text":"<p>This file was automatically generated to fix broken links.</p>"},{"location":"process/code-review/#overview","title":"Overview","text":"<p>This document is currently under development. Please check back later for content.</p>"},{"location":"process/code-review/#todo","title":"TODO","text":"<ul> <li> Add content for Code Review</li> <li> Review and update documentation</li> <li> Add cross-references to related documents</li> </ul>"},{"location":"process/code-review/#related-documents","title":"Related Documents","text":"<ul> <li>Main Documentation</li> <li>Contributing Guidelines</li> </ul> <p>Last updated: 2025-07-20</p>"},{"location":"process/releases/","title":"Macro Rendering Error","text":"<p>File: <code>process/releases.md</code></p> <p>UndefinedError: 'secrets' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/Users/conor/Sites/nginx-security-monitor/.venv/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 688, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/Users/conor/Sites/nginx-security-monitor/.venv/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/Users/conor/Sites/nginx-security-monitor/.venv/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 342, in top-level template code\n  File \"/Users/conor/Sites/nginx-security-monitor/.venv/lib/python3.13/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\njinja2.exceptions.UndefinedError: 'secrets' is undefined\n</code></pre>"},{"location":"security/best-practices/","title":"Security Best Practices","text":"<p>This guide provides comprehensive security recommendations for deploying and operating Nginx Security Monitor in production environments.</p>"},{"location":"security/best-practices/#security-architecture-overview","title":"Security Architecture Overview","text":"<p>Nginx Security Monitor implements multiple layers of security:</p> <ol> <li>Input Validation: All log data and configuration inputs are validated</li> <li>Encryption: Sensitive data encrypted at rest and in transit</li> <li>Access Control: Role-based access control and least privilege principles</li> <li>Audit Logging: Comprehensive security event logging</li> <li>Network Security: Secure communication protocols and network segmentation</li> </ol>"},{"location":"security/best-practices/#installation-security","title":"Installation Security","text":""},{"location":"security/best-practices/#system-hardening","title":"System Hardening","text":"<pre><code># Run the provided hardening script\nsudo ./harden.sh\n\n# This script configures:\n# - Secure file permissions\n# - User account restrictions\n# - Network security settings\n# - System auditing\n</code></pre>"},{"location":"security/best-practices/#secure-installation","title":"Secure Installation","text":"<pre><code># Install with security hardening\nsudo ./install.sh --secure\n\n# Verify security configuration\nsudo ./scripts/security-audit.sh\n</code></pre>"},{"location":"security/best-practices/#file-system-security","title":"File System Security","text":"<pre><code># Set proper ownership and permissions\nsudo chown -R nsm:nsm /etc/nginx-security-monitor/\nsudo chmod 750 /etc/nginx-security-monitor/\nsudo chmod 640 /etc/nginx-security-monitor/config/*.yaml\nsudo chmod 600 /etc/nginx-security-monitor/keys/*\n\n# Protect log directories\nsudo chown nsm:adm /var/log/nginx-security-monitor/\nsudo chmod 750 /var/log/nginx-security-monitor/\n</code></pre>"},{"location":"security/best-practices/#configuration-security","title":"Configuration Security","text":""},{"location":"security/best-practices/#encryption-configuration","title":"Encryption Configuration","text":"<pre><code># config/security.yaml\nsecurity:\n  encryption:\n    enabled: true\n    algorithm: \"AES-256-GCM\"\n    key_file: \"/etc/nginx-security-monitor/keys/encryption.key\"\n    rotate_interval: \"30d\"\n\n  patterns:\n    encrypt_storage: true\n    integrity_check: true\n    signature_validation: true\n\n  communications:\n    tls_version: \"1.3\"\n    cipher_suites:\n      - \"TLS_AES_256_GCM_SHA384\"\n      - \"TLS_CHACHA20_POLY1305_SHA256\"\n    certificate_validation: true\n</code></pre>"},{"location":"security/best-practices/#key-management","title":"Key Management","text":"<pre><code># Generate encryption keys\npython encrypt_config.py --generate-key --key-file /etc/nginx-security-monitor/keys/encryption.key\n\n# Set secure permissions\nsudo chown nsm:nsm /etc/nginx-security-monitor/keys/encryption.key\nsudo chmod 600 /etc/nginx-security-monitor/keys/encryption.key\n\n# Key rotation\npython encrypt_config.py --rotate-key --backup-old-key\n</code></pre>"},{"location":"security/best-practices/#secure-configuration-templates","title":"Secure Configuration Templates","text":"<pre><code># Production security configuration\nsecurity:\n  authentication:\n    required: true\n    method: \"certificate\"  # or \"token\", \"oauth2\"\n    certificate_file: \"/etc/ssl/certs/nsm-client.crt\"\n    private_key_file: \"/etc/ssl/private/nsm-client.key\"\n\n  authorization:\n    rbac_enabled: true\n    default_role: \"readonly\"\n    admin_users:\n      - \"admin@example.com\"\n\n  audit:\n    enabled: true\n    log_file: \"/var/log/nginx-security-monitor/audit.log\"\n    log_level: \"INFO\"\n    include_patterns:\n      - \"config_change\"\n      - \"access_denied\"\n      - \"pattern_match\"\n      - \"integration_error\"\n</code></pre>"},{"location":"security/best-practices/#network-security","title":"Network Security","text":""},{"location":"security/best-practices/#tls-configuration","title":"TLS Configuration","text":"<pre><code># Secure communication settings\nintegrations:\n  webhooks:\n    tls:\n      verify_certificates: true\n      min_version: \"1.2\"\n      cipher_suites: \"ECDHE-RSA-AES256-GCM-SHA384\"\n\n  email:\n    smtp:\n      starttls: true\n      verify_certificates: true\n\n  syslog:\n    tls_enabled: true\n    certificate_file: \"/etc/ssl/certs/syslog-client.crt\"\n</code></pre>"},{"location":"security/best-practices/#firewall-configuration","title":"Firewall Configuration","text":"<pre><code># UFW rules\nsudo ufw allow from 192.168.1.0/24 to any port 8080\nsudo ufw allow from 10.0.0.0/8 to any port 514\nsudo ufw deny 8080\nsudo ufw deny 514\n\n# iptables rules\nsudo iptables -A INPUT -p tcp --dport 8080 -s 192.168.1.0/24 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8080 -j DROP\n</code></pre>"},{"location":"security/best-practices/#network-segmentation","title":"Network Segmentation","text":"<ul> <li>Management Network: Configuration and monitoring access</li> <li>Log Collection Network: Nginx log data ingestion</li> <li>Alert Network: Outbound notifications and integrations</li> <li>DMZ: Public-facing monitoring interfaces (if needed)</li> </ul>"},{"location":"security/best-practices/#access-control","title":"Access Control","text":""},{"location":"security/best-practices/#user-management","title":"User Management","text":"<pre><code># Create dedicated service user\nsudo useradd -r -s /usr/sbin/nologin -d /var/lib/nginx-security-monitor nsm\n\n# Add user to required groups\nsudo usermod -a -G adm,syslog nsm\n\n# Lock user account for security\nsudo passwd -l nsm\n</code></pre>"},{"location":"security/best-practices/#role-based-access-control","title":"Role-Based Access Control","text":"<pre><code># RBAC configuration\nauthorization:\n  roles:\n    admin:\n      permissions:\n        - \"config:read\"\n        - \"config:write\"\n        - \"patterns:read\"\n        - \"patterns:write\"\n        - \"alerts:read\"\n        - \"audit:read\"\n\n    operator:\n      permissions:\n        - \"config:read\"\n        - \"patterns:read\"\n        - \"alerts:read\"\n\n    readonly:\n      permissions:\n        - \"status:read\"\n        - \"metrics:read\"\n\n  users:\n    \"admin@example.com\":\n      role: \"admin\"\n      certificate_dn: \"CN=admin,O=Example Corp\"\n\n    \"operator@example.com\":\n      role: \"operator\"\n      certificate_dn: \"CN=operator,O=Example Corp\"\n</code></pre>"},{"location":"security/best-practices/#runtime-security","title":"Runtime Security","text":""},{"location":"security/best-practices/#process-security","title":"Process Security","text":"<pre><code># Systemd security features\n[Service]\nUser=nsm\nGroup=nsm\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/var/log/nginx-security-monitor\nCapabilityBoundingSet=CAP_DAC_OVERRIDE\nSystemCallFilter=@system-service\nSystemCallFilter=~@privileged @resources\n</code></pre>"},{"location":"security/best-practices/#container-security","title":"Container Security","text":"<pre><code># Secure Dockerfile practices\nFROM python:3.9-slim\n\n# Create non-root user\nRUN groupadd -r nsm &amp;&amp; useradd -r -g nsm nsm\n\n# Set security options\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy and set permissions\nCOPY --chown=nsm:nsm . /app\nWORKDIR /app\n\n# Switch to non-root user\nUSER nsm\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD python -c \"import requests; requests.get('http://localhost:8080/health')\"\n</code></pre>"},{"location":"security/best-practices/#resource-limits","title":"Resource Limits","text":"<pre><code># Resource constraints\nlimits:\n  memory:\n    max_usage: \"512MB\"\n    warning_threshold: \"80%\"\n\n  cpu:\n    max_usage: \"2 cores\"\n    priority: \"normal\"\n\n  disk:\n    log_rotation: \"daily\"\n    max_log_size: \"100MB\"\n    retention_days: 30\n\n  network:\n    max_connections: 100\n    rate_limit: \"1000/minute\"\n</code></pre>"},{"location":"security/best-practices/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"security/best-practices/#security-monitoring","title":"Security Monitoring","text":"<pre><code># Security monitoring configuration\nmonitoring:\n  security_events:\n    - \"failed_authentication\"\n    - \"unauthorized_access\"\n    - \"configuration_change\"\n    - \"pattern_tampering\"\n    - \"integration_failure\"\n\n  thresholds:\n    failed_auth_rate: 5  # per minute\n    config_changes: 1    # per hour\n    pattern_violations: 10  # per minute\n\n  alerts:\n    security_team: \"security@example.com\"\n    escalation_time: \"15m\"\n    severity_levels: [\"critical\", \"high\", \"medium\", \"low\"]\n</code></pre>"},{"location":"security/best-practices/#audit-logging","title":"Audit Logging","text":"<pre><code># Comprehensive audit configuration\naudit:\n  enabled: true\n  format: \"json\"\n  include_metadata: true\n\n  events:\n    authentication:\n      success: true\n      failure: true\n\n    authorization:\n      granted: true\n      denied: true\n\n    configuration:\n      read: false\n      write: true\n      delete: true\n\n    patterns:\n      match: true\n      update: true\n\n    integrations:\n      connect: true\n      error: true\n</code></pre>"},{"location":"security/best-practices/#incident-response","title":"Incident Response","text":""},{"location":"security/best-practices/#security-incident-procedures","title":"Security Incident Procedures","text":"<ol> <li>Detection and Analysis</li> <li>Monitor security alerts</li> <li>Analyze threat indicators</li> <li> <p>Assess impact and scope</p> </li> <li> <p>Containment</p> </li> <li>Isolate affected systems</li> <li>Prevent further compromise</li> <li> <p>Preserve evidence</p> </li> <li> <p>Eradication and Recovery</p> </li> <li>Remove threats</li> <li>Restore systems</li> <li> <p>Implement additional controls</p> </li> <li> <p>Post-Incident Activities</p> </li> <li>Document lessons learned</li> <li>Update security controls</li> <li>Conduct security review</li> </ol>"},{"location":"security/best-practices/#emergency-response","title":"Emergency Response","text":"<pre><code># Emergency lockdown\nsudo systemctl stop nginx-security-monitor\nsudo iptables -A INPUT -p tcp --dport 8080 -j DROP\n\n# Forensic data collection\nsudo tar -czf incident-$(date +%Y%m%d-%H%M%S).tar.gz \\\n  /var/log/nginx-security-monitor/ \\\n  /etc/nginx-security-monitor/config/ \\\n  /var/log/audit/\n\n# System isolation\nsudo iptables -P INPUT DROP\nsudo iptables -P FORWARD DROP\nsudo iptables -P OUTPUT DROP\n</code></pre>"},{"location":"security/best-practices/#compliance-and-standards","title":"Compliance and Standards","text":""},{"location":"security/best-practices/#security-frameworks","title":"Security Frameworks","text":"<ul> <li>NIST Cybersecurity Framework: Identify, Protect, Detect, Respond, Recover</li> <li>ISO 27001: Information Security Management System</li> <li>CIS Controls: Critical Security Controls</li> <li>OWASP: Web Application Security</li> </ul>"},{"location":"security/best-practices/#compliance-requirements","title":"Compliance Requirements","text":"<pre><code># Compliance configuration\ncompliance:\n  frameworks:\n    - \"SOC2\"\n    - \"ISO27001\"\n    - \"GDPR\"\n    - \"HIPAA\"\n\n  controls:\n    data_encryption: true\n    access_logging: true\n    user_authentication: true\n    data_retention: \"5 years\"\n\n  reporting:\n    frequency: \"monthly\"\n    format: \"json\"\n    recipients:\n      - \"compliance@example.com\"\n      - \"security@example.com\"\n</code></pre>"},{"location":"security/best-practices/#security-testing","title":"Security Testing","text":""},{"location":"security/best-practices/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<pre><code># Security scanning\nnmap -sS -O target-server\nnikto -h http://target-server:8080\nsqlmap -u \"http://target-server:8080/api/config\"\n\n# Dependency scanning\nsafety check\nbandit -r src/\n\n# Container scanning\ndocker scan nginx-security-monitor:latest\n</code></pre>"},{"location":"security/best-practices/#penetration-testing","title":"Penetration Testing","text":"<pre><code># Test authentication bypass\ncurl -X POST http://target:8080/api/config \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"test\": \"unauthorized\"}'\n\n# Test injection attacks\ncurl http://target:8080/api/search?q='; DROP TABLE patterns; --\n\n# Test privilege escalation\ncurl -X PUT http://target:8080/api/users/admin \\\n  -H \"Authorization: Bearer low-priv-token\"\n</code></pre>"},{"location":"security/best-practices/#regular-security-tasks","title":"Regular Security Tasks","text":""},{"location":"security/best-practices/#daily-tasks","title":"Daily Tasks","text":"<ul> <li>Monitor security alerts</li> <li>Review audit logs</li> <li>Check system integrity</li> <li>Verify backup completion</li> </ul>"},{"location":"security/best-practices/#weekly-tasks","title":"Weekly Tasks","text":"<ul> <li>Review user access</li> <li>Update threat patterns</li> <li>Check certificate expiration</li> <li>Analyze security metrics</li> </ul>"},{"location":"security/best-practices/#monthly-tasks","title":"Monthly Tasks","text":"<ul> <li>Security patch updates</li> <li>Vulnerability assessments</li> <li>Access control review</li> <li>Incident response testing</li> </ul>"},{"location":"security/best-practices/#quarterly-tasks","title":"Quarterly Tasks","text":"<ul> <li>Security architecture review</li> <li>Penetration testing</li> <li>Compliance audits</li> <li>Security training updates</li> </ul>"},{"location":"security/best-practices/#emergency-contacts","title":"Emergency Contacts","text":"<pre><code># Emergency contact configuration\nemergency_contacts:\n  security_team:\n    email: \"security@example.com\"\n    phone: \"+1-555-SECURITY\"\n    escalation_time: \"15 minutes\"\n\n  incident_response:\n    email: \"ir@example.com\"\n    phone: \"+1-555-INCIDENT\"\n    24x7: true\n\n  vendor_support:\n    email: \"support@nginx-security-monitor.com\"\n    phone: \"+1-555-SUPPORT\"\n    hours: \"business\"\n</code></pre> <p>Related Documentation: - Security Features - Encryption Guide - Configuration Guide - Operations Guide</p>"},{"location":"troubleshooting/common-issues/","title":"Common Issues and Solutions","text":"<p>This guide provides solutions to frequently encountered issues with Nginx Security Monitor, organized by category with automated problem detection and troubleshooting decision trees.</p>"},{"location":"troubleshooting/common-issues/#quick-problem-detection","title":"Quick Problem Detection","text":""},{"location":"troubleshooting/common-issues/#automated-diagnostic-script","title":"Automated Diagnostic Script","text":"<pre><code>#!/bin/bash\n# scripts/diagnose_issues.py\n\n#!/usr/bin/env python3\nimport subprocess\nimport json\nimport sys\nimport os\nimport requests\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple\n\nclass NSMDiagnostics:\n    def __init__(self):\n        self.issues = []\n        self.config_path = \"/etc/nginx-security-monitor\"\n        self.log_path = \"/var/log/nginx-security-monitor\"\n        self.service_name = \"nginx-security-monitor\"\n\n    def run_full_diagnostic(self) -&gt; Dict:\n        \"\"\"Run complete diagnostic check\"\"\"\n        print(\"\ud83d\udd0d Running Nginx Security Monitor diagnostics...\")\n\n        checks = [\n            (\"Service Status\", self.check_service_status),\n            (\"Configuration\", self.check_configuration),\n            (\"Log Files\", self.check_log_files),\n            (\"Permissions\", self.check_permissions),\n            (\"Network Connectivity\", self.check_network),\n            (\"Dependencies\", self.check_dependencies),\n            (\"Performance\", self.check_performance),\n            (\"Integration Status\", self.check_integrations)\n        ]\n\n        results = {}\n        for check_name, check_func in checks:\n            print(f\"  Checking {check_name}...\")\n            try:\n                result = check_func()\n                results[check_name] = result\n                if not result.get('status', True):\n                    print(f\"    \u274c {result.get('message', 'Failed')}\")\n                else:\n                    print(f\"    \u2705 OK\")\n            except Exception as e:\n                results[check_name] = {\n                    'status': False,\n                    'message': f\"Check failed: {str(e)}\",\n                    'error': str(e)\n                }\n                print(f\"    \u274c Error: {e}\")\n\n        return results\n\n    def check_service_status(self) -&gt; Dict:\n        \"\"\"Check if service is running and healthy\"\"\"\n        try:\n            # Check systemd status\n            result = subprocess.run([\n                \"systemctl\", \"is-active\", self.service_name\n            ], capture_output=True, text=True)\n\n            if result.returncode != 0:\n                return {\n                    'status': False,\n                    'message': f\"Service {self.service_name} is not active\",\n                    'systemctl_status': result.stdout.strip(),\n                    'solution': 'service_not_running'\n                }\n\n            # Check health endpoint\n            try:\n                response = requests.get('http://localhost:8080/health', timeout=5)\n                if response.status_code != 200:\n                    return {\n                        'status': False,\n                        'message': f\"Health check failed: HTTP {response.status_code}\",\n                        'solution': 'health_check_failed'\n                    }\n            except requests.exceptions.RequestException as e:\n                return {\n                    'status': False,\n                    'message': f\"Cannot connect to health endpoint: {e}\",\n                    'solution': 'health_endpoint_unreachable'\n                }\n\n            return {'status': True, 'message': 'Service is running and healthy'}\n\n        except Exception as e:\n            return {\n                'status': False,\n                'message': f\"Failed to check service status: {e}\",\n                'solution': 'check_service_manually'\n            }\n\n    def check_configuration(self) -&gt; Dict:\n        \"\"\"Check configuration files\"\"\"\n        config_file = Path(self.config_path) / \"config\" / \"settings.yaml\"\n\n        if not config_file.exists():\n            return {\n                'status': False,\n                'message': f\"Configuration file not found: {config_file}\",\n                'solution': 'missing_config_file'\n            }\n\n        try:\n            # Test configuration loading\n            result = subprocess.run([\n                \"python\", \"-m\", \"nginx_security_monitor.config\", \"validate\",\n                \"--config\", str(config_file)\n            ], capture_output=True, text=True)\n\n            if result.returncode != 0:\n                return {\n                    'status': False,\n                    'message': f\"Configuration validation failed: {result.stderr}\",\n                    'solution': 'invalid_configuration'\n                }\n\n            return {'status': True, 'message': 'Configuration is valid'}\n\n        except Exception as e:\n            return {\n                'status': False,\n                'message': f\"Failed to validate configuration: {e}\",\n                'solution': 'config_validation_error'\n            }\n\n    def check_log_files(self) -&gt; Dict:\n        \"\"\"Check log file access and disk space\"\"\"\n        issues = []\n\n        # Check log directory\n        log_dir = Path(self.log_path)\n        if not log_dir.exists():\n            issues.append(\"Log directory does not exist\")\n        elif not os.access(log_dir, os.W_OK):\n            issues.append(\"Log directory is not writable\")\n\n        # Check disk space\n        try:\n            result = subprocess.run([\n                \"df\", \"-h\", str(log_dir)\n            ], capture_output=True, text=True)\n\n            lines = result.stdout.strip().split('\\n')\n            if len(lines) &gt; 1:\n                usage_line = lines[1].split()\n                if len(usage_line) &gt;= 5:\n                    usage_percent = int(usage_line[4].rstrip('%'))\n                    if usage_percent &gt; 90:\n                        issues.append(f\"Disk usage is {usage_percent}% (critical)\")\n                    elif usage_percent &gt; 80:\n                        issues.append(f\"Disk usage is {usage_percent}% (warning)\")\n        except:\n            issues.append(\"Could not check disk space\")\n\n        # Check nginx log access\n        nginx_log = Path(\"/var/log/nginx/access.log\")\n        if nginx_log.exists() and not os.access(nginx_log, os.R_OK):\n            issues.append(\"Cannot read nginx access log\")\n\n        if issues:\n            return {\n                'status': False,\n                'message': f\"Log file issues: {', '.join(issues)}\",\n                'issues': issues,\n                'solution': 'log_file_issues'\n            }\n\n        return {'status': True, 'message': 'Log files accessible'}\n\n    def check_permissions(self) -&gt; Dict:\n        \"\"\"Check file and directory permissions\"\"\"\n        permission_checks = [\n            (self.config_path, \"nsm\", \"nsm\", 0o750),\n            (f\"{self.config_path}/config\", \"nsm\", \"nsm\", 0o750),\n            (f\"{self.config_path}/keys\", \"nsm\", \"nsm\", 0o700),\n            (self.log_path, \"nsm\", \"adm\", 0o750)\n        ]\n\n        issues = []\n        for path, expected_user, expected_group, expected_mode in permission_checks:\n            if not Path(path).exists():\n                continue\n\n            try:\n                stat_info = os.stat(path)\n\n                # Check ownership (simplified - would need pwd/grp modules for full check)\n                actual_mode = stat_info.st_mode &amp; 0o777\n                if actual_mode != expected_mode:\n                    issues.append(f\"{path} has mode {oct(actual_mode)}, expected {oct(expected_mode)}\")\n\n            except Exception as e:\n                issues.append(f\"Cannot check permissions for {path}: {e}\")\n\n        if issues:\n            return {\n                'status': False,\n                'message': f\"Permission issues: {', '.join(issues)}\",\n                'solution': 'fix_permissions'\n            }\n\n        return {'status': True, 'message': 'Permissions are correct'}\n\n    def check_network(self) -&gt; Dict:\n        \"\"\"Check network connectivity\"\"\"\n        issues = []\n\n        # Check if port 8080 is listening\n        try:\n            result = subprocess.run([\n                \"netstat\", \"-ln\"\n            ], capture_output=True, text=True)\n\n            if \":8080\" not in result.stdout:\n                issues.append(\"Port 8080 is not listening\")\n        except:\n            issues.append(\"Cannot check network ports\")\n\n        # Check external connectivity (if configured)\n        external_endpoints = [\n            \"https://api.github.com\",  # Example external endpoint\n        ]\n\n        for endpoint in external_endpoints:\n            try:\n                response = requests.get(endpoint, timeout=5)\n                if response.status_code != 200:\n                    issues.append(f\"Cannot reach {endpoint}\")\n            except:\n                issues.append(f\"Network connectivity issue with {endpoint}\")\n\n        if issues:\n            return {\n                'status': False,\n                'message': f\"Network issues: {', '.join(issues)}\",\n                'solution': 'network_connectivity_issues'\n            }\n\n        return {'status': True, 'message': 'Network connectivity OK'}\n\n    def check_dependencies(self) -&gt; Dict:\n        \"\"\"Check Python dependencies\"\"\"\n        try:\n            import nginx_security_monitor\n\n            # Check key dependencies\n            required_modules = [\n                'yaml', 'requests', 'cryptography', \n                'prometheus_client', 'aiofiles'\n            ]\n\n            missing = []\n            for module in required_modules:\n                try:\n                    __import__(module)\n                except ImportError:\n                    missing.append(module)\n\n            if missing:\n                return {\n                    'status': False,\n                    'message': f\"Missing dependencies: {', '.join(missing)}\",\n                    'solution': 'install_dependencies'\n                }\n\n            return {'status': True, 'message': 'All dependencies available'}\n\n        except ImportError:\n            return {\n                'status': False,\n                'message': \"nginx_security_monitor module not found\",\n                'solution': 'install_nsm_package'\n            }\n\n    def check_performance(self) -&gt; Dict:\n        \"\"\"Check basic performance metrics\"\"\"\n        try:\n            # Check CPU usage\n            result = subprocess.run([\n                \"ps\", \"aux\"\n            ], capture_output=True, text=True)\n\n            nsm_processes = [line for line in result.stdout.split('\\n') \n                           if 'nginx-security-monitor' in line]\n\n            if nsm_processes:\n                # Parse CPU usage (simplified)\n                cpu_usage = float(nsm_processes[0].split()[2])\n                if cpu_usage &gt; 80:\n                    return {\n                        'status': False,\n                        'message': f\"High CPU usage: {cpu_usage}%\",\n                        'solution': 'high_cpu_usage'\n                    }\n\n            return {'status': True, 'message': 'Performance OK'}\n\n        except Exception as e:\n            return {\n                'status': False,\n                'message': f\"Cannot check performance: {e}\",\n                'solution': 'performance_check_failed'\n            }\n\n    def check_integrations(self) -&gt; Dict:\n        \"\"\"Check integration status\"\"\"\n        try:\n            response = requests.get('http://localhost:8080/integrations/status', timeout=5)\n            if response.status_code == 200:\n                status_data = response.json()\n\n                failed_integrations = [\n                    name for name, status in status_data.items() \n                    if not status.get('connected', False)\n                ]\n\n                if failed_integrations:\n                    return {\n                        'status': False,\n                        'message': f\"Failed integrations: {', '.join(failed_integrations)}\",\n                        'solution': 'integration_failures'\n                    }\n\n                return {'status': True, 'message': 'All integrations healthy'}\n            else:\n                return {\n                    'status': False,\n                    'message': f\"Cannot get integration status: HTTP {response.status_code}\",\n                    'solution': 'integration_status_unavailable'\n                }\n\n        except Exception as e:\n            return {\n                'status': False,\n                'message': f\"Integration check failed: {e}\",\n                'solution': 'integration_check_error'\n            }\n\n    def get_solutions(self, diagnostic_results: Dict) -&gt; Dict:\n        \"\"\"Get solutions for detected issues\"\"\"\n        solutions = {\n            'service_not_running': {\n                'title': 'Service Not Running',\n                'description': 'The nginx-security-monitor service is not active',\n                'steps': [\n                    'sudo systemctl start nginx-security-monitor',\n                    'sudo systemctl enable nginx-security-monitor',\n                    'Check logs: sudo journalctl -u nginx-security-monitor -f'\n                ]\n            },\n            'health_check_failed': {\n                'title': 'Health Check Failed',\n                'description': 'Service is running but health endpoint returns error',\n                'steps': [\n                    'Check configuration: python -m nginx_security_monitor.config validate',\n                    'Check logs: tail -f /var/log/nginx-security-monitor/app.log',\n                    'Restart service: sudo systemctl restart nginx-security-monitor'\n                ]\n            },\n            'missing_config_file': {\n                'title': 'Missing Configuration File',\n                'description': 'Configuration file not found',\n                'steps': [\n                    'Copy example config: cp config/settings.yaml.example /etc/nginx-security-monitor/config/settings.yaml',\n                    'Edit configuration: sudo vim /etc/nginx-security-monitor/config/settings.yaml',\n                    'Set proper permissions: sudo chown nsm:nsm /etc/nginx-security-monitor/config/settings.yaml'\n                ]\n            },\n            'log_file_issues': {\n                'title': 'Log File Access Issues',\n                'description': 'Problems with log file access or disk space',\n                'steps': [\n                    'Create log directory: sudo mkdir -p /var/log/nginx-security-monitor',\n                    'Fix permissions: sudo chown nsm:adm /var/log/nginx-security-monitor',\n                    'Check disk space: df -h /var/log',\n                    'Clean old logs: sudo find /var/log -name \"*.log.*\" -mtime +30 -delete'\n                ]\n            },\n            'fix_permissions': {\n                'title': 'Fix File Permissions',\n                'description': 'Incorrect file or directory permissions',\n                'steps': [\n                    'Run permission fix script: sudo ./scripts/fix-permissions.sh',\n                    'Or manually fix: sudo chown -R nsm:nsm /etc/nginx-security-monitor',\n                    'Set directory permissions: sudo chmod 750 /etc/nginx-security-monitor',\n                    'Set file permissions: sudo chmod 640 /etc/nginx-security-monitor/config/*.yaml'\n                ]\n            }\n        }\n\n        applicable_solutions = {}\n        for check_name, result in diagnostic_results.items():\n            if not result.get('status', True) and 'solution' in result:\n                solution_key = result['solution']\n                if solution_key in solutions:\n                    applicable_solutions[solution_key] = solutions[solution_key]\n\n        return applicable_solutions\n\ndef main():\n    diagnostics = NSMDiagnostics()\n    results = diagnostics.run_full_diagnostic()\n\n    # Print summary\n    print(\"\\n\" + \"=\"*50)\n    print(\"DIAGNOSTIC SUMMARY\")\n    print(\"=\"*50)\n\n    failed_checks = [name for name, result in results.items() if not result.get('status', True)]\n\n    if not failed_checks:\n        print(\"\u2705 All checks passed!\")\n        sys.exit(0)\n    else:\n        print(f\"\u274c {len(failed_checks)} issue(s) detected:\")\n        for check in failed_checks:\n            print(f\"  - {check}: {results[check].get('message', 'Unknown error')}\")\n\n        # Show solutions\n        solutions = diagnostics.get_solutions(results)\n        if solutions:\n            print(\"\\n\" + \"=\"*50)\n            print(\"RECOMMENDED SOLUTIONS\")\n            print(\"=\"*50)\n\n            for solution_key, solution in solutions.items():\n                print(f\"\\n\ud83d\udd27 {solution['title']}\")\n                print(f\"   {solution['description']}\")\n                print(\"   Steps:\")\n                for step in solution['steps']:\n                    print(f\"   1. {step}\")\n\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"troubleshooting/common-issues/#issue-categories","title":"Issue Categories","text":""},{"location":"troubleshooting/common-issues/#1-service-and-startup-issues","title":"1. Service and Startup Issues","text":""},{"location":"troubleshooting/common-issues/#service-wont-start","title":"Service Won't Start","text":"<p>Symptoms: - <code>systemctl start nginx-security-monitor</code> fails - Service shows \"failed\" status - No response from health endpoint</p> <p>Common Causes &amp; Solutions:</p> <pre><code># Check service status\nsudo systemctl status nginx-security-monitor\n\n# Check logs for errors\nsudo journalctl -u nginx-security-monitor -n 50\n\n# Common fixes:\n# 1. Configuration errors\npython -m nginx_security_monitor.config validate\n\n# 2. Permission issues\nsudo chown -R nsm:nsm /etc/nginx-security-monitor/\nsudo chmod 640 /etc/nginx-security-monitor/config/*.yaml\n\n# 3. Missing dependencies\npip install -r requirements.txt\n\n# 4. Port conflicts\nsudo lsof -i :8080\nsudo systemctl stop conflicting-service\n</code></pre>"},{"location":"troubleshooting/common-issues/#service-starts-but-crashes","title":"Service Starts But Crashes","text":"<p>Symptoms: - Service starts then immediately stops - Crash logs in journal - Health endpoint unreachable</p> <p>Diagnostic Decision Tree:</p> <pre><code>Service Crashes\n\u251c\u2500\u2500 Check Configuration\n\u2502   \u251c\u2500\u2500 Invalid YAML \u2192 Fix syntax errors\n\u2502   \u251c\u2500\u2500 Missing files \u2192 Restore missing files\n\u2502   \u2514\u2500\u2500 Invalid values \u2192 Correct configuration values\n\u251c\u2500\u2500 Check Dependencies\n\u2502   \u251c\u2500\u2500 Missing modules \u2192 pip install requirements\n\u2502   \u251c\u2500\u2500 Version conflicts \u2192 Update dependencies\n\u2502   \u2514\u2500\u2500 System packages \u2192 Install system dependencies\n\u251c\u2500\u2500 Check Resources\n\u2502   \u251c\u2500\u2500 Out of memory \u2192 Increase memory limits\n\u2502   \u251c\u2500\u2500 No disk space \u2192 Clean up disk space\n\u2502   \u2514\u2500\u2500 File limits \u2192 Increase ulimits\n\u2514\u2500\u2500 Check Logs\n    \u251c\u2500\u2500 Python traceback \u2192 Fix code issues\n    \u251c\u2500\u2500 Permission denied \u2192 Fix permissions\n    \u2514\u2500\u2500 Network errors \u2192 Check network config\n</code></pre>"},{"location":"troubleshooting/common-issues/#2-configuration-issues","title":"2. Configuration Issues","text":""},{"location":"troubleshooting/common-issues/#invalid-configuration-errors","title":"Invalid Configuration Errors","text":"<p>Error Messages: <pre><code>ConfigurationError: Invalid pattern format in patterns.json\nyaml.scanner.ScannerError: mapping values are not allowed here\nFileNotFoundError: [Errno 2] No such file or directory: 'patterns.json'\n</code></pre></p> <p>Solutions: <pre><code># Validate configuration syntax\npython -m nginx_security_monitor.config validate\n\n# Check YAML syntax\npython -c \"import yaml; yaml.safe_load(open('config/settings.yaml'))\"\n\n# Validate JSON patterns\npython -c \"import json; json.load(open('config/patterns.json'))\"\n\n# Use configuration linter\n./scripts/lint-config.sh\n\n# Reset to default configuration\ncp config/settings.yaml.example config/settings.yaml\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#encryption-key-issues","title":"Encryption Key Issues","text":"<p>Symptoms: - Cannot decrypt patterns - Invalid key format errors - Permission denied accessing keys</p> <p>Solutions: <pre><code># Generate new encryption key\npython encrypt_config.py --generate-key\n\n# Check key permissions\nls -la /etc/nginx-security-monitor/keys/\nsudo chmod 600 /etc/nginx-security-monitor/keys/*\n\n# Re-encrypt patterns with new key\npython encrypt_config.py --encrypt-patterns --key-file /path/to/key\n\n# Test key validity\npython encrypt_config.py --test-key --key-file /path/to/key\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#3-performance-issues","title":"3. Performance Issues","text":""},{"location":"troubleshooting/common-issues/#high-cpu-usage","title":"High CPU Usage","text":"<p>Symptoms: - CPU usage &gt; 80% consistently - Slow response times - Log processing delays</p> <p>Performance Troubleshooting Script: <pre><code>#!/usr/bin/env python3\n# scripts/performance_troubleshoot.py\n\nimport psutil\nimport time\nimport requests\nimport statistics\nfrom typing import List, Dict\n\nclass PerformanceTroubleshooter:\n    def __init__(self):\n        self.process_name = \"nginx-security-monitor\"\n        self.measurements = []\n\n    def diagnose_performance(self) -&gt; Dict:\n        \"\"\"Diagnose performance issues\"\"\"\n        print(\"\ud83d\udd0d Diagnosing performance issues...\")\n\n        # Find NSM process\n        nsm_process = self.find_nsm_process()\n        if not nsm_process:\n            return {\"error\": \"NSM process not found\"}\n\n        # Collect metrics over time\n        self.collect_metrics(nsm_process, duration=60)\n\n        # Analyze results\n        analysis = self.analyze_metrics()\n\n        return {\n            \"process_info\": {\n                \"pid\": nsm_process.pid,\n                \"memory_mb\": nsm_process.memory_info().rss / 1024 / 1024,\n                \"cpu_percent\": nsm_process.cpu_percent()\n            },\n            \"analysis\": analysis,\n            \"recommendations\": self.get_recommendations(analysis)\n        }\n\n    def find_nsm_process(self):\n        \"\"\"Find the NSM process\"\"\"\n        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):\n            try:\n                if any('nginx-security-monitor' in str(item) for item in proc.info['cmdline']):\n                    return psutil.Process(proc.info['pid'])\n            except (psutil.NoSuchProcess, psutil.AccessDenied):\n                continue\n        return None\n\n    def collect_metrics(self, process, duration=60):\n        \"\"\"Collect performance metrics\"\"\"\n        print(f\"\ud83d\udcca Collecting metrics for {duration} seconds...\")\n\n        start_time = time.time()\n        while time.time() - start_time &lt; duration:\n            try:\n                # Process metrics\n                cpu_percent = process.cpu_percent()\n                memory_mb = process.memory_info().rss / 1024 / 1024\n\n                # System metrics\n                system_cpu = psutil.cpu_percent()\n                system_memory = psutil.virtual_memory().percent\n\n                # Application metrics\n                try:\n                    response = requests.get('http://localhost:8080/metrics', timeout=1)\n                    app_metrics = self.parse_prometheus_metrics(response.text)\n                except:\n                    app_metrics = {}\n\n                self.measurements.append({\n                    'timestamp': time.time(),\n                    'process_cpu': cpu_percent,\n                    'process_memory': memory_mb,\n                    'system_cpu': system_cpu,\n                    'system_memory': system_memory,\n                    'app_metrics': app_metrics\n                })\n\n                time.sleep(1)\n\n            except psutil.NoSuchProcess:\n                break\n\n    def parse_prometheus_metrics(self, metrics_text: str) -&gt; Dict:\n        \"\"\"Parse Prometheus metrics\"\"\"\n        metrics = {}\n        for line in metrics_text.split('\\n'):\n            if line.startswith('nsm_'):\n                parts = line.split()\n                if len(parts) &gt;= 2:\n                    metric_name = parts[0]\n                    try:\n                        metric_value = float(parts[1])\n                        metrics[metric_name] = metric_value\n                    except ValueError:\n                        continue\n        return metrics\n\n    def analyze_metrics(self) -&gt; Dict:\n        \"\"\"Analyze collected metrics\"\"\"\n        if not self.measurements:\n            return {\"error\": \"No measurements collected\"}\n\n        # Extract time series\n        cpu_usage = [m['process_cpu'] for m in self.measurements]\n        memory_usage = [m['process_memory'] for m in self.measurements]\n\n        analysis = {\n            'cpu': {\n                'avg': statistics.mean(cpu_usage),\n                'max': max(cpu_usage),\n                'p95': self.percentile(cpu_usage, 95)\n            },\n            'memory': {\n                'avg': statistics.mean(memory_usage),\n                'max': max(memory_usage),\n                'trend': self.calculate_trend(memory_usage)\n            },\n            'issues': []\n        }\n\n        # Identify issues\n        if analysis['cpu']['avg'] &gt; 70:\n            analysis['issues'].append('high_cpu_usage')\n\n        if analysis['memory']['max'] &gt; 1000:  # 1GB\n            analysis['issues'].append('high_memory_usage')\n\n        if analysis['memory']['trend'] &gt; 0.1:  # Growing trend\n            analysis['issues'].append('memory_leak')\n\n        return analysis\n\n    def percentile(self, data: List[float], p: int) -&gt; float:\n        \"\"\"Calculate percentile\"\"\"\n        sorted_data = sorted(data)\n        k = (len(sorted_data) - 1) * p / 100\n        f = int(k)\n        c = k - f\n        if f == len(sorted_data) - 1:\n            return sorted_data[f]\n        return sorted_data[f] * (1 - c) + sorted_data[f + 1] * c\n\n    def calculate_trend(self, data: List[float]) -&gt; float:\n        \"\"\"Calculate trend (simple linear regression slope)\"\"\"\n        if len(data) &lt; 2:\n            return 0.0\n\n        n = len(data)\n        x = list(range(n))\n        x_mean = sum(x) / n\n        y_mean = sum(data) / n\n\n        numerator = sum((x[i] - x_mean) * (data[i] - y_mean) for i in range(n))\n        denominator = sum((x[i] - x_mean) ** 2 for i in range(n))\n\n        return numerator / denominator if denominator != 0 else 0.0\n\n    def get_recommendations(self, analysis: Dict) -&gt; List[str]:\n        \"\"\"Get performance recommendations\"\"\"\n        recommendations = []\n\n        if 'high_cpu_usage' in analysis.get('issues', []):\n            recommendations.extend([\n                \"Consider increasing worker threads in configuration\",\n                \"Profile pattern matching performance\",\n                \"Check for inefficient regex patterns\",\n                \"Consider using compiled patterns or hyperscan\"\n            ])\n\n        if 'high_memory_usage' in analysis.get('issues', []):\n            recommendations.extend([\n                \"Reduce queue sizes in async configuration\",\n                \"Implement memory limits in configuration\",\n                \"Check for large log files being held in memory\",\n                \"Consider log rotation and cleanup\"\n            ])\n\n        if 'memory_leak' in analysis.get('issues', []):\n            recommendations.extend([\n                \"Monitor memory growth over longer period\",\n                \"Check for unclosed file handles\",\n                \"Review async coroutine cleanup\",\n                \"Consider restarting service periodically\"\n            ])\n\n        return recommendations\n\ndef main():\n    troubleshooter = PerformanceTroubleshooter()\n    results = troubleshooter.diagnose_performance()\n\n    if 'error' in results:\n        print(f\"\u274c Error: {results['error']}\")\n        return\n\n    print(\"\\n\ud83d\udcca Performance Analysis Results:\")\n    print(\"=\" * 40)\n\n    analysis = results['analysis']\n    print(f\"CPU Usage: avg={analysis['cpu']['avg']:.1f}%, max={analysis['cpu']['max']:.1f}%\")\n    print(f\"Memory Usage: avg={analysis['memory']['avg']:.1f}MB, max={analysis['memory']['max']:.1f}MB\")\n\n    if analysis['issues']:\n        print(f\"\\n\u26a0\ufe0f  Issues Detected: {', '.join(analysis['issues'])}\")\n\n        print(\"\\n\ud83d\udca1 Recommendations:\")\n        for rec in results['recommendations']:\n            print(f\"  \u2022 {rec}\")\n    else:\n        print(\"\\n\u2705 No performance issues detected\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#memory-leaks","title":"Memory Leaks","text":"<p>Symptoms: - Memory usage increases over time - Eventually leads to OOM errors - Service becomes unresponsive</p> <p>Detection &amp; Solutions: <pre><code># Monitor memory usage over time\npython scripts/memory_monitor.py --duration 3600\n\n# Check for memory leaks\nvalgrind --tool=massif python -m nginx_security_monitor\n\n# Analyze memory usage\npython scripts/analyze_memory.py --profile memory.prof\n\n# Temporary fix: restart service periodically\nsudo systemctl restart nginx-security-monitor\n\n# Permanent fixes:\n# 1. Update to latest version\n# 2. Reduce queue sizes in config\n# 3. Implement memory limits\n# 4. Fix application code\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#4-integration-issues","title":"4. Integration Issues","text":""},{"location":"troubleshooting/common-issues/#failed-external-integrations","title":"Failed External Integrations","text":"<p>Common Integration Problems:</p> <pre><code># Integration troubleshooting script\n#!/usr/bin/env python3\n\nclass IntegrationTroubleshooter:\n    def __init__(self):\n        self.integrations = {\n            'fail2ban': self.test_fail2ban,\n            'ossec': self.test_ossec,\n            'suricata': self.test_suricata,\n            'webhook': self.test_webhook\n        }\n\n    def test_fail2ban(self):\n        \"\"\"Test fail2ban integration\"\"\"\n        try:\n            import subprocess\n            result = subprocess.run(['fail2ban-client', 'status'], \n                                  capture_output=True, text=True)\n            if result.returncode == 0:\n                return {'status': 'ok', 'message': 'fail2ban is running'}\n            else:\n                return {'status': 'error', 'message': 'fail2ban not responding'}\n        except FileNotFoundError:\n            return {'status': 'error', 'message': 'fail2ban not installed'}\n\n    def test_webhook(self):\n        \"\"\"Test webhook integration\"\"\"\n        import requests\n        webhook_url = \"https://example.com/webhook\"  # From config\n\n        try:\n            response = requests.post(webhook_url, \n                                   json={'test': True}, \n                                   timeout=10)\n            if response.status_code == 200:\n                return {'status': 'ok', 'message': 'Webhook responding'}\n            else:\n                return {'status': 'error', \n                       'message': f'Webhook returned {response.status_code}'}\n        except requests.exceptions.RequestException as e:\n            return {'status': 'error', 'message': f'Webhook unreachable: {e}'}\n</code></pre>"},{"location":"troubleshooting/common-issues/#5-log-processing-issues","title":"5. Log Processing Issues","text":""},{"location":"troubleshooting/common-issues/#logs-not-being-processed","title":"Logs Not Being Processed","text":"<p>Symptoms: - No threat detections despite suspicious activity - Processing metrics show zero - Log files exist but seem ignored</p> <p>Troubleshooting Decision Tree:</p> <pre><code>Logs Not Processed\n\u251c\u2500\u2500 Check File Permissions\n\u2502   \u251c\u2500\u2500 Cannot read nginx logs \u2192 Fix file permissions\n\u2502   \u251c\u2500\u2500 Cannot write to NSM logs \u2192 Fix directory permissions\n\u2502   \u2514\u2500\u2500 SELinux blocking access \u2192 Configure SELinux\n\u251c\u2500\u2500 Check Configuration\n\u2502   \u251c\u2500\u2500 Wrong log path \u2192 Update config with correct path\n\u2502   \u251c\u2500\u2500 Invalid log format \u2192 Fix log format configuration\n\u2502   \u2514\u2500\u2500 Disabled processing \u2192 Enable log processing\n\u251c\u2500\u2500 Check File Monitoring\n\u2502   \u251c\u2500\u2500 File not being watched \u2192 Check inotify limits\n\u2502   \u251c\u2500\u2500 Log rotation issues \u2192 Fix log rotation config\n\u2502   \u2514\u2500\u2500 File handle leaks \u2192 Restart service\n\u2514\u2500\u2500 Check Processing Pipeline\n    \u251c\u2500\u2500 Queue full \u2192 Increase queue size\n    \u251c\u2500\u2500 Workers stuck \u2192 Restart workers\n    \u2514\u2500\u2500 Pattern errors \u2192 Fix pattern syntax\n</code></pre> <p>Solutions: <pre><code># Check log file access\nsudo -u nsm cat /var/log/nginx/access.log | head -5\n\n# Check inotify limits\ncat /proc/sys/fs/inotify/max_user_watches\necho 'fs.inotify.max_user_watches = 65536' | sudo tee -a /etc/sysctl.conf\n\n# Test log processing manually\npython -c \"\nfrom nginx_security_monitor.log_processor import LogProcessor\nprocessor = LogProcessor()\nprocessor.process_line('192.168.1.1 - - [20/Jul/2025:10:00:00 +0000] \\\"GET /admin.php HTTP/1.1\\\" 200 1234')\n\"\n\n# Check processing metrics\ncurl http://localhost:8080/metrics | grep nsm_log_entries_processed\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#automated-problem-resolution","title":"Automated Problem Resolution","text":""},{"location":"troubleshooting/common-issues/#self-healing-script","title":"Self-Healing Script","text":"<pre><code>#!/bin/bash\n# scripts/self_heal.sh - Automated problem resolution\n\nset -euo pipefail\n\nLOGFILE=\"/var/log/nginx-security-monitor/self-heal.log\"\nLOCKFILE=\"/var/run/nsm-self-heal.lock\"\n\nlog() {\n    echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOGFILE\"\n}\n\n# Prevent concurrent execution\nif [ -f \"$LOCKFILE\" ]; then\n    log \"Self-heal already running (lockfile exists)\"\n    exit 1\nfi\n\ntouch \"$LOCKFILE\"\ntrap \"rm -f $LOCKFILE\" EXIT\n\nlog \"Starting self-healing checks\"\n\n# Check 1: Service health\nif ! curl -s http://localhost:8080/health &gt; /dev/null; then\n    log \"Health check failed, attempting restart\"\n    sudo systemctl restart nginx-security-monitor\n    sleep 10\n\n    if curl -s http://localhost:8080/health &gt; /dev/null; then\n        log \"Service restart successful\"\n    else\n        log \"Service restart failed, escalating\"\n        # Send alert to operations team\n        ./scripts/send_alert.sh \"critical\" \"NSM service restart failed\"\n    fi\nfi\n\n# Check 2: Disk space\nDISK_USAGE=$(df /var/log | tail -1 | awk '{print $5}' | sed 's/%//')\nif [ \"$DISK_USAGE\" -gt 90 ]; then\n    log \"High disk usage detected: ${DISK_USAGE}%\"\n\n    # Clean old logs\n    find /var/log/nginx-security-monitor -name \"*.log.*\" -mtime +7 -delete\n\n    NEW_USAGE=$(df /var/log | tail -1 | awk '{print $5}' | sed 's/%//')\n    log \"Disk usage after cleanup: ${NEW_USAGE}%\"\nfi\n\n# Check 3: Memory usage\nMEMORY_USAGE=$(ps aux | grep nginx-security-monitor | grep -v grep | awk '{print $4}' | head -1)\nif [ \"${MEMORY_USAGE:-0}\" -gt 80 ]; then\n    log \"High memory usage detected: ${MEMORY_USAGE}%\"\n\n    # Restart if memory usage is excessive\n    sudo systemctl restart nginx-security-monitor\n    log \"Service restarted due to high memory usage\"\nfi\n\n# Check 4: Configuration validity\nif ! python -m nginx_security_monitor.config validate; then\n    log \"Configuration validation failed\"\n\n    # Restore backup configuration\n    if [ -f \"/etc/nginx-security-monitor/config/settings.yaml.backup\" ]; then\n        cp /etc/nginx-security-monitor/config/settings.yaml.backup \\\n           /etc/nginx-security-monitor/config/settings.yaml\n        sudo systemctl restart nginx-security-monitor\n        log \"Restored backup configuration\"\n    fi\nfi\n\nlog \"Self-healing checks completed\"\n</code></pre> <p>Related Documentation: - Operations Guide - Performance Tuning - Monitoring Guide - Disaster Recovery</p>"},{"location":"troubleshooting/installation-issues/","title":"Macro Syntax Error","text":"<p>File: <code>troubleshooting/installation-issues.md</code></p> <p>Line 86 in Markdown file: Missing end of comment tag <pre><code>if [ ${#MISSING_PACKAGES[@]} -eq 0 ]; then\n</code></pre></p>"},{"location":"troubleshooting/network-issues/","title":"Network and Connectivity Issues","text":"<p>This guide addresses network-related problems that can affect Nginx Security Monitor's operation, including connectivity issues, firewall problems, and integration failures.</p>"},{"location":"troubleshooting/network-issues/#network-diagnostic-tools","title":"Network Diagnostic Tools","text":""},{"location":"troubleshooting/network-issues/#comprehensive-network-diagnostics","title":"Comprehensive Network Diagnostics","text":"<pre><code>#!/usr/bin/env python3\n# scripts/network_diagnostics.py\n\nimport socket\nimport subprocess\nimport requests\nimport time\nimport json\nimport urllib.parse\nfrom typing import Dict, List, Optional, Tuple\n\nclass NetworkDiagnostics:\n    def __init__(self):\n        self.nsm_host = \"localhost\"\n        self.nsm_port = 8080\n        self.results = {}\n\n    def run_full_diagnostics(self) -&gt; Dict:\n        \"\"\"Run comprehensive network diagnostics\"\"\"\n        print(\"\ud83c\udf10 Running network diagnostics for Nginx Security Monitor...\")\n\n        diagnostics = [\n            (\"Local Service Connectivity\", self.test_local_connectivity),\n            (\"Port Availability\", self.test_port_availability),\n            (\"Firewall Rules\", self.test_firewall_rules),\n            (\"DNS Resolution\", self.test_dns_resolution),\n            (\"External Connectivity\", self.test_external_connectivity),\n            (\"Integration Endpoints\", self.test_integration_endpoints),\n            (\"Network Performance\", self.test_network_performance),\n            (\"SSL/TLS Configuration\", self.test_ssl_configuration)\n        ]\n\n        for test_name, test_func in diagnostics:\n            print(f\"\\n\ud83d\udd0d Testing {test_name}...\")\n            try:\n                result = test_func()\n                self.results[test_name] = result\n\n                if result.get('status') == 'success':\n                    print(f\"   \u2705 {result.get('message', 'OK')}\")\n                elif result.get('status') == 'warning':\n                    print(f\"   \u26a0\ufe0f  {result.get('message', 'Warning')}\")\n                else:\n                    print(f\"   \u274c {result.get('message', 'Failed')}\")\n\n            except Exception as e:\n                error_result = {\n                    'status': 'error',\n                    'message': f\"Test failed with exception: {str(e)}\",\n                    'exception': str(e)\n                }\n                self.results[test_name] = error_result\n                print(f\"   \u274c Error: {e}\")\n\n        return self.results\n\n    def test_local_connectivity(self) -&gt; Dict:\n        \"\"\"Test local service connectivity\"\"\"\n        try:\n            # Test basic socket connection\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(5)\n            result = sock.connect_ex((self.nsm_host, self.nsm_port))\n            sock.close()\n\n            if result != 0:\n                return {\n                    'status': 'error',\n                    'message': f\"Cannot connect to {self.nsm_host}:{self.nsm_port}\",\n                    'error_code': result\n                }\n\n            # Test HTTP connectivity\n            response = requests.get(f\"http://{self.nsm_host}:{self.nsm_port}/health\", timeout=5)\n\n            return {\n                'status': 'success',\n                'message': f\"Service responding on {self.nsm_host}:{self.nsm_port}\",\n                'response_time': response.elapsed.total_seconds(),\n                'status_code': response.status_code\n            }\n\n        except requests.exceptions.RequestException as e:\n            return {\n                'status': 'error',\n                'message': f\"HTTP request failed: {str(e)}\",\n                'error': str(e)\n            }\n        except Exception as e:\n            return {\n                'status': 'error',\n                'message': f\"Connection test failed: {str(e)}\",\n                'error': str(e)\n            }\n\n    def test_port_availability(self) -&gt; Dict:\n        \"\"\"Test port availability and conflicts\"\"\"\n        try:\n            # Check if port is in use\n            result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True)\n\n            port_line = None\n            for line in result.stdout.split('\\n'):\n                if f':{self.nsm_port}' in line and 'LISTEN' in line:\n                    port_line = line\n                    break\n\n            if not port_line:\n                return {\n                    'status': 'error',\n                    'message': f\"Port {self.nsm_port} is not listening\",\n                    'suggestion': 'Check if NSM service is running'\n                }\n\n            # Extract process information\n            parts = port_line.split()\n            if len(parts) &gt;= 7:\n                process_info = parts[6]\n                if 'nginx-security-monitor' in process_info or 'python' in process_info:\n                    return {\n                        'status': 'success',\n                        'message': f\"Port {self.nsm_port} is correctly bound to NSM\",\n                        'process': process_info\n                    }\n                else:\n                    return {\n                        'status': 'warning',\n                        'message': f\"Port {self.nsm_port} is bound to different process: {process_info}\",\n                        'process': process_info\n                    }\n\n            return {\n                'status': 'success',\n                'message': f\"Port {self.nsm_port} is listening\",\n                'details': port_line.strip()\n            }\n\n        except subprocess.SubprocessError as e:\n            return {\n                'status': 'error',\n                'message': f\"Cannot check port status: {str(e)}\",\n                'error': str(e)\n            }\n\n    def test_firewall_rules(self) -&gt; Dict:\n        \"\"\"Test firewall configuration\"\"\"\n        firewall_tests = []\n\n        # Test UFW (Ubuntu/Debian)\n        try:\n            result = subprocess.run(['ufw', 'status'], capture_output=True, text=True)\n            if result.returncode == 0:\n                ufw_output = result.stdout\n                if 'Status: active' in ufw_output:\n                    if f'{self.nsm_port}' in ufw_output:\n                        firewall_tests.append(f\"UFW: Port {self.nsm_port} is allowed\")\n                    else:\n                        firewall_tests.append(f\"UFW: Port {self.nsm_port} may be blocked\")\n                else:\n                    firewall_tests.append(\"UFW: Firewall is inactive\")\n        except (subprocess.SubprocessError, FileNotFoundError):\n            pass\n\n        # Test iptables\n        try:\n            result = subprocess.run(['iptables', '-L', 'INPUT'], capture_output=True, text=True)\n            if result.returncode == 0:\n                if 'ACCEPT' in result.stdout or 'policy ACCEPT' in result.stdout:\n                    firewall_tests.append(\"iptables: Basic rules detected\")\n                else:\n                    firewall_tests.append(\"iptables: Restrictive rules may be blocking traffic\")\n        except (subprocess.SubprocessError, FileNotFoundError):\n            pass\n\n        # Test firewalld (CentOS/RHEL)\n        try:\n            result = subprocess.run(['firewall-cmd', '--state'], capture_output=True, text=True)\n            if result.returncode == 0 and 'running' in result.stdout:\n                # Check if port is open\n                port_result = subprocess.run([\n                    'firewall-cmd', '--query-port', f'{self.nsm_port}/tcp'\n                ], capture_output=True, text=True)\n\n                if port_result.returncode == 0:\n                    firewall_tests.append(f\"firewalld: Port {self.nsm_port} is open\")\n                else:\n                    firewall_tests.append(f\"firewalld: Port {self.nsm_port} may be blocked\")\n        except (subprocess.SubprocessError, FileNotFoundError):\n            pass\n\n        if not firewall_tests:\n            return {\n                'status': 'warning',\n                'message': 'No firewall configuration detected',\n                'suggestion': 'Consider enabling a firewall for security'\n            }\n\n        return {\n            'status': 'success',\n            'message': 'Firewall configuration checked',\n            'details': firewall_tests\n        }\n\n    def test_dns_resolution(self) -&gt; Dict:\n        \"\"\"Test DNS resolution for external services\"\"\"\n        test_domains = [\n            'github.com',\n            'api.github.com',\n            'security-feeds.example.com'  # Replace with actual threat feed domains\n        ]\n\n        resolution_results = []\n        failed_domains = []\n\n        for domain in test_domains:\n            try:\n                ip_address = socket.gethostbyname(domain)\n                resolution_results.append(f\"{domain} -&gt; {ip_address}\")\n            except socket.gaierror as e:\n                failed_domains.append(f\"{domain}: {str(e)}\")\n\n        if failed_domains:\n            return {\n                'status': 'warning',\n                'message': f\"DNS resolution failed for {len(failed_domains)} domains\",\n                'failed_domains': failed_domains,\n                'successful': resolution_results\n            }\n\n        return {\n            'status': 'success',\n            'message': f\"DNS resolution successful for {len(test_domains)} domains\",\n            'resolutions': resolution_results\n        }\n\n    def test_external_connectivity(self) -&gt; Dict:\n        \"\"\"Test external HTTP/HTTPS connectivity\"\"\"\n        test_urls = [\n            'https://httpbin.org/get',\n            'https://api.github.com',\n            'https://www.google.com'\n        ]\n\n        connectivity_results = []\n        failed_urls = []\n\n        for url in test_urls:\n            try:\n                start_time = time.time()\n                response = requests.get(url, timeout=10)\n                response_time = time.time() - start_time\n\n                if response.status_code == 200:\n                    connectivity_results.append({\n                        'url': url,\n                        'status': 'success',\n                        'response_time': round(response_time, 3),\n                        'status_code': response.status_code\n                    })\n                else:\n                    failed_urls.append({\n                        'url': url,\n                        'error': f\"HTTP {response.status_code}\",\n                        'response_time': round(response_time, 3)\n                    })\n\n            except requests.exceptions.RequestException as e:\n                failed_urls.append({\n                    'url': url,\n                    'error': str(e)\n                })\n\n        if failed_urls:\n            return {\n                'status': 'warning',\n                'message': f\"External connectivity issues detected\",\n                'failed': failed_urls,\n                'successful': connectivity_results\n            }\n\n        return {\n            'status': 'success',\n            'message': f\"External connectivity working for {len(test_urls)} URLs\",\n            'results': connectivity_results\n        }\n\n    def test_integration_endpoints(self) -&gt; Dict:\n        \"\"\"Test integration endpoint connectivity\"\"\"\n        try:\n            # Get integration configuration from NSM\n            response = requests.get(\n                f\"http://{self.nsm_host}:{self.nsm_port}/integrations/config\", \n                timeout=5\n            )\n\n            if response.status_code != 200:\n                return {\n                    'status': 'error',\n                    'message': 'Cannot retrieve integration configuration'\n                }\n\n            config = response.json()\n            integration_tests = []\n\n            # Test webhook endpoints\n            if config.get('webhook', {}).get('enabled'):\n                webhook_url = config['webhook'].get('url')\n                if webhook_url:\n                    try:\n                        # Test with HEAD request to avoid triggering alerts\n                        test_response = requests.head(webhook_url, timeout=10)\n                        integration_tests.append({\n                            'type': 'webhook',\n                            'url': webhook_url,\n                            'status': 'reachable' if test_response.status_code &lt; 500 else 'error',\n                            'status_code': test_response.status_code\n                        })\n                    except requests.exceptions.RequestException as e:\n                        integration_tests.append({\n                            'type': 'webhook',\n                            'url': webhook_url,\n                            'status': 'unreachable',\n                            'error': str(e)\n                        })\n\n            # Test email server connectivity\n            if config.get('email', {}).get('enabled'):\n                smtp_server = config['email'].get('smtp_server')\n                smtp_port = config['email'].get('port', 587)\n\n                if smtp_server:\n                    try:\n                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                        sock.settimeout(10)\n                        result = sock.connect_ex((smtp_server, smtp_port))\n                        sock.close()\n\n                        integration_tests.append({\n                            'type': 'email',\n                            'server': f\"{smtp_server}:{smtp_port}\",\n                            'status': 'reachable' if result == 0 else 'unreachable',\n                            'error_code': result if result != 0 else None\n                        })\n                    except Exception as e:\n                        integration_tests.append({\n                            'type': 'email',\n                            'server': f\"{smtp_server}:{smtp_port}\",\n                            'status': 'error',\n                            'error': str(e)\n                        })\n\n            if not integration_tests:\n                return {\n                    'status': 'success',\n                    'message': 'No external integrations configured'\n                }\n\n            failed_integrations = [t for t in integration_tests if t['status'] in ['unreachable', 'error']]\n\n            if failed_integrations:\n                return {\n                    'status': 'warning',\n                    'message': f\"{len(failed_integrations)} integration(s) unreachable\",\n                    'failed': failed_integrations,\n                    'all_tests': integration_tests\n                }\n\n            return {\n                'status': 'success',\n                'message': f\"All {len(integration_tests)} integrations reachable\",\n                'tests': integration_tests\n            }\n\n        except Exception as e:\n            return {\n                'status': 'error',\n                'message': f\"Integration endpoint test failed: {str(e)}\",\n                'error': str(e)\n            }\n\n    def test_network_performance(self) -&gt; Dict:\n        \"\"\"Test network performance metrics\"\"\"\n        try:\n            # Test latency to NSM service\n            latencies = []\n            for _ in range(5):\n                start_time = time.time()\n                response = requests.get(f\"http://{self.nsm_host}:{self.nsm_port}/health\", timeout=5)\n                latency = (time.time() - start_time) * 1000  # Convert to milliseconds\n                latencies.append(latency)\n                time.sleep(0.1)\n\n            avg_latency = sum(latencies) / len(latencies)\n            max_latency = max(latencies)\n            min_latency = min(latencies)\n\n            # Determine performance status\n            if avg_latency &gt; 1000:  # &gt; 1 second\n                status = 'error'\n                message = f\"High latency detected: {avg_latency:.1f}ms average\"\n            elif avg_latency &gt; 500:  # &gt; 500ms\n                status = 'warning'\n                message = f\"Moderate latency: {avg_latency:.1f}ms average\"\n            else:\n                status = 'success'\n                message = f\"Good performance: {avg_latency:.1f}ms average\"\n\n            return {\n                'status': status,\n                'message': message,\n                'metrics': {\n                    'average_latency_ms': round(avg_latency, 1),\n                    'min_latency_ms': round(min_latency, 1),\n                    'max_latency_ms': round(max_latency, 1),\n                    'measurements': len(latencies)\n                }\n            }\n\n        except Exception as e:\n            return {\n                'status': 'error',\n                'message': f\"Performance test failed: {str(e)}\",\n                'error': str(e)\n            }\n\n    def test_ssl_configuration(self) -&gt; Dict:\n        \"\"\"Test SSL/TLS configuration if HTTPS is enabled\"\"\"\n        try:\n            # Check if HTTPS is configured\n            response = requests.get(\n                f\"http://{self.nsm_host}:{self.nsm_port}/config/security\",\n                timeout=5\n            )\n\n            if response.status_code != 200:\n                return {\n                    'status': 'warning',\n                    'message': 'Cannot check SSL configuration'\n                }\n\n            config = response.json()\n\n            if not config.get('https_enabled', False):\n                return {\n                    'status': 'success',\n                    'message': 'HTTPS not enabled (HTTP only)'\n                }\n\n            # Test HTTPS endpoint\n            https_port = config.get('https_port', 8443)\n            try:\n                https_response = requests.get(\n                    f\"https://{self.nsm_host}:{https_port}/health\",\n                    timeout=5,\n                    verify=True  # Verify SSL certificate\n                )\n\n                return {\n                    'status': 'success',\n                    'message': f\"HTTPS working on port {https_port}\",\n                    'ssl_verified': True\n                }\n\n            except requests.exceptions.SSLError as e:\n                return {\n                    'status': 'warning',\n                    'message': f\"SSL certificate issue: {str(e)}\",\n                    'https_port': https_port,\n                    'ssl_error': str(e)\n                }\n            except requests.exceptions.RequestException as e:\n                return {\n                    'status': 'error',\n                    'message': f\"HTTPS connection failed: {str(e)}\",\n                    'https_port': https_port,\n                    'error': str(e)\n                }\n\n        except Exception as e:\n            return {\n                'status': 'error',\n                'message': f\"SSL test failed: {str(e)}\",\n                'error': str(e)\n            }\n\n    def generate_report(self) -&gt; str:\n        \"\"\"Generate a comprehensive network diagnostic report\"\"\"\n        report = []\n        report.append(\"=\"*60)\n        report.append(\"NGINX SECURITY MONITOR - NETWORK DIAGNOSTIC REPORT\")\n        report.append(\"=\"*60)\n        report.append(f\"Generated at: {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n        report.append(\"\")\n\n        # Summary\n        total_tests = len(self.results)\n        successful_tests = len([r for r in self.results.values() if r.get('status') == 'success'])\n        warning_tests = len([r for r in self.results.values() if r.get('status') == 'warning'])\n        failed_tests = len([r for r in self.results.values() if r.get('status') in ['error', 'failed']])\n\n        report.append(\"SUMMARY:\")\n        report.append(f\"  Total Tests: {total_tests}\")\n        report.append(f\"  Successful: {successful_tests}\")\n        report.append(f\"  Warnings: {warning_tests}\")\n        report.append(f\"  Failed: {failed_tests}\")\n        report.append(\"\")\n\n        # Detailed results\n        for test_name, result in self.results.items():\n            status_emoji = {\n                'success': '\u2705',\n                'warning': '\u26a0\ufe0f',\n                'error': '\u274c',\n                'failed': '\u274c'\n            }.get(result.get('status', 'unknown'), '\u2753')\n\n            report.append(f\"{status_emoji} {test_name.upper()}:\")\n            report.append(f\"   Status: {result.get('status', 'unknown')}\")\n            report.append(f\"   Message: {result.get('message', 'No message')}\")\n\n            # Add additional details if available\n            for key, value in result.items():\n                if key not in ['status', 'message']:\n                    if isinstance(value, (list, dict)):\n                        report.append(f\"   {key.title()}: {json.dumps(value, indent=6)}\")\n                    else:\n                        report.append(f\"   {key.title()}: {value}\")\n\n            report.append(\"\")\n\n        # Recommendations\n        report.append(\"RECOMMENDATIONS:\")\n        recommendations = self.generate_recommendations()\n        for rec in recommendations:\n            report.append(f\"  \u2022 {rec}\")\n\n        return \"\\n\".join(report)\n\n    def generate_recommendations(self) -&gt; List[str]:\n        \"\"\"Generate recommendations based on test results\"\"\"\n        recommendations = []\n\n        if self.results.get('Local Service Connectivity', {}).get('status') != 'success':\n            recommendations.append(\"Check if NSM service is running: sudo systemctl status nginx-security-monitor\")\n\n        if self.results.get('Firewall Rules', {}).get('status') == 'warning':\n            recommendations.append(f\"Consider opening port {self.nsm_port} in firewall: sudo ufw allow {self.nsm_port}\")\n\n        if self.results.get('External Connectivity', {}).get('status') != 'success':\n            recommendations.append(\"Check internet connectivity and proxy settings\")\n\n        if self.results.get('Integration Endpoints', {}).get('status') == 'warning':\n            recommendations.append(\"Review integration configurations and endpoint availability\")\n\n        if self.results.get('Network Performance', {}).get('status') in ['warning', 'error']:\n            recommendations.append(\"Investigate network latency issues and system performance\")\n\n        if not recommendations:\n            recommendations.append(\"Network configuration appears to be working correctly\")\n\n        return recommendations\n\ndef main():\n    diagnostics = NetworkDiagnostics()\n    results = diagnostics.run_full_diagnostics()\n\n    print(\"\\n\" + \"=\"*60)\n    print(\"NETWORK DIAGNOSTIC COMPLETE\")\n    print(\"=\"*60)\n\n    # Generate and save report\n    report = diagnostics.generate_report()\n\n    # Save to file\n    with open('/tmp/nsm-network-diagnostics.txt', 'w') as f:\n        f.write(report)\n\n    print(f\"\ud83d\udccb Detailed report saved to: /tmp/nsm-network-diagnostics.txt\")\n\n    # Show summary\n    failed_tests = [name for name, result in results.items() \n                   if result.get('status') in ['error', 'failed']]\n\n    if not failed_tests:\n        print(\"\ud83c\udf89 All network tests passed!\")\n    else:\n        print(f\"\u26a0\ufe0f  {len(failed_tests)} test(s) failed:\")\n        for test_name in failed_tests:\n            print(f\"   \u2022 {test_name}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"troubleshooting/network-issues/#common-network-issues","title":"Common Network Issues","text":""},{"location":"troubleshooting/network-issues/#1-port-binding-issues","title":"1. Port Binding Issues","text":""},{"location":"troubleshooting/network-issues/#port-already-in-use","title":"Port Already in Use","text":"<p>Error Messages: <pre><code>[Errno 98] Address already in use\nOSError: [Errno 98] Address already in use: ('0.0.0.0', 8080)\nbind: Address already in use\n</code></pre></p> <p>Diagnosis and Solutions: <pre><code># Find what's using the port\nsudo lsof -i :8080\nsudo netstat -tlnp | grep :8080\n\n# Kill the conflicting process\nsudo kill -9 &lt;PID&gt;\n\n# Or change NSM port in configuration\nsudo vim /etc/nginx-security-monitor/config/settings.yaml\n# Change: port: 8081\n\n# Restart NSM service\nsudo systemctl restart nginx-security-monitor\n</code></pre></p>"},{"location":"troubleshooting/network-issues/#permission-denied-on-port-binding","title":"Permission Denied on Port Binding","text":"<p>Error Messages: <pre><code>[Errno 13] Permission denied\nbind: Permission denied\n</code></pre></p> <p>Solutions: <pre><code># Option 1: Use port &gt; 1024 (recommended)\n# Edit config to use port 8080 instead of 80\n\n# Option 2: Grant CAP_NET_BIND_SERVICE capability\nsudo setcap 'cap_net_bind_service=+ep' /usr/local/bin/nginx-security-monitor\n\n# Option 3: Run with sudo (not recommended for production)\nsudo systemctl edit nginx-security-monitor\n# Add:\n# [Service]\n# User=root\n# Group=root\n</code></pre></p>"},{"location":"troubleshooting/network-issues/#2-firewall-configuration-issues","title":"2. Firewall Configuration Issues","text":""},{"location":"troubleshooting/network-issues/#ufw-ubuntudebian","title":"UFW (Ubuntu/Debian)","text":"<pre><code># Check current UFW status\nsudo ufw status verbose\n\n# Allow NSM port\nsudo ufw allow 8080/tcp\n\n# Allow from specific networks only\nsudo ufw allow from 10.0.0.0/8 to any port 8080\nsudo ufw allow from 192.168.0.0/16 to any port 8080\n\n# Enable UFW if not active\nsudo ufw enable\n\n# Check NSM service after firewall changes\ncurl http://localhost:8080/health\n</code></pre>"},{"location":"troubleshooting/network-issues/#iptables","title":"iptables","text":"<pre><code># Check current iptables rules\nsudo iptables -L -n\n\n# Allow NSM port\nsudo iptables -A INPUT -p tcp --dport 8080 -j ACCEPT\n\n# Save rules (Ubuntu/Debian)\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# Save rules (CentOS/RHEL)\nsudo service iptables save\n</code></pre>"},{"location":"troubleshooting/network-issues/#firewalld-centosrhelfedora","title":"firewalld (CentOS/RHEL/Fedora)","text":"<pre><code># Check firewalld status\nsudo firewall-cmd --state\n\n# Open NSM port permanently\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Or add a service definition\nsudo firewall-cmd --permanent --new-service=nginx-security-monitor\nsudo firewall-cmd --permanent --service=nginx-security-monitor --set-description=\"Nginx Security Monitor\"\nsudo firewall-cmd --permanent --service=nginx-security-monitor --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-service=nginx-security-monitor\nsudo firewall-cmd --reload\n</code></pre>"},{"location":"troubleshooting/network-issues/#3-integration-connectivity-issues","title":"3. Integration Connectivity Issues","text":""},{"location":"troubleshooting/network-issues/#webhook-integration-failures","title":"Webhook Integration Failures","text":"<p>Common Issues: <pre><code># Test webhook connectivity\n#!/usr/bin/env python3\n\nimport requests\nimport json\nimport ssl\nfrom urllib.parse import urlparse\n\ndef test_webhook(webhook_url, test_payload=None):\n    \"\"\"Test webhook connectivity and response\"\"\"\n\n    if test_payload is None:\n        test_payload = {\n            \"test\": True,\n            \"timestamp\": \"2025-01-20T10:00:00Z\",\n            \"source\": \"nsm-connectivity-test\"\n        }\n\n    print(f\"\ud83d\udd17 Testing webhook: {webhook_url}\")\n\n    # Parse URL to check for common issues\n    parsed = urlparse(webhook_url)\n\n    if not parsed.scheme:\n        print(\"\u274c URL missing scheme (http:// or https://)\")\n        return False\n\n    if not parsed.netloc:\n        print(\"\u274c URL missing host\")\n        return False\n\n    try:\n        # Test with timeout\n        response = requests.post(\n            webhook_url,\n            json=test_payload,\n            timeout=30,\n            headers={\n                'Content-Type': 'application/json',\n                'User-Agent': 'nginx-security-monitor/1.0'\n            }\n        )\n\n        print(f\"\u2705 Response: {response.status_code}\")\n\n        if response.status_code == 200:\n            print(\"\u2705 Webhook is working correctly\")\n            return True\n        elif response.status_code == 404:\n            print(\"\u274c Webhook endpoint not found (404)\")\n        elif response.status_code == 401:\n            print(\"\u274c Authentication required (401)\")\n        elif response.status_code == 403:\n            print(\"\u274c Access forbidden (403)\")\n        elif response.status_code &gt;= 500:\n            print(f\"\u274c Server error ({response.status_code})\")\n        else:\n            print(f\"\u26a0\ufe0f  Unexpected status code: {response.status_code}\")\n\n        return False\n\n    except requests.exceptions.SSLError as e:\n        print(f\"\u274c SSL/TLS error: {e}\")\n        print(\"\ud83d\udca1 Try: Check certificate validity or disable SSL verification\")\n        return False\n\n    except requests.exceptions.ConnectionError as e:\n        print(f\"\u274c Connection error: {e}\")\n        print(\"\ud83d\udca1 Try: Check URL, firewall, and network connectivity\")\n        return False\n\n    except requests.exceptions.Timeout as e:\n        print(f\"\u274c Timeout error: {e}\")\n        print(\"\ud83d\udca1 Try: Increase timeout or check server response time\")\n        return False\n\n    except Exception as e:\n        print(f\"\u274c Unexpected error: {e}\")\n        return False\n\n# Example usage\nwebhook_urls = [\n    \"https://hooks.slack.com/services/YOUR/WEBHOOK/URL\",\n    \"https://discord.com/api/webhooks/YOUR/WEBHOOK/URL\",\n    \"https://your-server.com/nsm-alerts\"\n]\n\nfor url in webhook_urls:\n    test_webhook(url)\n    print(\"-\" * 50)\n</code></pre></p>"},{"location":"troubleshooting/network-issues/#email-integration-issues","title":"Email Integration Issues","text":"<pre><code>#!/usr/bin/env python3\n# Test email integration\n\nimport smtplib\nimport socket\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\ndef test_email_integration(smtp_server, port, username, password, use_tls=True):\n    \"\"\"Test email server connectivity and authentication\"\"\"\n\n    print(f\"\ud83d\udce7 Testing email integration: {smtp_server}:{port}\")\n\n    try:\n        # Test basic connectivity\n        print(\"\ud83d\udd0d Testing server connectivity...\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(10)\n        result = sock.connect_ex((smtp_server, port))\n        sock.close()\n\n        if result != 0:\n            print(f\"\u274c Cannot connect to {smtp_server}:{port}\")\n            return False\n\n        print(\"\u2705 Server is reachable\")\n\n        # Test SMTP connection\n        print(\"\ud83d\udd0d Testing SMTP connection...\")\n\n        if port == 465:  # SSL\n            server = smtplib.SMTP_SSL(smtp_server, port, timeout=10)\n        else:\n            server = smtplib.SMTP(smtp_server, port, timeout=10)\n            if use_tls and port != 465:\n                server.starttls()\n\n        print(\"\u2705 SMTP connection established\")\n\n        # Test authentication\n        if username and password:\n            print(\"\ud83d\udd0d Testing authentication...\")\n            try:\n                server.login(username, password)\n                print(\"\u2705 Authentication successful\")\n            except smtplib.SMTPAuthenticationError as e:\n                print(f\"\u274c Authentication failed: {e}\")\n                server.quit()\n                return False\n\n        # Test sending (dry run)\n        print(\"\ud83d\udd0d Testing message composition...\")\n\n        msg = MIMEMultipart()\n        msg['From'] = username or 'nsm@localhost'\n        msg['To'] = username or 'admin@localhost'\n        msg['Subject'] = 'NSM Connectivity Test'\n\n        body = \"This is a test message from Nginx Security Monitor connectivity test.\"\n        msg.attach(MIMEText(body, 'plain'))\n\n        print(\"\u2705 Message composition successful\")\n        print(\"\u2139\ufe0f  Not sending test email to avoid spam\")\n\n        server.quit()\n        print(\"\u2705 Email integration test completed successfully\")\n        return True\n\n    except socket.gaierror as e:\n        print(f\"\u274c DNS resolution failed: {e}\")\n        return False\n\n    except socket.timeout:\n        print(f\"\u274c Connection timeout to {smtp_server}:{port}\")\n        return False\n\n    except smtplib.SMTPException as e:\n        print(f\"\u274c SMTP error: {e}\")\n        return False\n\n    except Exception as e:\n        print(f\"\u274c Unexpected error: {e}\")\n        return False\n\n# Common email provider settings for testing\nemail_providers = {\n    'gmail': {\n        'smtp_server': 'smtp.gmail.com',\n        'port': 587,\n        'use_tls': True\n    },\n    'outlook': {\n        'smtp_server': 'smtp-mail.outlook.com',\n        'port': 587,\n        'use_tls': True\n    },\n    'yahoo': {\n        'smtp_server': 'smtp.mail.yahoo.com',\n        'port': 587,\n        'use_tls': True\n    }\n}\n\n# Test with your configuration\n# test_email_integration(\n#     smtp_server=\"your-smtp-server.com\",\n#     port=587,\n#     username=\"your-username\",\n#     password=\"your-password\"\n# )\n</code></pre>"},{"location":"troubleshooting/network-issues/#4-proxy-and-nat-issues","title":"4. Proxy and NAT Issues","text":""},{"location":"troubleshooting/network-issues/#proxy-configuration","title":"Proxy Configuration","text":"<pre><code># Set proxy environment variables\nexport http_proxy=http://proxy.company.com:8080\nexport https_proxy=http://proxy.company.com:8080\nexport no_proxy=localhost,127.0.0.1,10.0.0.0/8,192.168.0.0/16\n\n# Configure for NSM service\nsudo systemctl edit nginx-security-monitor\n# Add:\n# [Service]\n# Environment=\"http_proxy=http://proxy.company.com:8080\"\n# Environment=\"https_proxy=http://proxy.company.com:8080\"\n# Environment=\"no_proxy=localhost,127.0.0.1\"\n\n# Test proxy connectivity\ncurl -x http://proxy.company.com:8080 https://api.github.com\n\n# Configure proxy in NSM config\ncat &gt;&gt; /etc/nginx-security-monitor/config/settings.yaml &lt;&lt; EOF\nnetwork:\n  proxy:\n    http: \"http://proxy.company.com:8080\"\n    https: \"http://proxy.company.com:8080\"\n    no_proxy: [\"localhost\", \"127.0.0.1\", \"10.0.0.0/8\"]\nEOF\n</code></pre>"},{"location":"troubleshooting/network-issues/#nat-and-load-balancer-issues","title":"NAT and Load Balancer Issues","text":"<pre><code># Load balancer health check configuration\n# /etc/nginx/sites-available/nsm-lb\n\nupstream nsm_backend {\n    server 10.0.1.10:8080;\n    server 10.0.1.11:8080;\n    server 10.0.1.12:8080;\n}\n\nserver {\n    listen 80;\n    server_name nsm.company.com;\n\n    location /health {\n        proxy_pass http://nsm_backend/health;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # Health check specific settings\n        proxy_connect_timeout 5s;\n        proxy_send_timeout 5s;\n        proxy_read_timeout 5s;\n    }\n\n    location / {\n        proxy_pass http://nsm_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # WebSocket support for real-time features\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n</code></pre>"},{"location":"troubleshooting/network-issues/#5-dns-and-service-discovery-issues","title":"5. DNS and Service Discovery Issues","text":""},{"location":"troubleshooting/network-issues/#dns-resolution-problems","title":"DNS Resolution Problems","text":"<pre><code># Test DNS resolution\nnslookup api.github.com\ndig api.github.com\n\n# Check DNS servers\ncat /etc/resolv.conf\n\n# Test with different DNS servers\nnslookup api.github.com 8.8.8.8\nnslookup api.github.com 1.1.1.1\n\n# Fix DNS issues\n# Option 1: Use reliable DNS servers\necho \"nameserver 8.8.8.8\" | sudo tee /etc/resolv.conf\necho \"nameserver 1.1.1.1\" | sudo tee -a /etc/resolv.conf\n\n# Option 2: Configure systemd-resolved\nsudo systemctl enable systemd-resolved\nsudo systemctl start systemd-resolved\nsudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf\n</code></pre>"},{"location":"troubleshooting/network-issues/#service-discovery-configuration","title":"Service Discovery Configuration","text":"<pre><code># NSM configuration for service discovery\nservice_discovery:\n  enabled: true\n  method: \"consul\"  # consul, etcd, dns\n\n  consul:\n    endpoints: [\"consul.service.consul:8500\"]\n    service_name: \"nginx-security-monitor\"\n    health_check:\n      http: \"http://localhost:8080/health\"\n      interval: \"10s\"\n      timeout: \"3s\"\n\n  dns:\n    domain: \"nsm.service.consul\"\n    port: 8080\n</code></pre> <p>Related Documentation: - Common Issues - Installation Issues - Configuration Guide - Operations Guide - Security Features</p>"}]}